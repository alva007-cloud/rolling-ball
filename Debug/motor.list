
motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08008c70  08008c70  00009c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e84  08008e84  0000a068  2**0
                  CONTENTS
  4 .ARM          00000000  08008e84  08008e84  0000a068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e84  08008e84  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e84  08008e84  00009e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e88  08008e88  00009e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008e8c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d40  20000068  08008ef4  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da8  08008ef4  0000ada8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c52  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc9  00000000  00000000  0001fce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00023ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fab  00000000  00000000  00024ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b935  00000000  00000000  00025ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be6f  00000000  00000000  000417d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000953a6  00000000  00000000  0005d647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f29ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb8  00000000  00000000  000f2a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000f85e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08008c58 	.word	0x08008c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08008c58 	.word	0x08008c58

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Get_Time_Interval>:
  *@参数2：开始计时的时间
  *@参数3：要延时的时间间隔
  *@返回值：0-延时时间未到，1-延时时间已到
  */
static uint8_t Get_Time_Interval(uint32_t Current_Time, uint32_t Past_Time, uint32_t Delay_Time)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
    if(Current_Time < Past_Time)//实时时间小于开始时间，时间计数发生回滚，防止溢出
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d20a      	bcs.n	80006be <Get_Time_Interval+0x2a>
    {
        if(0xFFFFFFFF - Past_Time + Current_Time >= Delay_Time)
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	3b01      	subs	r3, #1
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d801      	bhi.n	80006ba <Get_Time_Interval+0x26>
        {
            return 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00a      	b.n	80006d0 <Get_Time_Interval+0x3c>
        }
        else
        {
            return 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e008      	b.n	80006d0 <Get_Time_Interval+0x3c>
        }
    }
    else        //实时时间大于开始时间
    {
        if(Current_Time - Past_Time >= Delay_Time)
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d801      	bhi.n	80006ce <Get_Time_Interval+0x3a>
        {
            return 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e000      	b.n	80006d0 <Get_Time_Interval+0x3c>
        }
        else
        {
            return 0;
 80006ce:	2300      	movs	r3, #0
        }
    }
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <TOF_pid_proc>:
/*
 * @ TOF050C读取以及pid调参的时间切片，周期为100ms
 */

static void TOF_pid_proc(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	uint8_t range = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
   //每100ms读取一次TOF050C的值
   //每100ms进行一次pid调试
	static uint32_t Static_Time = 0;

	if(Get_Time_Interval(HAL_GetTick(),Static_Time,100)==1)
 80006e6:	f002 fb63 	bl	8002db0 <HAL_GetTick>
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <TOF_pid_proc+0x54>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2264      	movs	r2, #100	@ 0x64
 80006f0:	4619      	mov	r1, r3
 80006f2:	f7ff ffcf 	bl	8000694 <Get_Time_Interval>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d114      	bne.n	8000726 <TOF_pid_proc+0x4a>
	{
	    Static_Time = HAL_GetTick();
 80006fc:	f002 fb58 	bl	8002db0 <HAL_GetTick>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <TOF_pid_proc+0x54>)
 8000704:	6013      	str	r3, [r2, #0]
	    range = VL6180X_ReadRangeSingleMillimeters();   //实际上容易有高频噪音，且当距离大幅度变化时输出波形会比较生硬
 8000706:	f001 f88b 	bl	8001820 <VL6180X_ReadRangeSingleMillimeters>
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	                                                    //实操发现对range进行低通滤波会平滑一点，可以视到时候的情况来决定是否滤波
		pid_control_motor(range);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fa59 	bl	8001bc8 <pid_control_motor>
		Send_sprintf(PC_USART,"%d,%d\n",range,my_pid.error);
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <TOF_pid_proc+0x58>)
 800071a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800071e:	4906      	ldr	r1, [pc, #24]	@ (8000738 <TOF_pid_proc+0x5c>)
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <TOF_pid_proc+0x60>)
 8000722:	f001 faa8 	bl	8001c76 <Send_sprintf>


	}

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000b0 	.word	0x200000b0
 8000734:	20000124 	.word	0x20000124
 8000738:	08008c70 	.word	0x08008c70
 800073c:	20000b88 	.word	0x20000b88

08000740 <callback_func_0>:
/*
 * ==========================状态机的各个回调函数==========================================
 */

void callback_func_0(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	//空闲状态下的函数指针
	return;    //空闲状态下什么都不用干
 8000744:	bf00      	nop
}
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <callback_func_1>:

void callback_func_1(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(global_state == OFFSET_CALIBRATION)
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <callback_func_1+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b01      	cmp	r3, #1
 8000758:	d104      	bne.n	8000764 <callback_func_1+0x18>
	{//偏移校准
		VL6180X_Offset_Calibration();
 800075a:	f001 f887 	bl	800186c <VL6180X_Offset_Calibration>
		global_state = EVENT_IDLE;
 800075e:	4b02      	ldr	r3, [pc, #8]	@ (8000768 <callback_func_1+0x1c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	}
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000ac 	.word	0x200000ac

0800076c <callback_func_2>:

void callback_func_2(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	//串扰校准
	if(global_state == CRSTLK_CALIBRATION)
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <callback_func_2+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b02      	cmp	r3, #2
 8000778:	d104      	bne.n	8000784 <callback_func_2+0x18>
	{
		VL6180X_CrossTalk_Callibration();
 800077a:	f001 f8b5 	bl	80018e8 <VL6180X_CrossTalk_Callibration>
		global_state = EVENT_IDLE;      //校准完后空闲状态，还要确定小球位置，因此不会马上开始运行
 800077e:	4b02      	ldr	r3, [pc, #8]	@ (8000788 <callback_func_2+0x1c>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	}
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000ac 	.word	0x200000ac

0800078c <callback_func_3>:

void callback_func_3(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	static uint16_t encoder = 0;
	if(global_state == MOTOR_RESET_POS)
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <callback_func_3+0x58>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b03      	cmp	r3, #3
 8000798:	d122      	bne.n	80007e0 <callback_func_3+0x54>
	{
		//选择新的位置并确定
		//一些电机归零的代码
		while(global_state != RUNNING)
 800079a:	e00c      	b.n	80007b6 <callback_func_3+0x2a>
		{
			encoder = Read_ProcessedEncoder();
 800079c:	f000 f886 	bl	80008ac <Read_ProcessedEncoder>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <callback_func_3+0x5c>)
 80007a6:	801a      	strh	r2, [r3, #0]
			Send_sprintf(PC_USART,"encoder:%d!\n",encoder);
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <callback_func_3+0x5c>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	490f      	ldr	r1, [pc, #60]	@ (80007ec <callback_func_3+0x60>)
 80007b0:	480f      	ldr	r0, [pc, #60]	@ (80007f0 <callback_func_3+0x64>)
 80007b2:	f001 fa60 	bl	8001c76 <Send_sprintf>
		while(global_state != RUNNING)
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <callback_func_3+0x58>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d1ed      	bne.n	800079c <callback_func_3+0x10>
		}    //这里在按键那里进行状态改变，确定按键没按下时堵塞在这里，
											 //当确定按键按下之后就把标志位设为RUNNING，跳出死循环
											//在这里记下设定好的位置
		Send_sprintf(PC_USART,"target:%d!\n",encoder);
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <callback_func_3+0x5c>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	490b      	ldr	r1, [pc, #44]	@ (80007f4 <callback_func_3+0x68>)
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <callback_func_3+0x64>)
 80007ca:	f001 fa54 	bl	8001c76 <Send_sprintf>
		my_pid.target = encoder;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <callback_func_3+0x5c>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <callback_func_3+0x6c>)
 80007d6:	751a      	strb	r2, [r3, #20]
		Send_sprintf(PC_USART,"start!\n");
 80007d8:	4908      	ldr	r1, [pc, #32]	@ (80007fc <callback_func_3+0x70>)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <callback_func_3+0x64>)
 80007dc:	f001 fa4b 	bl	8001c76 <Send_sprintf>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000ac 	.word	0x200000ac
 80007e8:	200000b4 	.word	0x200000b4
 80007ec:	08008c78 	.word	0x08008c78
 80007f0:	20000b88 	.word	0x20000b88
 80007f4:	08008c88 	.word	0x08008c88
 80007f8:	20000124 	.word	0x20000124
 80007fc:	08008c94 	.word	0x08008c94

08000800 <callback_func_4>:

void callback_func_4(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	//开始运行，这里可以运用时间切片
	if(global_state == RUNNING)
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <callback_func_4+0x18>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b04      	cmp	r3, #4
 800080c:	d101      	bne.n	8000812 <callback_func_4+0x12>

		global_state = EVENT_IDLE;
		memset(rxCmd,0x00,FIFO_SIZE);
#else if (PC_MODE == 0)

		TOF_pid_proc();
 800080e:	f7ff ff65 	bl	80006dc <TOF_pid_proc>
#endif
	}

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000ac 	.word	0x200000ac

0800081c <state_machine_init>:

/*
 * @brief 初始化函数，放在主函数的循环之前初始化
 */
void state_machine_init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

		my_state_machine[0].my_func = callback_func_0;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <state_machine_init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <state_machine_init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
		my_state_machine[0].my_state = EVENT_IDLE;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <state_machine_init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	711a      	strb	r2, [r3, #4]

		my_state_machine[1].my_func = callback_func_1;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <state_machine_init+0x4c>)
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <state_machine_init+0x54>)
 8000830:	609a      	str	r2, [r3, #8]
		my_state_machine[1].my_state = OFFSET_CALIBRATION;
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <state_machine_init+0x4c>)
 8000834:	2201      	movs	r2, #1
 8000836:	731a      	strb	r2, [r3, #12]

		my_state_machine[2].my_func = callback_func_2;
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <state_machine_init+0x4c>)
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <state_machine_init+0x58>)
 800083c:	611a      	str	r2, [r3, #16]
		my_state_machine[2].my_state = CRSTLK_CALIBRATION;
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <state_machine_init+0x4c>)
 8000840:	2202      	movs	r2, #2
 8000842:	751a      	strb	r2, [r3, #20]

		my_state_machine[3].my_func = callback_func_3;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <state_machine_init+0x4c>)
 8000846:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <state_machine_init+0x5c>)
 8000848:	619a      	str	r2, [r3, #24]
		my_state_machine[3].my_state = MOTOR_RESET_POS;
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <state_machine_init+0x4c>)
 800084c:	2203      	movs	r2, #3
 800084e:	771a      	strb	r2, [r3, #28]

		my_state_machine[4].my_func = callback_func_4;
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <state_machine_init+0x4c>)
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <state_machine_init+0x60>)
 8000854:	621a      	str	r2, [r3, #32]
		my_state_machine[4].my_state = RUNNING;
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <state_machine_init+0x4c>)
 8000858:	2204      	movs	r2, #4
 800085a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24


}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000084 	.word	0x20000084
 800086c:	08000741 	.word	0x08000741
 8000870:	0800074d 	.word	0x0800074d
 8000874:	0800076d 	.word	0x0800076d
 8000878:	0800078d 	.word	0x0800078d
 800087c:	08000801 	.word	0x08000801

08000880 <Encoder_Init>:

/*
 * @brief 编码器的初始化函数，一定要放在最前面！！！
 */
void Encoder_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	 HAL_TIM_Encoder_Start(ENCODER_HANDLER, TIM_CHANNEL_ALL);
 8000884:	213c      	movs	r1, #60	@ 0x3c
 8000886:	4802      	ldr	r0, [pc, #8]	@ (8000890 <Encoder_Init+0x10>)
 8000888:	f005 fa1e 	bl	8005cc8 <HAL_TIM_Encoder_Start>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000b40 	.word	0x20000b40

08000894 <Read_RawEncoder>:
/*
 * @brief 返回编码器计数器得到的值
 */
static uint16_t Read_RawEncoder(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(ENCODER_HANDLER);
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <Read_RawEncoder+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800089e:	b29b      	uxth	r3, r3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000b40 	.word	0x20000b40

080008ac <Read_ProcessedEncoder>:
/*
 * @brief 返回经过处理后的值
 *        限制范围从0到160
 */
uint16_t Read_ProcessedEncoder(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	uint16_t raw = Read_RawEncoder();
 80008b2:	f7ff ffef 	bl	8000894 <Read_RawEncoder>
 80008b6:	4603      	mov	r3, r0
 80008b8:	80bb      	strh	r3, [r7, #4]
	uint16_t processed = raw / 2;
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	80fb      	strh	r3, [r7, #6]
	if(processed > 6000){processed = 0;__HAL_TIM_SET_COUNTER(ENCODER_HANDLER,processed);}
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	f241 7270 	movw	r2, #6000	@ 0x1770
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d906      	bls.n	80008d8 <Read_ProcessedEncoder+0x2c>
 80008ca:	2300      	movs	r3, #0
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <Read_ProcessedEncoder+0x48>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80008d6:	e008      	b.n	80008ea <Read_ProcessedEncoder+0x3e>
	else if(processed >160){processed = 160;__HAL_TIM_SET_COUNTER(ENCODER_HANDLER,processed);}
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	2ba0      	cmp	r3, #160	@ 0xa0
 80008dc:	d905      	bls.n	80008ea <Read_ProcessedEncoder+0x3e>
 80008de:	23a0      	movs	r3, #160	@ 0xa0
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <Read_ProcessedEncoder+0x48>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
	return processed;
 80008ea:	88fb      	ldrh	r3, [r7, #6]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000b40 	.word	0x20000b40

080008f8 <read_key1>:
#define FROZEN 2                  //按键被冻结，防止误触



bool read_key1(void)  // 读按键1管脚电平
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
	bool is_press = true;
 80008fe:	2301      	movs	r3, #1
 8000900:	71fb      	strb	r3, [r7, #7]
	is_press = (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin)? true : false);  // 此处添加自己的读管脚函数
 8000902:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000906:	4807      	ldr	r0, [pc, #28]	@ (8000924 <read_key1+0x2c>)
 8000908:	f003 f9c6 	bl	8003c98 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	71fb      	strb	r3, [r7, #7]
	return is_press;
 8000918:	79fb      	ldrb	r3, [r7, #7]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800

08000928 <read_key2>:

bool read_key2(void)  // 读按键1管脚电平
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(POSITION_GPIO_Port, POSITION_Pin)? true : false;  // 此处添加自己的读管脚函数
 800092c:	2110      	movs	r1, #16
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <read_key2+0x1c>)
 8000930:	f003 f9b2 	bl	8003c98 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
}
 8000940:	4618      	mov	r0, r3
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010800 	.word	0x40010800

08000948 <key0_single_click_callback>:

 my_key_param_t key_param[KEY_NUMBER] = {0};  // 按键参数结构体数组

void key0_single_click_callback(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	//回调函数，一些步骤
	static uint8_t i = 0;    //标志位
	switch(i)
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <key0_single_click_callback+0x50>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <key0_single_click_callback+0x12>
 8000954:	2b01      	cmp	r3, #1
 8000956:	d004      	beq.n	8000962 <key0_single_click_callback+0x1a>
		  global_state = CRSTLK_CALIBRATION;
	  break;


	  default:
	  break;
 8000958:	e007      	b.n	800096a <key0_single_click_callback+0x22>
		  global_state = OFFSET_CALIBRATION;
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <key0_single_click_callback+0x54>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
	  break;
 8000960:	e003      	b.n	800096a <key0_single_click_callback+0x22>
		  global_state = CRSTLK_CALIBRATION;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <key0_single_click_callback+0x54>)
 8000964:	2202      	movs	r2, #2
 8000966:	701a      	strb	r2, [r3, #0]
	  break;
 8000968:	bf00      	nop

	}
	if(i >= 1)i = 2;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <key0_single_click_callback+0x50>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <key0_single_click_callback+0x32>
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <key0_single_click_callback+0x50>)
 8000974:	2202      	movs	r2, #2
 8000976:	701a      	strb	r2, [r3, #0]
	else i = (i+1)%2;



}
 8000978:	e00a      	b.n	8000990 <key0_single_click_callback+0x48>
	else i = (i+1)%2;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <key0_single_click_callback+0x50>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	bfb8      	it	lt
 8000988:	425b      	neglt	r3, r3
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b02      	ldr	r3, [pc, #8]	@ (8000998 <key0_single_click_callback+0x50>)
 800098e:	701a      	strb	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000118 	.word	0x20000118
 800099c:	200000ac 	.word	0x200000ac

080009a0 <key0_double_click_callback>:

void key0_double_click_callback(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  //回调函数，一些步骤

}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <key0_long_press_callback>:

void key0_long_press_callback(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	//长按电机复位
	static uint8_t i = 0;
	switch(i)
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <key0_long_press_callback+0x40>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <key0_long_press_callback+0x12>
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d004      	beq.n	80009c6 <key0_long_press_callback+0x1a>
		  global_state = RUNNING;
	  break;


	  default:
	  break;
 80009bc:	e007      	b.n	80009ce <key0_long_press_callback+0x22>
			global_state = MOTOR_RESET_POS;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <key0_long_press_callback+0x44>)
 80009c0:	2203      	movs	r2, #3
 80009c2:	701a      	strb	r2, [r3, #0]
	  break;
 80009c4:	e003      	b.n	80009ce <key0_long_press_callback+0x22>
		  global_state = RUNNING;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <key0_long_press_callback+0x44>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	701a      	strb	r2, [r3, #0]
	  break;
 80009cc:	bf00      	nop

	}

	i = (i+1)%2;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <key0_long_press_callback+0x40>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	bfb8      	it	lt
 80009dc:	425b      	neglt	r3, r3
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <key0_long_press_callback+0x40>)
 80009e2:	701a      	strb	r2, [r3, #0]


}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000119 	.word	0x20000119
 80009f0:	200000ac 	.word	0x200000ac

080009f4 <key1_single_click_callback>:
{
	return 0;
}

void key1_single_click_callback(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    //在这里读取目标值，单击代表可以进入运行状态
	global_state = RUNNING;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <key1_single_click_callback+0x1c>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	701a      	strb	r2, [r3, #0]
	my_pid.target = Read_ProcessedEncoder();   //将编码器选取到的目标值存储在my_pid.target变量中
 80009fe:	f7ff ff55 	bl	80008ac <Read_ProcessedEncoder>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <key1_single_click_callback+0x20>)
 8000a08:	751a      	strb	r2, [r3, #20]
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	20000124 	.word	0x20000124

08000a18 <key1_double_click_callback>:

void key1_double_click_callback(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <key1_long_press_callback>:

void key1_long_press_callback(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <key1_long_release_callback>:

void key1_long_release_callback(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	printf("key1_long_release_callback\r\n");
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <key1_long_release_callback+0x10>)
 8000a36:	f007 f8cb 	bl	8007bd0 <puts>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08008c9c 	.word	0x08008c9c

08000a44 <my_key_init>:
{
	printf("key1_long_long_release_callback\r\n");
}

void my_key_init(void)  // 按键初始化
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	key_param[0].read_key = read_key1;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <my_key_init+0x78>)
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <my_key_init+0x7c>)
 8000a4c:	601a      	str	r2, [r3, #0]
	key_param[0].key_is_press = 0;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <my_key_init+0x78>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	711a      	strb	r2, [r3, #4]
	key_param[0].count = 0;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <my_key_init+0x78>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
	key_param[0].state = KEY_STATE_IDLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <my_key_init+0x78>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	731a      	strb	r2, [r3, #12]
	key_param[0].event = KEY_EVENT_IDLE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <my_key_init+0x78>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	735a      	strb	r2, [r3, #13]
	key_param[0].single_click_callback = key0_single_click_callback;
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <my_key_init+0x78>)
 8000a68:	4a16      	ldr	r2, [pc, #88]	@ (8000ac4 <my_key_init+0x80>)
 8000a6a:	611a      	str	r2, [r3, #16]
	key_param[0].double_click_callback = key0_double_click_callback;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <my_key_init+0x78>)
 8000a6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <my_key_init+0x84>)
 8000a70:	615a      	str	r2, [r3, #20]
	key_param[0].long_press_callback = key0_long_press_callback;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <my_key_init+0x78>)
 8000a74:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <my_key_init+0x88>)
 8000a76:	619a      	str	r2, [r3, #24]
//	key_param[0].short_long_press_callback = key0_short_long_press_callback;
//	key_param[0].short_long_release_callback = key0_short_long_release_callback;
//	key_param[0].long_long_press_callback = key0_long_long_press_callback;
//	key_param[0].long_long_release_callback = key0_long_long_release_callback;      //注释掉不需要的，减少资源占用

	key_param[1].read_key = read_key2;
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <my_key_init+0x78>)
 8000a7a:	4a15      	ldr	r2, [pc, #84]	@ (8000ad0 <my_key_init+0x8c>)
 8000a7c:	631a      	str	r2, [r3, #48]	@ 0x30
	key_param[1].key_is_press = 0;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <my_key_init+0x78>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	key_param[1].count = 0;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <my_key_init+0x78>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	639a      	str	r2, [r3, #56]	@ 0x38
	key_param[1].state = KEY_STATE_IDLE;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <my_key_init+0x78>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	key_param[1].event = KEY_EVENT_IDLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <my_key_init+0x78>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	key_param[1].single_click_callback = key1_single_click_callback;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <my_key_init+0x78>)
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <my_key_init+0x90>)
 8000aa0:	641a      	str	r2, [r3, #64]	@ 0x40
	key_param[1].double_click_callback = key1_double_click_callback;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <my_key_init+0x78>)
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <my_key_init+0x94>)
 8000aa6:	645a      	str	r2, [r3, #68]	@ 0x44
	key_param[1].long_press_callback = key1_long_press_callback;
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <my_key_init+0x78>)
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <my_key_init+0x98>)
 8000aac:	649a      	str	r2, [r3, #72]	@ 0x48
	key_param[1].long_release_callback = key1_long_release_callback;
 8000aae:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <my_key_init+0x78>)
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae0 <my_key_init+0x9c>)
 8000ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
//	key_param[1].short_long_press_callback = key1_short_long_press_callback;
//	key_param[1].short_long_release_callback = key1_short_long_release_callback;
//	key_param[1].long_long_press_callback = key1_long_long_press_callback;
//	key_param[1].long_long_release_callback = key1_long_long_release_callback;
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	200000b8 	.word	0x200000b8
 8000ac0:	080008f9 	.word	0x080008f9
 8000ac4:	08000949 	.word	0x08000949
 8000ac8:	080009a1 	.word	0x080009a1
 8000acc:	080009ad 	.word	0x080009ad
 8000ad0:	08000929 	.word	0x08000929
 8000ad4:	080009f5 	.word	0x080009f5
 8000ad8:	08000a19 	.word	0x08000a19
 8000adc:	08000a25 	.word	0x08000a25
 8000ae0:	08000a31 	.word	0x08000a31

08000ae4 <my_key_scan>:

/*
 * @brief 创建一个10ms的定时器，将这个函数放在定时器更新中断中使用，在中断中进行判断并改变事件标志
 */
void my_key_scan(void)  // 按键扫描
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < KEY_NUMBER; i++)  // 轮询按键
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	f000 bc61 	b.w	80013b4 <my_key_scan+0x8d0>
	{
		if (key_param[i].read_key == NULL) continue;
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	49bd      	ldr	r1, [pc, #756]	@ (8000dec <my_key_scan+0x308>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	440b      	add	r3, r1
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8452 	beq.w	80013ac <my_key_scan+0x8c8>

		key_param[i].key_is_press = !key_param[i].read_key();  // 获取按键状态
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	49b8      	ldr	r1, [pc, #736]	@ (8000dec <my_key_scan+0x308>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	440b      	add	r3, r1
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4798      	blx	r3
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f083 0301 	eor.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	b2d8      	uxtb	r0, r3
 8000b34:	49ad      	ldr	r1, [pc, #692]	@ (8000dec <my_key_scan+0x308>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	440b      	add	r3, r1
 8000b40:	3304      	adds	r3, #4
 8000b42:	4602      	mov	r2, r0
 8000b44:	701a      	strb	r2, [r3, #0]

		// 扫描按键状态
		switch (key_param[i].state)  // 进入状态机流程
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	49a8      	ldr	r1, [pc, #672]	@ (8000dec <my_key_scan+0x308>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	440b      	add	r3, r1
 8000b54:	330c      	adds	r3, #12
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b0c      	cmp	r3, #12
 8000b5a:	f200 8373 	bhi.w	8001244 <my_key_scan+0x760>
 8000b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <my_key_scan+0x80>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000b99 	.word	0x08000b99
 8000b68:	08000c17 	.word	0x08000c17
 8000b6c:	08000cbf 	.word	0x08000cbf
 8000b70:	08000d67 	.word	0x08000d67
 8000b74:	08000e9d 	.word	0x08000e9d
 8000b78:	08000f45 	.word	0x08000f45
 8000b7c:	08001245 	.word	0x08001245
 8000b80:	08001001 	.word	0x08001001
 8000b84:	080010bf 	.word	0x080010bf
 8000b88:	08001101 	.word	0x08001101
 8000b8c:	08001157 	.word	0x08001157
 8000b90:	08001195 	.word	0x08001195
 8000b94:	080011e9 	.word	0x080011e9
		{

			case KEY_STATE_IDLE:  // 按键空闲状态
				if (key_param[i].key_is_press)  // 若按键被按下
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	4994      	ldr	r1, [pc, #592]	@ (8000dec <my_key_scan+0x308>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d014      	beq.n	8000bd8 <my_key_scan+0xf4>
				{
					key_param[i].count = 0;  // 计数清零
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	498e      	ldr	r1, [pc, #568]	@ (8000dec <my_key_scan+0x308>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	440b      	add	r3, r1
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_FIRST_PRESS;  // 跳转到按键第一次按下状态
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	4989      	ldr	r1, [pc, #548]	@ (8000dec <my_key_scan+0x308>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	440b      	add	r3, r1
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
				{
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
					key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
				}
				break;
 8000bd6:	e335      	b.n	8001244 <my_key_scan+0x760>
					key_param[i].count = 0;  // 计数清零
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	4984      	ldr	r1, [pc, #528]	@ (8000dec <my_key_scan+0x308>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	440b      	add	r3, r1
 8000be6:	3308      	adds	r3, #8
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	497f      	ldr	r1, [pc, #508]	@ (8000dec <my_key_scan+0x308>)
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	440b      	add	r3, r1
 8000bfa:	330c      	adds	r3, #12
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
 8000c00:	79fa      	ldrb	r2, [r7, #7]
 8000c02:	497a      	ldr	r1, [pc, #488]	@ (8000dec <my_key_scan+0x308>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	440b      	add	r3, r1
 8000c0e:	330d      	adds	r3, #13
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
				break;
 8000c14:	e316      	b.n	8001244 <my_key_scan+0x760>

			case KEY_STATE_FIRST_PRESS:  // 按键第一次按下状态
				if (key_param[i].key_is_press)  // 若按键被按下
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	4974      	ldr	r1, [pc, #464]	@ (8000dec <my_key_scan+0x308>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	440b      	add	r3, r1
 8000c24:	3304      	adds	r3, #4
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d029      	beq.n	8000c80 <my_key_scan+0x19c>
				{
					if (++key_param[i].count >= KEY_SHORT_PRESS_COUNT_NUMBER)  // 若第一次按下的时间计数超过KEY_SHORT_PRESS_COUNT_NUMBER
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	496f      	ldr	r1, [pc, #444]	@ (8000dec <my_key_scan+0x308>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	440b      	add	r3, r1
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1c59      	adds	r1, r3, #1
 8000c40:	486a      	ldr	r0, [pc, #424]	@ (8000dec <my_key_scan+0x308>)
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4403      	add	r3, r0
 8000c4c:	3308      	adds	r3, #8
 8000c4e:	6019      	str	r1, [r3, #0]
 8000c50:	2904      	cmp	r1, #4
 8000c52:	f240 82e8 	bls.w	8001226 <my_key_scan+0x742>
					{
						key_param[i].count = 0;  // 计数清零
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4964      	ldr	r1, [pc, #400]	@ (8000dec <my_key_scan+0x308>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
						key_param[i].state = KEY_STATE_FIRST_PRESS_VALID;  // 跳转到按键第一次按下有效状态
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	495f      	ldr	r1, [pc, #380]	@ (8000dec <my_key_scan+0x308>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	440b      	add	r3, r1
 8000c78:	330c      	adds	r3, #12
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	701a      	strb	r2, [r3, #0]
					// 按下时间不够，不处理，按键消抖
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
					key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
				}
				break;
 8000c7e:	e2d2      	b.n	8001226 <my_key_scan+0x742>
					key_param[i].count = 0;  // 计数清零
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	495a      	ldr	r1, [pc, #360]	@ (8000dec <my_key_scan+0x308>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3308      	adds	r3, #8
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	4955      	ldr	r1, [pc, #340]	@ (8000dec <my_key_scan+0x308>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	440b      	add	r3, r1
 8000ca2:	330c      	adds	r3, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4950      	ldr	r1, [pc, #320]	@ (8000dec <my_key_scan+0x308>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	440b      	add	r3, r1
 8000cb6:	330d      	adds	r3, #13
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
				break;
 8000cbc:	e2b3      	b.n	8001226 <my_key_scan+0x742>

			case KEY_STATE_FIRST_PRESS_VALID:	// 按键第一次按下有效状态
				if (key_param[i].key_is_press)  // 若按键被按下
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	494a      	ldr	r1, [pc, #296]	@ (8000dec <my_key_scan+0x308>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	440b      	add	r3, r1
 8000ccc:	3304      	adds	r3, #4
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d033      	beq.n	8000d3c <my_key_scan+0x258>
				{
					if (++key_param[i].count >= KEY_LONG_PRESS_COUNT_NUMBER - KEY_SHORT_PRESS_COUNT_NUMBER)  // 若第一次按下的时间计数超过KEY_LONG_PRESS_COUNT_NUMBER
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	4945      	ldr	r1, [pc, #276]	@ (8000dec <my_key_scan+0x308>)
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1c59      	adds	r1, r3, #1
 8000ce8:	4840      	ldr	r0, [pc, #256]	@ (8000dec <my_key_scan+0x308>)
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4403      	add	r3, r0
 8000cf4:	3308      	adds	r3, #8
 8000cf6:	6019      	str	r1, [r3, #0]
 8000cf8:	295e      	cmp	r1, #94	@ 0x5e
 8000cfa:	f240 8296 	bls.w	800122a <my_key_scan+0x746>
					{
						key_param[i].count = 0;  // 计数清零
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	493a      	ldr	r1, [pc, #232]	@ (8000dec <my_key_scan+0x308>)
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	440b      	add	r3, r1
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
						key_param[i].state = KEY_STATE_LONG_PRESS;  // 跳转到按键长按状态
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	4935      	ldr	r1, [pc, #212]	@ (8000dec <my_key_scan+0x308>)
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	440b      	add	r3, r1
 8000d20:	330c      	adds	r3, #12
 8000d22:	2207      	movs	r2, #7
 8000d24:	701a      	strb	r2, [r3, #0]
						key_param[i].event = KEY_EVENT_LONG_PRESS;  // 按键长按事件
 8000d26:	79fa      	ldrb	r2, [r7, #7]
 8000d28:	4930      	ldr	r1, [pc, #192]	@ (8000dec <my_key_scan+0x308>)
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	440b      	add	r3, r1
 8000d34:	330d      	adds	r3, #13
 8000d36:	2203      	movs	r2, #3
 8000d38:	701a      	strb	r2, [r3, #0]
				else
				{
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_FIRST_RELEASE;  // 跳转到按键第一次释放状态
				}
				break;
 8000d3a:	e276      	b.n	800122a <my_key_scan+0x746>
					key_param[i].count = 0;  // 计数清零
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	492b      	ldr	r1, [pc, #172]	@ (8000dec <my_key_scan+0x308>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	440b      	add	r3, r1
 8000d4a:	3308      	adds	r3, #8
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_FIRST_RELEASE;  // 跳转到按键第一次释放状态
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	4926      	ldr	r1, [pc, #152]	@ (8000dec <my_key_scan+0x308>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	440b      	add	r3, r1
 8000d5e:	330c      	adds	r3, #12
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]
				break;
 8000d64:	e261      	b.n	800122a <my_key_scan+0x746>

			case KEY_STATE_FIRST_RELEASE:  // 按键第一次释放状态
				if (!key_param[i].key_is_press)  // 若按键释放
 8000d66:	79fa      	ldrb	r2, [r7, #7]
 8000d68:	4920      	ldr	r1, [pc, #128]	@ (8000dec <my_key_scan+0x308>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d036      	beq.n	8000df0 <my_key_scan+0x30c>
				{
					if (++key_param[i].count >= KEY_DOUBLE_CLICK_INTERVAL_COUNT_NUMBER)  // 若超过KEY_DOUBLE_CLICK_INTERVAL_COUNT_NUMBER计数时间，按键没有第二次被按下
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	4919      	ldr	r1, [pc, #100]	@ (8000dec <my_key_scan+0x308>)
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	440b      	add	r3, r1
 8000d90:	3308      	adds	r3, #8
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1c59      	adds	r1, r3, #1
 8000d96:	4815      	ldr	r0, [pc, #84]	@ (8000dec <my_key_scan+0x308>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	4403      	add	r3, r0
 8000da2:	3308      	adds	r3, #8
 8000da4:	6019      	str	r1, [r3, #0]
 8000da6:	290e      	cmp	r1, #14
 8000da8:	f240 8241 	bls.w	800122e <my_key_scan+0x74a>
					{
						key_param[i].count = 0;  // 计数清零
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	490f      	ldr	r1, [pc, #60]	@ (8000dec <my_key_scan+0x308>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	440b      	add	r3, r1
 8000dba:	3308      	adds	r3, #8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
						key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	490a      	ldr	r1, [pc, #40]	@ (8000dec <my_key_scan+0x308>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	440b      	add	r3, r1
 8000dce:	330c      	adds	r3, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
						key_param[i].event = KEY_EVENT_SINGLE_CLICK;  // 按键单击事件
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	4905      	ldr	r1, [pc, #20]	@ (8000dec <my_key_scan+0x308>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	440b      	add	r3, r1
 8000de2:	330d      	adds	r3, #13
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
				{
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
					key_param[i].event = KEY_EVENT_SINGLE_CLICK;  // 按键单击事件
				}
				break;
 8000de8:	e221      	b.n	800122e <my_key_scan+0x74a>
 8000dea:	bf00      	nop
 8000dec:	200000b8 	.word	0x200000b8
				else if (key_param[i].count >= KEY_SHORT_PRESS_COUNT_NUMBER && key_param[i].count < KEY_DOUBLE_CLICK_INTERVAL_COUNT_NUMBER)  // 若在间隔时间内，获取了第二次按键按下
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	49c2      	ldr	r1, [pc, #776]	@ (80010fc <my_key_scan+0x618>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	440b      	add	r3, r1
 8000dfe:	3308      	adds	r3, #8
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d91f      	bls.n	8000e46 <my_key_scan+0x362>
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	49bc      	ldr	r1, [pc, #752]	@ (80010fc <my_key_scan+0x618>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	440b      	add	r3, r1
 8000e14:	3308      	adds	r3, #8
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b0e      	cmp	r3, #14
 8000e1a:	d814      	bhi.n	8000e46 <my_key_scan+0x362>
					key_param[i].count = 0;  // 计数清零
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	49b7      	ldr	r1, [pc, #732]	@ (80010fc <my_key_scan+0x618>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_SECOND_PRESS;  // 跳转到按键第二次按下状态
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	49b2      	ldr	r1, [pc, #712]	@ (80010fc <my_key_scan+0x618>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	440b      	add	r3, r1
 8000e3e:	330c      	adds	r3, #12
 8000e40:	2204      	movs	r2, #4
 8000e42:	701a      	strb	r2, [r3, #0]
				break;
 8000e44:	e1f3      	b.n	800122e <my_key_scan+0x74a>
				else if (key_param[i].count < KEY_SHORT_PRESS_COUNT_NUMBER) // 若在KEY_SHORT_PRESS_COUNT_NUMBER计数时间内，获取了第二次按键按下，那么此次动作忽略，做消抖处理
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	49ac      	ldr	r1, [pc, #688]	@ (80010fc <my_key_scan+0x618>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	440b      	add	r3, r1
 8000e54:	3308      	adds	r3, #8
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	f200 81e8 	bhi.w	800122e <my_key_scan+0x74a>
					key_param[i].count = 0;  // 计数清零
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	49a6      	ldr	r1, [pc, #664]	@ (80010fc <my_key_scan+0x618>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	49a1      	ldr	r1, [pc, #644]	@ (80010fc <my_key_scan+0x618>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	440b      	add	r3, r1
 8000e80:	330c      	adds	r3, #12
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_SINGLE_CLICK;  // 按键单击事件
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	499c      	ldr	r1, [pc, #624]	@ (80010fc <my_key_scan+0x618>)
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	440b      	add	r3, r1
 8000e94:	330d      	adds	r3, #13
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
				break;
 8000e9a:	e1c8      	b.n	800122e <my_key_scan+0x74a>

			case KEY_STATE_SECOND_PRESS:  // 按键第二次按下状态
				if (key_param[i].key_is_press)  // 若按键被按下
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	4997      	ldr	r1, [pc, #604]	@ (80010fc <my_key_scan+0x618>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3304      	adds	r3, #4
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d029      	beq.n	8000f06 <my_key_scan+0x422>
				{
					if (++key_param[i].count >= KEY_SHORT_PRESS_COUNT_NUMBER)  // 若第一次按下的时间计数超过KEY_SHORT_PRESS_COUNT_NUMBER
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	4991      	ldr	r1, [pc, #580]	@ (80010fc <my_key_scan+0x618>)
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	1c59      	adds	r1, r3, #1
 8000ec6:	488d      	ldr	r0, [pc, #564]	@ (80010fc <my_key_scan+0x618>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	4403      	add	r3, r0
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	6019      	str	r1, [r3, #0]
 8000ed6:	2904      	cmp	r1, #4
 8000ed8:	f240 81ab 	bls.w	8001232 <my_key_scan+0x74e>
					{
						key_param[i].count = 0;  // 计数清零
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	4987      	ldr	r1, [pc, #540]	@ (80010fc <my_key_scan+0x618>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	440b      	add	r3, r1
 8000eea:	3308      	adds	r3, #8
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
						key_param[i].state = KEY_STATE_SECOND_PRESS_VALID;  // 跳转到按键第二次按下有效状态
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	4982      	ldr	r1, [pc, #520]	@ (80010fc <my_key_scan+0x618>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	440b      	add	r3, r1
 8000efe:	330c      	adds	r3, #12
 8000f00:	2205      	movs	r2, #5
 8000f02:	701a      	strb	r2, [r3, #0]
					// 按下时间不够，不处理，按键消抖
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
					key_param[i].event = KEY_EVENT_SINGLE_CLICK;  // 按键单击事件
				}
				break;
 8000f04:	e195      	b.n	8001232 <my_key_scan+0x74e>
					key_param[i].count = 0;  // 计数清零
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	497c      	ldr	r1, [pc, #496]	@ (80010fc <my_key_scan+0x618>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	440b      	add	r3, r1
 8000f14:	3308      	adds	r3, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	4977      	ldr	r1, [pc, #476]	@ (80010fc <my_key_scan+0x618>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	440b      	add	r3, r1
 8000f28:	330c      	adds	r3, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_SINGLE_CLICK;  // 按键单击事件
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4972      	ldr	r1, [pc, #456]	@ (80010fc <my_key_scan+0x618>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	440b      	add	r3, r1
 8000f3c:	330d      	adds	r3, #13
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
				break;
 8000f42:	e176      	b.n	8001232 <my_key_scan+0x74e>

			case KEY_STATE_SECOND_PRESS_VALID:  // 按键第二次按下有效状态
				if (key_param[i].key_is_press)  // 若按键被按下
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	496d      	ldr	r1, [pc, #436]	@ (80010fc <my_key_scan+0x618>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	3304      	adds	r3, #4
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d033      	beq.n	8000fc2 <my_key_scan+0x4de>
				{
					if (++key_param[i].count >= KEY_LONG_PRESS_COUNT_NUMBER - KEY_SHORT_PRESS_COUNT_NUMBER)  // 若第二次按下的时间计数超过KEY_LONG_PRESS_COUNT_NUMBER
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	4967      	ldr	r1, [pc, #412]	@ (80010fc <my_key_scan+0x618>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1c59      	adds	r1, r3, #1
 8000f6e:	4863      	ldr	r0, [pc, #396]	@ (80010fc <my_key_scan+0x618>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4403      	add	r3, r0
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	6019      	str	r1, [r3, #0]
 8000f7e:	295e      	cmp	r1, #94	@ 0x5e
 8000f80:	f240 8159 	bls.w	8001236 <my_key_scan+0x752>
					{
						key_param[i].count = 0;  // 计数清零
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	495d      	ldr	r1, [pc, #372]	@ (80010fc <my_key_scan+0x618>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	440b      	add	r3, r1
 8000f92:	3308      	adds	r3, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
						key_param[i].state = KEY_STATE_SHORT_LONG_PRESS;  // 跳转到按键短长按状态
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	4958      	ldr	r1, [pc, #352]	@ (80010fc <my_key_scan+0x618>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	440b      	add	r3, r1
 8000fa6:	330c      	adds	r3, #12
 8000fa8:	2209      	movs	r2, #9
 8000faa:	701a      	strb	r2, [r3, #0]
						key_param[i].event = KEY_EVENT_SHORT_LONG_PRESS;  // 按键短长按事件
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	4953      	ldr	r1, [pc, #332]	@ (80010fc <my_key_scan+0x618>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	440b      	add	r3, r1
 8000fba:	330d      	adds	r3, #13
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	701a      	strb	r2, [r3, #0]
				{
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
					key_param[i].event = KEY_EVENT_DOUBLE_CLICK;  // 按键双击事件
				}
				break;
 8000fc0:	e139      	b.n	8001236 <my_key_scan+0x752>
					key_param[i].count = 0;  // 计数清零
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	494d      	ldr	r1, [pc, #308]	@ (80010fc <my_key_scan+0x618>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	440b      	add	r3, r1
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	4948      	ldr	r1, [pc, #288]	@ (80010fc <my_key_scan+0x618>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	440b      	add	r3, r1
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_DOUBLE_CLICK;  // 按键双击事件
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4943      	ldr	r1, [pc, #268]	@ (80010fc <my_key_scan+0x618>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	440b      	add	r3, r1
 8000ff8:	330d      	adds	r3, #13
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	701a      	strb	r2, [r3, #0]
				break;
 8000ffe:	e11a      	b.n	8001236 <my_key_scan+0x752>
			case KEY_STATE_SECOND_RELEASE:  // 按键第二次释放状态
				// Do nothing!
				break;

			case KEY_STATE_LONG_PRESS:
				if (key_param[i].key_is_press)  // 若按键被按下
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	493e      	ldr	r1, [pc, #248]	@ (80010fc <my_key_scan+0x618>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	440b      	add	r3, r1
 800100e:	3304      	adds	r3, #4
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d034      	beq.n	8001080 <my_key_scan+0x59c>
				{
					if (++key_param[i].count >= KEY_LONG_LONG_PRESS_COUNT_NUMBER - KEY_LONG_PRESS_COUNT_NUMBER)  // 若长按下的时间计数超过KEY_LONG_LONG_PRESS_COUNT_NUMBER
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	4938      	ldr	r1, [pc, #224]	@ (80010fc <my_key_scan+0x618>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	440b      	add	r3, r1
 8001024:	3308      	adds	r3, #8
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1c59      	adds	r1, r3, #1
 800102a:	4834      	ldr	r0, [pc, #208]	@ (80010fc <my_key_scan+0x618>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4403      	add	r3, r0
 8001036:	3308      	adds	r3, #8
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	f5b1 7f2f 	cmp.w	r1, #700	@ 0x2bc
 800103e:	f0c0 80fc 	bcc.w	800123a <my_key_scan+0x756>
					{
						key_param[i].count = 0;  // 计数清零
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	492d      	ldr	r1, [pc, #180]	@ (80010fc <my_key_scan+0x618>)
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	440b      	add	r3, r1
 8001050:	3308      	adds	r3, #8
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
						key_param[i].state = KEY_STATE_LONG_LONG_PRESS;  // 跳转到按键超长按状态
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	4928      	ldr	r1, [pc, #160]	@ (80010fc <my_key_scan+0x618>)
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	440b      	add	r3, r1
 8001064:	330c      	adds	r3, #12
 8001066:	220b      	movs	r2, #11
 8001068:	701a      	strb	r2, [r3, #0]
						key_param[i].event = KEY_EVENT_LONG_LONG_PRESS;  // 按键超长按事件
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	4923      	ldr	r1, [pc, #140]	@ (80010fc <my_key_scan+0x618>)
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	440b      	add	r3, r1
 8001078:	330d      	adds	r3, #13
 800107a:	2207      	movs	r2, #7
 800107c:	701a      	strb	r2, [r3, #0]
				{
					key_param[i].count = 0;  // 计数清零
					key_param[i].state = KEY_STATE_LONG_RELEASE;  // 跳转到按键长按释放状态
					key_param[i].event = KEY_EVENT_LONG_RELEASE;  // 按键长按释放事件
				}
				break;
 800107e:	e0dc      	b.n	800123a <my_key_scan+0x756>
					key_param[i].count = 0;  // 计数清零
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	491e      	ldr	r1, [pc, #120]	@ (80010fc <my_key_scan+0x618>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_LONG_RELEASE;  // 跳转到按键长按释放状态
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	4919      	ldr	r1, [pc, #100]	@ (80010fc <my_key_scan+0x618>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	440b      	add	r3, r1
 80010a2:	330c      	adds	r3, #12
 80010a4:	2208      	movs	r2, #8
 80010a6:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_LONG_RELEASE;  // 按键长按释放事件
 80010a8:	79fa      	ldrb	r2, [r7, #7]
 80010aa:	4914      	ldr	r1, [pc, #80]	@ (80010fc <my_key_scan+0x618>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	440b      	add	r3, r1
 80010b6:	330d      	adds	r3, #13
 80010b8:	2204      	movs	r2, #4
 80010ba:	701a      	strb	r2, [r3, #0]
				break;
 80010bc:	e0bd      	b.n	800123a <my_key_scan+0x756>

			case KEY_STATE_LONG_RELEASE:
				key_param[i].count = 0;  // 计数清零
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	490e      	ldr	r1, [pc, #56]	@ (80010fc <my_key_scan+0x618>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	440b      	add	r3, r1
 80010cc:	3308      	adds	r3, #8
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
				key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	4909      	ldr	r1, [pc, #36]	@ (80010fc <my_key_scan+0x618>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	440b      	add	r3, r1
 80010e0:	330c      	adds	r3, #12
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
				key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4904      	ldr	r1, [pc, #16]	@ (80010fc <my_key_scan+0x618>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	330d      	adds	r3, #13
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
				break;
 80010fa:	e0a3      	b.n	8001244 <my_key_scan+0x760>
 80010fc:	200000b8 	.word	0x200000b8

			case KEY_STATE_SHORT_LONG_PRESS:
				if (key_param[i].key_is_press)  // 若按键被按下
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	49b1      	ldr	r1, [pc, #708]	@ (80013c8 <my_key_scan+0x8e4>)
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	440b      	add	r3, r1
 800110e:	3304      	adds	r3, #4
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 8093 	bne.w	800123e <my_key_scan+0x75a>
					// 短长按后，不再做处理，等待按键释放
					// Do nothing!
				}
				else
				{
					key_param[i].count = 0;  // 计数清零
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	49ab      	ldr	r1, [pc, #684]	@ (80013c8 <my_key_scan+0x8e4>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	3308      	adds	r3, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_SHORT_LONG_RELEASE;  // 跳转到按键短长按释放状态
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	49a6      	ldr	r1, [pc, #664]	@ (80013c8 <my_key_scan+0x8e4>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	220a      	movs	r2, #10
 800113e:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_SHORT_LONG_RELEASE;  // 按键短长按释放事件
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	49a1      	ldr	r1, [pc, #644]	@ (80013c8 <my_key_scan+0x8e4>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	2206      	movs	r2, #6
 8001152:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001154:	e073      	b.n	800123e <my_key_scan+0x75a>

			case KEY_STATE_SHORT_LONG_RELEASE:
				key_param[i].count = 0;  // 计数清零
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	499b      	ldr	r1, [pc, #620]	@ (80013c8 <my_key_scan+0x8e4>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
				key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	4996      	ldr	r1, [pc, #600]	@ (80013c8 <my_key_scan+0x8e4>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	440b      	add	r3, r1
 8001178:	330c      	adds	r3, #12
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
				key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	4991      	ldr	r1, [pc, #580]	@ (80013c8 <my_key_scan+0x8e4>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	440b      	add	r3, r1
 800118c:	330d      	adds	r3, #13
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
				break;
 8001192:	e057      	b.n	8001244 <my_key_scan+0x760>

			case KEY_STATE_LONG_LONG_PRESS:
				if (key_param[i].key_is_press)  // 若按键被按下
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	498c      	ldr	r1, [pc, #560]	@ (80013c8 <my_key_scan+0x8e4>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	440b      	add	r3, r1
 80011a2:	3304      	adds	r3, #4
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d14b      	bne.n	8001242 <my_key_scan+0x75e>
					// 超长按后，不再做处理，等待按键释放
					// Do nothing!
				}
				else
				{
					key_param[i].count = 0;  // 计数清零
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	4986      	ldr	r1, [pc, #536]	@ (80013c8 <my_key_scan+0x8e4>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	440b      	add	r3, r1
 80011b8:	3308      	adds	r3, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
					key_param[i].state = KEY_STATE_LONG_LONG_RELEASE;  // 跳转到按键超长按释放状态
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	4981      	ldr	r1, [pc, #516]	@ (80013c8 <my_key_scan+0x8e4>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	440b      	add	r3, r1
 80011cc:	330c      	adds	r3, #12
 80011ce:	220c      	movs	r2, #12
 80011d0:	701a      	strb	r2, [r3, #0]
					key_param[i].event = KEY_EVENT_LONG_LONG_RELEASE;  // 按键超长按释放事件
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	497c      	ldr	r1, [pc, #496]	@ (80013c8 <my_key_scan+0x8e4>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	330d      	adds	r3, #13
 80011e2:	2208      	movs	r2, #8
 80011e4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80011e6:	e02c      	b.n	8001242 <my_key_scan+0x75e>

			case KEY_STATE_LONG_LONG_RELEASE:
				key_param[i].count = 0;  // 计数清零
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	4977      	ldr	r1, [pc, #476]	@ (80013c8 <my_key_scan+0x8e4>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	3308      	adds	r3, #8
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
				key_param[i].state = KEY_STATE_IDLE;  // 跳转到按键空闲状态
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4972      	ldr	r1, [pc, #456]	@ (80013c8 <my_key_scan+0x8e4>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	440b      	add	r3, r1
 800120a:	330c      	adds	r3, #12
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
				key_param[i].event = KEY_EVENT_IDLE;  // 按键空闲事件
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	496d      	ldr	r1, [pc, #436]	@ (80013c8 <my_key_scan+0x8e4>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	330d      	adds	r3, #13
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
				break;
 8001224:	e00e      	b.n	8001244 <my_key_scan+0x760>
				break;
 8001226:	bf00      	nop
 8001228:	e00c      	b.n	8001244 <my_key_scan+0x760>
				break;
 800122a:	bf00      	nop
 800122c:	e00a      	b.n	8001244 <my_key_scan+0x760>
				break;
 800122e:	bf00      	nop
 8001230:	e008      	b.n	8001244 <my_key_scan+0x760>
				break;
 8001232:	bf00      	nop
 8001234:	e006      	b.n	8001244 <my_key_scan+0x760>
				break;
 8001236:	bf00      	nop
 8001238:	e004      	b.n	8001244 <my_key_scan+0x760>
				break;
 800123a:	bf00      	nop
 800123c:	e002      	b.n	8001244 <my_key_scan+0x760>
				break;
 800123e:	bf00      	nop
 8001240:	e000      	b.n	8001244 <my_key_scan+0x760>
				break;
 8001242:	bf00      	nop
		}

		// 扫描按键事件
		switch (key_param[i].event)  // 进入状态机流程
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	4960      	ldr	r1, [pc, #384]	@ (80013c8 <my_key_scan+0x8e4>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	330d      	adds	r3, #13
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b08      	cmp	r3, #8
 8001258:	f200 809d 	bhi.w	8001396 <my_key_scan+0x8b2>
 800125c:	a201      	add	r2, pc, #4	@ (adr r2, 8001264 <my_key_scan+0x780>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001397 	.word	0x08001397
 8001268:	08001289 	.word	0x08001289
 800126c:	080012b5 	.word	0x080012b5
 8001270:	080012e1 	.word	0x080012e1
 8001274:	0800130d 	.word	0x0800130d
 8001278:	08001339 	.word	0x08001339
 800127c:	08001349 	.word	0x08001349
 8001280:	08001359 	.word	0x08001359
 8001284:	08001369 	.word	0x08001369
			case KEY_EVENT_IDLE:
				// Do nothing!
				break;

			case KEY_EVENT_SINGLE_CLICK:
				if (key_param[i].single_click_callback != NULL) key_param[i].single_click_callback();
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	494f      	ldr	r1, [pc, #316]	@ (80013c8 <my_key_scan+0x8e4>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	440b      	add	r3, r1
 8001296:	3310      	adds	r3, #16
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d06c      	beq.n	8001378 <my_key_scan+0x894>
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	4949      	ldr	r1, [pc, #292]	@ (80013c8 <my_key_scan+0x8e4>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	440b      	add	r3, r1
 80012ac:	3310      	adds	r3, #16
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4798      	blx	r3
				break;
 80012b2:	e061      	b.n	8001378 <my_key_scan+0x894>

			case KEY_EVENT_DOUBLE_CLICK:
				if (key_param[i].double_click_callback != NULL) key_param[i].double_click_callback();
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	4944      	ldr	r1, [pc, #272]	@ (80013c8 <my_key_scan+0x8e4>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	3314      	adds	r3, #20
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d058      	beq.n	800137c <my_key_scan+0x898>
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	493e      	ldr	r1, [pc, #248]	@ (80013c8 <my_key_scan+0x8e4>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	440b      	add	r3, r1
 80012d8:	3314      	adds	r3, #20
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4798      	blx	r3
				break;
 80012de:	e04d      	b.n	800137c <my_key_scan+0x898>

			case KEY_EVENT_LONG_PRESS:
				if (key_param[i].long_press_callback != NULL) key_param[i].long_press_callback();
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	4939      	ldr	r1, [pc, #228]	@ (80013c8 <my_key_scan+0x8e4>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	440b      	add	r3, r1
 80012ee:	3318      	adds	r3, #24
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d044      	beq.n	8001380 <my_key_scan+0x89c>
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	4933      	ldr	r1, [pc, #204]	@ (80013c8 <my_key_scan+0x8e4>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	440b      	add	r3, r1
 8001304:	3318      	adds	r3, #24
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4798      	blx	r3
				break;
 800130a:	e039      	b.n	8001380 <my_key_scan+0x89c>

			case KEY_EVENT_LONG_RELEASE:
				if (key_param[i].long_release_callback != NULL) key_param[i].long_release_callback();
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	492e      	ldr	r1, [pc, #184]	@ (80013c8 <my_key_scan+0x8e4>)
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	440b      	add	r3, r1
 800131a:	331c      	adds	r3, #28
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d030      	beq.n	8001384 <my_key_scan+0x8a0>
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	4928      	ldr	r1, [pc, #160]	@ (80013c8 <my_key_scan+0x8e4>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	440b      	add	r3, r1
 8001330:	331c      	adds	r3, #28
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4798      	blx	r3
				break;
 8001336:	e025      	b.n	8001384 <my_key_scan+0x8a0>

			case KEY_EVENT_SHORT_LONG_PRESS:
				if (key_param[0].short_long_press_callback != NULL) key_param[0].short_long_press_callback();
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <my_key_scan+0x8e4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <my_key_scan+0x8a4>
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <my_key_scan+0x8e4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4798      	blx	r3
				break;
 8001346:	e01f      	b.n	8001388 <my_key_scan+0x8a4>

			case KEY_EVENT_SHORT_LONG_RELEASE:
				if (key_param[0].short_long_release_callback != NULL) key_param[0].short_long_release_callback();
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <my_key_scan+0x8e4>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01d      	beq.n	800138c <my_key_scan+0x8a8>
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <my_key_scan+0x8e4>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	4798      	blx	r3
				break;
 8001356:	e019      	b.n	800138c <my_key_scan+0x8a8>

			case KEY_EVENT_LONG_LONG_PRESS:
				if (key_param[0].long_long_press_callback != NULL) key_param[0].long_long_press_callback();
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <my_key_scan+0x8e4>)
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	2b00      	cmp	r3, #0
 800135e:	d017      	beq.n	8001390 <my_key_scan+0x8ac>
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <my_key_scan+0x8e4>)
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	4798      	blx	r3
				break;
 8001366:	e013      	b.n	8001390 <my_key_scan+0x8ac>

			case KEY_EVENT_LONG_LONG_RELEASE:
				if (key_param[0].long_long_release_callback != NULL) key_param[0].long_long_release_callback();
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <my_key_scan+0x8e4>)
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d011      	beq.n	8001394 <my_key_scan+0x8b0>
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <my_key_scan+0x8e4>)
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	4798      	blx	r3
				break;
 8001376:	e00d      	b.n	8001394 <my_key_scan+0x8b0>
				break;
 8001378:	bf00      	nop
 800137a:	e00c      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 800137c:	bf00      	nop
 800137e:	e00a      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 8001380:	bf00      	nop
 8001382:	e008      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 8001384:	bf00      	nop
 8001386:	e006      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 8001388:	bf00      	nop
 800138a:	e004      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 800138c:	bf00      	nop
 800138e:	e002      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 8001390:	bf00      	nop
 8001392:	e000      	b.n	8001396 <my_key_scan+0x8b2>
				break;
 8001394:	bf00      	nop
		}

		key_param[i].event = KEY_EVENT_IDLE;  // 清除按键事件
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	490b      	ldr	r1, [pc, #44]	@ (80013c8 <my_key_scan+0x8e4>)
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	330d      	adds	r3, #13
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e000      	b.n	80013ae <my_key_scan+0x8ca>
		if (key_param[i].read_key == NULL) continue;
 80013ac:	bf00      	nop
	for (uint8_t i = 0; i < KEY_NUMBER; i++)  // 轮询按键
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3301      	adds	r3, #1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	f67f ab9b 	bls.w	8000af2 <my_key_scan+0xe>
	}
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000b8 	.word	0x200000b8

080013cc <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	//在定时器中轮询按�??
	if(htim == (&htim2))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_TIM_PeriodElapsedCallback+0x14>
	{

		  my_key_scan();
 80013dc:	f7ff fb82 	bl	8000ae4 <my_key_scan>
	}

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000af8 	.word	0x20000af8

080013ec <VL6180X_WR_CMD>:

/*
 * @brief 测距模块写命令
 */
void VL6180X_WR_CMD(uint16_t cmd, uint8_t data)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	80fb      	strh	r3, [r7, #6]
 80013f8:	4613      	mov	r3, r2
 80013fa:	717b      	strb	r3, [r7, #5]
    uint8_t data_write[3];
    data_write[0]=(cmd>>8)&0xff;
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
    data_write[1]=cmd&0xff;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	737b      	strb	r3, [r7, #13]
    data_write[2]=data&0xff;
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, addr_write, data_write, 3, 0x100);
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2303      	movs	r3, #3
 800141c:	2152      	movs	r1, #82	@ 0x52
 800141e:	4803      	ldr	r0, [pc, #12]	@ (800142c <VL6180X_WR_CMD+0x40>)
 8001420:	f002 fdc6 	bl	8003fb0 <HAL_I2C_Master_Transmit>
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000984 	.word	0x20000984

08001430 <VL6180X_WR_CMD2>:

void VL6180X_WR_CMD2(uint16_t cmd, uint16_t data)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	80fb      	strh	r3, [r7, #6]
 800143c:	4613      	mov	r3, r2
 800143e:	80bb      	strh	r3, [r7, #4]
    uint8_t data_write[4];
    data_write[0]=(cmd>>8)&0xff;
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	733b      	strb	r3, [r7, #12]
    data_write[1]=cmd&0xff;
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	737b      	strb	r3, [r7, #13]
     data_write[2]=(data>>8)&0xff;
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	73bb      	strb	r3, [r7, #14]
    data_write[3]=data&0xff;
 800145a:	88bb      	ldrh	r3, [r7, #4]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, addr_write, data_write, 4, 0x100);
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2304      	movs	r3, #4
 800146c:	2152      	movs	r1, #82	@ 0x52
 800146e:	4803      	ldr	r0, [pc, #12]	@ (800147c <VL6180X_WR_CMD2+0x4c>)
 8001470:	f002 fd9e 	bl	8003fb0 <HAL_I2C_Master_Transmit>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000984 	.word	0x20000984

08001480 <VL6180X_ReadByte>:

uint8_t VL6180X_ReadByte(uint16_t reg)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
    uint8_t data_write[2];
    uint8_t receive_data=0;
 800148a:	2300      	movs	r3, #0
 800148c:	72fb      	strb	r3, [r7, #11]
    data_write[0]=(reg>>8)&0xff;
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	733b      	strb	r3, [r7, #12]
    data_write[1]=reg&0xff;
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, addr_write, data_write, 2, 0xffff);
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	2152      	movs	r1, #82	@ 0x52
 80014ac:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <VL6180X_ReadByte+0x50>)
 80014ae:	f002 fd7f 	bl	8003fb0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, addr_write, &receive_data, 1, 0xffff);
 80014b2:	f107 020b 	add.w	r2, r7, #11
 80014b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	2152      	movs	r1, #82	@ 0x52
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <VL6180X_ReadByte+0x50>)
 80014c2:	f002 fe73 	bl	80041ac <HAL_I2C_Master_Receive>
    return receive_data;
 80014c6:	7afb      	ldrb	r3, [r7, #11]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000984 	.word	0x20000984

080014d4 <VL6180X_Init>:

uint8_t VL6180X_Init()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
    ptp_offset = 0;
 80014da:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <VL6180X_Init+0x1a0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    scaling = 0;
 80014e0:	4b65      	ldr	r3, [pc, #404]	@ (8001678 <VL6180X_Init+0x1a4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
    io_timeout = 2;
 80014e6:	4b65      	ldr	r3, [pc, #404]	@ (800167c <VL6180X_Init+0x1a8>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	801a      	strh	r2, [r3, #0]

    ptp_offset = VL6180X_ReadByte(SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 80014ec:	2024      	movs	r0, #36	@ 0x24
 80014ee:	f7ff ffc7 	bl	8001480 <VL6180X_ReadByte>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <VL6180X_Init+0x1a0>)
 80014f8:	701a      	strb	r2, [r3, #0]
    uint8_t reset=VL6180X_ReadByte(0x016);//check wether reset over
 80014fa:	2016      	movs	r0, #22
 80014fc:	f7ff ffc0 	bl	8001480 <VL6180X_ReadByte>
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
    if(reset==1)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b01      	cmp	r3, #1
 8001508:	f040 80ae 	bne.w	8001668 <VL6180X_Init+0x194>
    {
        VL6180X_WR_CMD(0X0207,0X01);
 800150c:	2101      	movs	r1, #1
 800150e:	f240 2007 	movw	r0, #519	@ 0x207
 8001512:	f7ff ff6b 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0208,0X01);
 8001516:	2101      	movs	r1, #1
 8001518:	f44f 7002 	mov.w	r0, #520	@ 0x208
 800151c:	f7ff ff66 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0096,0X00);
 8001520:	2100      	movs	r1, #0
 8001522:	2096      	movs	r0, #150	@ 0x96
 8001524:	f7ff ff62 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0097,0XFD);
 8001528:	21fd      	movs	r1, #253	@ 0xfd
 800152a:	2097      	movs	r0, #151	@ 0x97
 800152c:	f7ff ff5e 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00E3,0X00);
 8001530:	2100      	movs	r1, #0
 8001532:	20e3      	movs	r0, #227	@ 0xe3
 8001534:	f7ff ff5a 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00E4,0X04);
 8001538:	2104      	movs	r1, #4
 800153a:	20e4      	movs	r0, #228	@ 0xe4
 800153c:	f7ff ff56 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00E5,0X02);
 8001540:	2102      	movs	r1, #2
 8001542:	20e5      	movs	r0, #229	@ 0xe5
 8001544:	f7ff ff52 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00E6,0X01);
 8001548:	2101      	movs	r1, #1
 800154a:	20e6      	movs	r0, #230	@ 0xe6
 800154c:	f7ff ff4e 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00E7,0X03);
 8001550:	2103      	movs	r1, #3
 8001552:	20e7      	movs	r0, #231	@ 0xe7
 8001554:	f7ff ff4a 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00F5,0X02);
 8001558:	2102      	movs	r1, #2
 800155a:	20f5      	movs	r0, #245	@ 0xf5
 800155c:	f7ff ff46 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00D9,0X05);
 8001560:	2105      	movs	r1, #5
 8001562:	20d9      	movs	r0, #217	@ 0xd9
 8001564:	f7ff ff42 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00DB,0XCE);
 8001568:	21ce      	movs	r1, #206	@ 0xce
 800156a:	20db      	movs	r0, #219	@ 0xdb
 800156c:	f7ff ff3e 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X02DC,0X03);
 8001570:	2103      	movs	r1, #3
 8001572:	f44f 7037 	mov.w	r0, #732	@ 0x2dc
 8001576:	f7ff ff39 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00DD,0XF8);
 800157a:	21f8      	movs	r1, #248	@ 0xf8
 800157c:	20dd      	movs	r0, #221	@ 0xdd
 800157e:	f7ff ff35 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X009F,0X00);
 8001582:	2100      	movs	r1, #0
 8001584:	209f      	movs	r0, #159	@ 0x9f
 8001586:	f7ff ff31 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00A3,0X3C);
 800158a:	213c      	movs	r1, #60	@ 0x3c
 800158c:	20a3      	movs	r0, #163	@ 0xa3
 800158e:	f7ff ff2d 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00B7,0X00);
 8001592:	2100      	movs	r1, #0
 8001594:	20b7      	movs	r0, #183	@ 0xb7
 8001596:	f7ff ff29 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00BB,0X3C);
 800159a:	213c      	movs	r1, #60	@ 0x3c
 800159c:	20bb      	movs	r0, #187	@ 0xbb
 800159e:	f7ff ff25 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00B2,0X09);
 80015a2:	2109      	movs	r1, #9
 80015a4:	20b2      	movs	r0, #178	@ 0xb2
 80015a6:	f7ff ff21 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00CA,0X09);
 80015aa:	2109      	movs	r1, #9
 80015ac:	20ca      	movs	r0, #202	@ 0xca
 80015ae:	f7ff ff1d 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0198,0X01);
 80015b2:	2101      	movs	r1, #1
 80015b4:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 80015b8:	f7ff ff18 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X01B0,0X17);
 80015bc:	2117      	movs	r1, #23
 80015be:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 80015c2:	f7ff ff13 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X01AD,0X00);
 80015c6:	2100      	movs	r1, #0
 80015c8:	f240 10ad 	movw	r0, #429	@ 0x1ad
 80015cc:	f7ff ff0e 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X00FF,0X05);
 80015d0:	2105      	movs	r1, #5
 80015d2:	20ff      	movs	r0, #255	@ 0xff
 80015d4:	f7ff ff0a 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0100,0X05);
 80015d8:	2105      	movs	r1, #5
 80015da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015de:	f7ff ff05 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0199,0X05);
 80015e2:	2105      	movs	r1, #5
 80015e4:	f240 1099 	movw	r0, #409	@ 0x199
 80015e8:	f7ff ff00 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X01A6,0X1B);
 80015ec:	211b      	movs	r1, #27
 80015ee:	f44f 70d3 	mov.w	r0, #422	@ 0x1a6
 80015f2:	f7ff fefb 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X01AC,0X3E);
 80015f6:	213e      	movs	r1, #62	@ 0x3e
 80015f8:	f44f 70d6 	mov.w	r0, #428	@ 0x1ac
 80015fc:	f7ff fef6 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X01A7,0X1F);
 8001600:	211f      	movs	r1, #31
 8001602:	f240 10a7 	movw	r0, #423	@ 0x1a7
 8001606:	f7ff fef1 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0030,0X00);
 800160a:	2100      	movs	r1, #0
 800160c:	2030      	movs	r0, #48	@ 0x30
 800160e:	f7ff feed 	bl	80013ec <VL6180X_WR_CMD>

        VL6180X_WR_CMD(0X0011,0X10);
 8001612:	2110      	movs	r1, #16
 8001614:	2011      	movs	r0, #17
 8001616:	f7ff fee9 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X010A,0X30);
 800161a:	2130      	movs	r1, #48	@ 0x30
 800161c:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001620:	f7ff fee4 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X003F,0X46);
 8001624:	2146      	movs	r1, #70	@ 0x46
 8001626:	203f      	movs	r0, #63	@ 0x3f
 8001628:	f7ff fee0 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0031,0XFF);
 800162c:	21ff      	movs	r1, #255	@ 0xff
 800162e:	2031      	movs	r0, #49	@ 0x31
 8001630:	f7ff fedc 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0040,0X63);
 8001634:	2163      	movs	r1, #99	@ 0x63
 8001636:	2040      	movs	r0, #64	@ 0x40
 8001638:	f7ff fed8 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X002E,0X01);
 800163c:	2101      	movs	r1, #1
 800163e:	202e      	movs	r0, #46	@ 0x2e
 8001640:	f7ff fed4 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X001B,0X09);
 8001644:	2109      	movs	r1, #9
 8001646:	201b      	movs	r0, #27
 8001648:	f7ff fed0 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X003E,0X31);
 800164c:	2131      	movs	r1, #49	@ 0x31
 800164e:	203e      	movs	r0, #62	@ 0x3e
 8001650:	f7ff fecc 	bl	80013ec <VL6180X_WR_CMD>
        VL6180X_WR_CMD(0X0014,0X24);
 8001654:	2124      	movs	r1, #36	@ 0x24
 8001656:	2014      	movs	r0, #20
 8001658:	f7ff fec8 	bl	80013ec <VL6180X_WR_CMD>

        VL6180X_WR_CMD(0x016,0x00);
 800165c:	2100      	movs	r1, #0
 800165e:	2016      	movs	r0, #22
 8001660:	f7ff fec4 	bl	80013ec <VL6180X_WR_CMD>
        return 1;
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <VL6180X_Init+0x196>
    }
    return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000011a 	.word	0x2000011a
 8001678:	2000011b 	.word	0x2000011b
 800167c:	2000011c 	.word	0x2000011c

08001680 <VL6180X_SetScaling>:


void VL6180X_SetScaling(uint8_t new_scaling)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  uint8_t const DefaultCrosstalkValidHeight = 20; // default value of SYSRANGE__CROSSTALK_VALID_HEIGHT
 800168a:	2314      	movs	r3, #20
 800168c:	73fb      	strb	r3, [r7, #15]

  // do nothing if scaling value is invalid
  if (new_scaling < 1 || new_scaling > 3) { return; }
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d03e      	beq.n	8001712 <VL6180X_SetScaling+0x92>
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d83b      	bhi.n	8001712 <VL6180X_SetScaling+0x92>

    scaling = new_scaling;
 800169a:	4a20      	ldr	r2, [pc, #128]	@ (800171c <VL6180X_SetScaling+0x9c>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	7013      	strb	r3, [r2, #0]
  VL6180X_WR_CMD2(RANGE_SCALER, ScalerValues[scaling]);
 80016a0:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <VL6180X_SetScaling+0x9c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <VL6180X_SetScaling+0xa0>)
 80016a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016ac:	4619      	mov	r1, r3
 80016ae:	2096      	movs	r0, #150	@ 0x96
 80016b0:	f7ff febe 	bl	8001430 <VL6180X_WR_CMD2>

  // apply scaling on part-to-part offset
  VL6180X_WR_CMD(SYSRANGE__PART_TO_PART_RANGE_OFFSET, ptp_offset / scaling);
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <VL6180X_SetScaling+0xa4>)
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <VL6180X_SetScaling+0x9c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	2024      	movs	r0, #36	@ 0x24
 80016c6:	f7ff fe91 	bl	80013ec <VL6180X_WR_CMD>

  // apply scaling on CrossTalkValidHeight
  VL6180X_WR_CMD(SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight / scaling);
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <VL6180X_SetScaling+0x9c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	2021      	movs	r0, #33	@ 0x21
 80016da:	f7ff fe87 	bl	80013ec <VL6180X_WR_CMD>

  // This function does not apply scaling to RANGE_IGNORE_VALID_HEIGHT.

  // enable early convergence estimate only at 1x scaling
  uint8_t rce = VL6180X_ReadByte(SYSRANGE__RANGE_CHECK_ENABLES);
 80016de:	202d      	movs	r0, #45	@ 0x2d
 80016e0:	f7ff fece 	bl	8001480 <VL6180X_ReadByte>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73bb      	strb	r3, [r7, #14]
  VL6180X_WR_CMD(SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (scaling == 1));
 80016e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <VL6180X_SetScaling+0x9c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	202d      	movs	r0, #45	@ 0x2d
 800170c:	f7ff fe6e 	bl	80013ec <VL6180X_WR_CMD>
 8001710:	e000      	b.n	8001714 <VL6180X_SetScaling+0x94>
  if (new_scaling < 1 || new_scaling > 3) { return; }
 8001712:	bf00      	nop
}
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000011b 	.word	0x2000011b
 8001720:	08008e1c 	.word	0x08008e1c
 8001724:	2000011a 	.word	0x2000011a

08001728 <VL6180X_ConfigureDefault>:


void VL6180X_ConfigureDefault()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  VL6180X_WR_CMD(READOUT__AVERAGING_SAMPLE_PERIOD,0x30);
 800172c:	2130      	movs	r1, #48	@ 0x30
 800172e:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001732:	f7ff fe5b 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(SYSALS__ANALOGUE_GAIN, 0x46);
 8001736:	2146      	movs	r1, #70	@ 0x46
 8001738:	203f      	movs	r0, #63	@ 0x3f
 800173a:	f7ff fe57 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 800173e:	21ff      	movs	r1, #255	@ 0xff
 8001740:	2031      	movs	r0, #49	@ 0x31
 8001742:	f7ff fe53 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD2(SYSALS__INTEGRATION_PERIOD, 0x0063);
 8001746:	2163      	movs	r1, #99	@ 0x63
 8001748:	2040      	movs	r0, #64	@ 0x40
 800174a:	f7ff fe71 	bl	8001430 <VL6180X_WR_CMD2>
  VL6180X_WR_CMD(SYSRANGE__VHV_RECALIBRATE, 0x01);
 800174e:	2101      	movs	r1, #1
 8001750:	202e      	movs	r0, #46	@ 0x2e
 8001752:	f7ff fe4b 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 8001756:	2109      	movs	r1, #9
 8001758:	201b      	movs	r0, #27
 800175a:	f7ff fe47 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 800175e:	2131      	movs	r1, #49	@ 0x31
 8001760:	203e      	movs	r0, #62	@ 0x3e
 8001762:	f7ff fe43 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 8001766:	2124      	movs	r1, #36	@ 0x24
 8001768:	2014      	movs	r0, #20
 800176a:	f7ff fe3f 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 800176e:	2131      	movs	r1, #49	@ 0x31
 8001770:	201c      	movs	r0, #28
 8001772:	f7ff fe3b 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_WR_CMD(INTERLEAVED_MODE__ENABLE, 0);
 8001776:	2100      	movs	r1, #0
 8001778:	f240 20a3 	movw	r0, #675	@ 0x2a3
 800177c:	f7ff fe36 	bl	80013ec <VL6180X_WR_CMD>
  VL6180X_SetScaling(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff ff7d 	bl	8001680 <VL6180X_SetScaling>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}

0800178a <VL6180_Read_Range>:

static uint8_t VL6180_Read_Range()
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
    int range;
    range=VL6180X_ReadByte(0x062);
 8001790:	2062      	movs	r0, #98	@ 0x62
 8001792:	f7ff fe75 	bl	8001480 <VL6180X_ReadByte>
 8001796:	4603      	mov	r3, r0
 8001798:	607b      	str	r3, [r7, #4]
    return range;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	b2db      	uxtb	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <VL6180X_Start_Range>:
{
  io_timeout = timeout;
}

uint8_t VL6180X_Start_Range()
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  VL6180X_WR_CMD(0x018,0x01);
 80017aa:	2101      	movs	r1, #1
 80017ac:	2018      	movs	r0, #24
 80017ae:	f7ff fe1d 	bl	80013ec <VL6180X_WR_CMD>
  return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <VL6180X_Poll_Range>:

uint16_t timeoutcnt=0;

/*poll for new sample ready */
uint8_t VL6180X_Poll_Range()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
    uint8_t status;
    uint8_t range_status;
    status=VL6180X_ReadByte(0x04f);
 80017be:	204f      	movs	r0, #79	@ 0x4f
 80017c0:	f7ff fe5e 	bl	8001480 <VL6180X_ReadByte>
 80017c4:	4603      	mov	r3, r0
 80017c6:	71bb      	strb	r3, [r7, #6]
    range_status=status&0x07;
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	71fb      	strb	r3, [r7, #7]
    while(range_status!=0x04)
 80017d0:	e017      	b.n	8001802 <VL6180X_Poll_Range+0x4a>
    {
        timeoutcnt++;
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <VL6180X_Poll_Range+0x60>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <VL6180X_Poll_Range+0x60>)
 80017dc:	801a      	strh	r2, [r3, #0]
        if(timeoutcnt > io_timeout)
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <VL6180X_Poll_Range+0x60>)
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <VL6180X_Poll_Range+0x64>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d80f      	bhi.n	800180a <VL6180X_Poll_Range+0x52>
        {
            break;
        }
        status=VL6180X_ReadByte(0x04f);
 80017ea:	204f      	movs	r0, #79	@ 0x4f
 80017ec:	f7ff fe48 	bl	8001480 <VL6180X_ReadByte>
 80017f0:	4603      	mov	r3, r0
 80017f2:	71bb      	strb	r3, [r7, #6]
        range_status=status&0x07;
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f001 fae1 	bl	8002dc4 <HAL_Delay>
    while(range_status!=0x04)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b04      	cmp	r3, #4
 8001806:	d1e4      	bne.n	80017d2 <VL6180X_Poll_Range+0x1a>
 8001808:	e000      	b.n	800180c <VL6180X_Poll_Range+0x54>
            break;
 800180a:	bf00      	nop
    }
    return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000011e 	.word	0x2000011e
 800181c:	2000011c 	.word	0x2000011c

08001820 <VL6180X_ReadRangeSingleMillimeters>:
{
  VL6180X_WR_CMD(0x015,0x07);
}

uint16_t VL6180X_ReadRangeSingleMillimeters()
{
 8001820:	b598      	push	{r3, r4, r7, lr}
 8001822:	af00      	add	r7, sp, #0
    /*Start Single measure mode*/
    VL6180X_Start_Range();
 8001824:	f7ff ffbf 	bl	80017a6 <VL6180X_Start_Range>
    /* Wait for measurement ready. */
    VL6180X_Poll_Range();
 8001828:	f7ff ffc6 	bl	80017b8 <VL6180X_Poll_Range>
    HAL_Delay(100);
 800182c:	2064      	movs	r0, #100	@ 0x64
 800182e:	f001 fac9 	bl	8002dc4 <HAL_Delay>
    return (uint16_t)scaling * VL6180_Read_Range();
 8001832:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <VL6180X_ReadRangeSingleMillimeters+0x28>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461c      	mov	r4, r3
 8001838:	f7ff ffa7 	bl	800178a <VL6180_Read_Range>
 800183c:	4603      	mov	r3, r0
 800183e:	fb04 f303 	mul.w	r3, r4, r3
 8001842:	b29b      	uxth	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd98      	pop	{r3, r4, r7, pc}
 8001848:	2000011b 	.word	0x2000011b

0800184c <VL6280X_GetRtn>:

static uint16_t VL6280X_GetRtn(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint16_t raw = VL6180X_ReadByte(RESULT__RANGE_RETURN_RATE);
 8001852:	2066      	movs	r0, #102	@ 0x66
 8001854:	f7ff fe14 	bl	8001480 <VL6180X_ReadByte>
 8001858:	4603      	mov	r3, r0
 800185a:	80fb      	strh	r3, [r7, #6]
	uint16_t return_rate = raw / 128;
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	09db      	lsrs	r3, r3, #7
 8001860:	80bb      	strh	r3, [r7, #4]
	return return_rate;
 8001862:	88bb      	ldrh	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <VL6180X_Offset_Calibration>:
 * @brief 用于手动校准的函数
 * @note 使用方法：上电后先将小球放在离模块50mm远的地方，按校准按钮开启校准
 *                等待串口显示校准完成
 */
void VL6180X_Offset_Calibration(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	713b      	strb	r3, [r7, #4]
	VL6180X_WR_CMD(SYSRANGE__PART_TO_PART_RANGE_OFFSET,0x00);
 800187a:	2100      	movs	r1, #0
 800187c:	2024      	movs	r0, #36	@ 0x24
 800187e:	f7ff fdb5 	bl	80013ec <VL6180X_WR_CMD>
	Send_sprintf(PC_USART,"ready to offset calibration:\n");
 8001882:	4915      	ldr	r1, [pc, #84]	@ (80018d8 <VL6180X_Offset_Calibration+0x6c>)
 8001884:	4815      	ldr	r0, [pc, #84]	@ (80018dc <VL6180X_Offset_Calibration+0x70>)
 8001886:	f000 f9f6 	bl	8001c76 <Send_sprintf>
//	HAL_Delay(2000);   //等待两秒
	for(uint8_t i = 0;i<TIME_FOR_OFFSET_CALIBRATION;i++)
 800188a:	2300      	movs	r3, #0
 800188c:	717b      	strb	r3, [r7, #5]
 800188e:	e009      	b.n	80018a4 <VL6180X_Offset_Calibration+0x38>
	{
		sum += VL6180X_ReadRangeSingleMillimeters();
 8001890:	f7ff ffc6 	bl	8001820 <VL6180X_ReadRangeSingleMillimeters>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4413      	add	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0;i<TIME_FOR_OFFSET_CALIBRATION;i++)
 800189e:	797b      	ldrb	r3, [r7, #5]
 80018a0:	3301      	adds	r3, #1
 80018a2:	717b      	strb	r3, [r7, #5]
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	2b31      	cmp	r3, #49	@ 0x31
 80018a8:	d9f2      	bls.n	8001890 <VL6180X_Offset_Calibration+0x24>
	}
	offset = (uint8_t)(OFFSET_CALIBRATION_TARGET_RANGE - sum / TIME_FOR_OFFSET_CALIBRATION);
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <VL6180X_Offset_Calibration+0x74>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 80018bc:	713b      	strb	r3, [r7, #4]
	VL6180X_WR_CMD(SYSRANGE__PART_TO_PART_RANGE_OFFSET,offset);
 80018be:	793b      	ldrb	r3, [r7, #4]
 80018c0:	4619      	mov	r1, r3
 80018c2:	2024      	movs	r0, #36	@ 0x24
 80018c4:	f7ff fd92 	bl	80013ec <VL6180X_WR_CMD>
	Send_sprintf(PC_USART,"offset calibration success!\n");
 80018c8:	4906      	ldr	r1, [pc, #24]	@ (80018e4 <VL6180X_Offset_Calibration+0x78>)
 80018ca:	4804      	ldr	r0, [pc, #16]	@ (80018dc <VL6180X_Offset_Calibration+0x70>)
 80018cc:	f000 f9d3 	bl	8001c76 <Send_sprintf>

}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08008d40 	.word	0x08008d40
 80018dc:	20000b88 	.word	0x20000b88
 80018e0:	51eb851f 	.word	0x51eb851f
 80018e4:	08008d60 	.word	0x08008d60

080018e8 <VL6180X_CrossTalk_Callibration>:

uint8_t VL6180X_CrossTalk_Callibration(void)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
	uint8_t sum_of_rate = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	71fb      	strb	r3, [r7, #7]
	uint8_t sum_of_range = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71bb      	strb	r3, [r7, #6]
	uint8_t cross_talk = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	713b      	strb	r3, [r7, #4]
	if(VL6180X_ReadByte(SYSRANGE__CROSSTALK_COMPENSATION_RATE)== 0x00)
 80018fa:	201e      	movs	r0, #30
 80018fc:	f7ff fdc0 	bl	8001480 <VL6180X_ReadByte>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d14a      	bne.n	800199c <VL6180X_CrossTalk_Callibration+0xb4>
	{
		Send_sprintf(PC_USART,"ready to cross talk calibration:\n");
 8001906:	4928      	ldr	r1, [pc, #160]	@ (80019a8 <VL6180X_CrossTalk_Callibration+0xc0>)
 8001908:	4828      	ldr	r0, [pc, #160]	@ (80019ac <VL6180X_CrossTalk_Callibration+0xc4>)
 800190a:	f000 f9b4 	bl	8001c76 <Send_sprintf>
		for(uint8_t i =0;i<50;i++)
 800190e:	2300      	movs	r3, #0
 8001910:	717b      	strb	r3, [r7, #5]
 8001912:	e010      	b.n	8001936 <VL6180X_CrossTalk_Callibration+0x4e>
		{
			sum_of_rate += VL6280X_GetRtn();
 8001914:	f7ff ff9a 	bl	800184c <VL6280X_GetRtn>
 8001918:	4603      	mov	r3, r0
 800191a:	b2da      	uxtb	r2, r3
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4413      	add	r3, r2
 8001920:	71fb      	strb	r3, [r7, #7]
			sum_of_range += VL6180X_ReadRangeSingleMillimeters();
 8001922:	f7ff ff7d 	bl	8001820 <VL6180X_ReadRangeSingleMillimeters>
 8001926:	4603      	mov	r3, r0
 8001928:	b2da      	uxtb	r2, r3
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	4413      	add	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
		for(uint8_t i =0;i<50;i++)
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3301      	adds	r3, #1
 8001934:	717b      	strb	r3, [r7, #5]
 8001936:	797b      	ldrb	r3, [r7, #5]
 8001938:	2b31      	cmp	r3, #49	@ 0x31
 800193a:	d9eb      	bls.n	8001914 <VL6180X_CrossTalk_Callibration+0x2c>
		}
		cross_talk = sum_of_rate*1.0f + (1-sum_of_range*1.0f/100.0f)*128;
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcbe 	bl	80002c0 <__aeabi_i2f>
 8001944:	4604      	mov	r4, r0
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fcb9 	bl	80002c0 <__aeabi_i2f>
 800194e:	4603      	mov	r3, r0
 8001950:	4917      	ldr	r1, [pc, #92]	@ (80019b0 <VL6180X_CrossTalk_Callibration+0xc8>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fdbc 	bl	80004d0 <__aeabi_fdiv>
 8001958:	4603      	mov	r3, r0
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001960:	f7fe fbf8 	bl	8000154 <__aeabi_fsub>
 8001964:	4603      	mov	r3, r0
 8001966:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fcfc 	bl	8000368 <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	4620      	mov	r0, r4
 8001976:	f7fe fbef 	bl	8000158 <__addsf3>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fe69 	bl	8000654 <__aeabi_f2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	713b      	strb	r3, [r7, #4]
		VL6180X_WR_CMD(SYSRANGE__CROSSTALK_COMPENSATION_RATE,cross_talk);
 8001986:	793b      	ldrb	r3, [r7, #4]
 8001988:	4619      	mov	r1, r3
 800198a:	201e      	movs	r0, #30
 800198c:	f7ff fd2e 	bl	80013ec <VL6180X_WR_CMD>
		Send_sprintf(PC_USART,"cross talk calibration success!\n");
 8001990:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <VL6180X_CrossTalk_Callibration+0xcc>)
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <VL6180X_CrossTalk_Callibration+0xc4>)
 8001994:	f000 f96f 	bl	8001c76 <Send_sprintf>
		return 0 ;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <VL6180X_CrossTalk_Callibration+0xb6>
    }
	else
	{
		return 1;
 800199c:	2301      	movs	r3, #1
	}
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08008d80 	.word	0x08008d80
 80019ac:	20000b88 	.word	0x20000b88
 80019b0:	42c80000 	.word	0x42c80000
 80019b4:	08008da4 	.word	0x08008da4

080019b8 <motor_timer_init>:

/*
 * @brief 电机的初始化函数，一定一定要放在最前面！！！
 */
void motor_timer_init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(MOTOR_TIM_HANDLE);         //开启时钟
 80019bc:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <motor_timer_init+0x20>)
 80019be:	f003 fefd 	bl	80057bc <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start_IT(MOTOR_TIM_HANDLE,MOTOR_TIM_CHANNEL);//启动比较输出使能中断
 80019c2:	2100      	movs	r1, #0
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <motor_timer_init+0x20>)
 80019c6:	f003 ffed 	bl	80059a4 <HAL_TIM_OC_Start_IT>
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);    //电机失能（ENA引脚低电平）
 80019ca:	2200      	movs	r2, #0
 80019cc:	2120      	movs	r1, #32
 80019ce:	4803      	ldr	r0, [pc, #12]	@ (80019dc <motor_timer_init+0x24>)
 80019d0:	f002 f979 	bl	8003cc6 <HAL_GPIO_WritePin>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000ab0 	.word	0x20000ab0
 80019dc:	40010800 	.word	0x40010800

080019e0 <HAL_TIM_OC_DelayElapsedCallback>:
/*
 * @brief 输出比较中断回调函数
 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	__IO uint16_t count = __HAL_TIM_GET_COUNTER(MOTOR_TIM_HANDLE);
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	81bb      	strh	r3, [r7, #12]
	uint16_t temp = MOTOR_AUTORELOAD & (count + TOGGLE_PERIOD);   //重新读取counter值并填入比较寄存器中，这样可以消除因为系统
 80019f2:	89bb      	ldrh	r3, [r7, #12]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3314      	adds	r3, #20
 80019f8:	81fb      	strh	r3, [r7, #14]
	                                                              //中断响应而额外花费的时间
	__HAL_TIM_SET_COMPARE(MOTOR_TIM_HANDLE,MOTOR_TIM_CHANNEL,temp);
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	89fa      	ldrh	r2, [r7, #14]
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
	pulse_count++;    //计算脉冲数的两倍
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8001a0e:	801a      	strh	r2, [r3, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000ab0 	.word	0x20000ab0
 8001a20:	20000120 	.word	0x20000120

08001a24 <Read_pulse>:

/*
 * ==================================电机转动特定角度====================================
 */
uint16_t Read_pulse(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	return pulse_count/2;   //返回脉冲数
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <Read_pulse+0x18>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	b29b      	uxth	r3, r3
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000120 	.word	0x20000120

08001a40 <Change_dir>:


void Change_dir(MOTOR_DIR direction)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, direction);//控制方向
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <Change_dir+0x20>)
 8001a52:	f002 f938 	bl	8003cc6 <HAL_GPIO_WritePin>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010800 	.word	0x40010800

08001a64 <Rotate_Givenpulse>:
/*
 * @brief 让电机旋转特定脉冲数  在滚球控制中使用增量式pid
 * @para pulse_val  希望给到电机的脉冲数（有符号）
 */
void  Rotate_Givenpulse(int16_t pulse_val)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
	if (pulse_val < 0)
 8001a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da07      	bge.n	8001a86 <Rotate_Givenpulse+0x22>
	{
		//逆时针旋转，可以按情况修改
		Change_dir(CCW);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff ffe2 	bl	8001a40 <Change_dir>
		pulse_val = -1*pulse_val;
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	425b      	negs	r3, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	e006      	b.n	8001a94 <Rotate_Givenpulse+0x30>
	}
	else if(pulse_val > 0)
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	dd02      	ble.n	8001a94 <Rotate_Givenpulse+0x30>
	{
		//顺时针旋转
		Change_dir(CW);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff ffd6 	bl	8001a40 <Change_dir>
	}
	pulse_count = 0;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <Rotate_Givenpulse+0x6c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	801a      	strh	r2, [r3, #0]
    //电机使能,脉冲数清零
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <Rotate_Givenpulse+0x70>)
 8001aa0:	f002 f911 	bl	8003cc6 <HAL_GPIO_WritePin>

	//开始计数
	while(Read_pulse() < pulse_val){};       //如果未输出完则堵塞在这里不继续往下运行
 8001aa4:	bf00      	nop
 8001aa6:	f7ff ffbd 	bl	8001a24 <Read_pulse>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbf7      	blt.n	8001aa6 <Rotate_Givenpulse+0x42>
    //电机失能,脉冲数清零
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2120      	movs	r1, #32
 8001aba:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <Rotate_Givenpulse+0x70>)
 8001abc:	f002 f903 	bl	8003cc6 <HAL_GPIO_WritePin>
	pulse_count = 0;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <Rotate_Givenpulse+0x6c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000120 	.word	0x20000120
 8001ad4:	40010800 	.word	0x40010800

08001ad8 <pid_pulse_cal>:
 * @brief 用于pid算法控制，计算需要反馈给电机的脉冲数
 * @note 在这之前一定要调用change_pidindex()函数或者包含它的函数，否则pid参数不会改变
 *       这只是初级的一阶pid，后面可以视情况进行串级Pid调控或者进行微分先行、输出限制、积分限幅等的操作
 */
void pid_pulse_cal(uint8_t range)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
#if (PC_MODE == 0)

	my_pid.error = my_pid.target - range;  //计算误差
 8001ae2:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001ae4:	7d1b      	ldrb	r3, [r3, #20]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001af4:	819a      	strh	r2, [r3, #12]

	my_pid.output = my_pid.kp * (my_pid.error - my_pid.error_last) + my_pid.ki*my_pid.error + my_pid.kd * (my_pid.error - 2*my_pid.error_last + my_pid.error_last2);  //和脉冲数相关
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001af8:	681c      	ldr	r4, [r3, #0]
 8001afa:	4b32      	ldr	r3, [pc, #200]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001afc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fbd8 	bl	80002c0 <__aeabi_i2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7fe fc27 	bl	8000368 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b20:	685c      	ldr	r4, [r3, #4]
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fbc9 	bl	80002c0 <__aeabi_i2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7fe fc18 	bl	8000368 <__aeabi_fmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f7fe fb0b 	bl	8000158 <__addsf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461d      	mov	r5, r3
 8001b46:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b48:	689c      	ldr	r4, [r3, #8]
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b5e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001b62:	4413      	add	r3, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fbab 	bl	80002c0 <__aeabi_i2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7fe fbfa 	bl	8000368 <__aeabi_fmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4619      	mov	r1, r3
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f7fe faed 	bl	8000158 <__addsf3>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fd41 	bl	8000608 <__aeabi_f2iz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b8c:	825a      	strh	r2, [r3, #18]
	my_pid.output *= REDUCTION_RATIO ;//乘上减速比，保证实际输出的脉冲数足够多
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001b90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001ba4:	825a      	strh	r2, [r3, #18]

	my_pid.error_last2 = my_pid.error_last;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001ba8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001bae:	821a      	strh	r2, [r3, #16]
	my_pid.error_last = my_pid.error;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001bb2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001bb6:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <pid_pulse_cal+0xec>)
 8001bb8:	81da      	strh	r2, [r3, #14]
	my_pid.output *= REDUCTION_RATIO ;//乘上减速比，保证实际输出的脉冲数足够多

	my_pid.error_last2 = my_pid.error_last;
	my_pid.error_last = my_pid.error;
#endif
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000124 	.word	0x20000124

08001bc8 <pid_control_motor>:

/*
 * @brief 正式的pid执行函数，得到了pid的调控量之后输入给电机
 */
void pid_control_motor(uint8_t range)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	pid_pulse_cal(range);
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff7f 	bl	8001ad8 <pid_pulse_cal>
     Rotate_Givenpulse(my_pid.output);
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <pid_control_motor+0x28>)
 8001bdc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff3f 	bl	8001a64 <Rotate_Givenpulse>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000124 	.word	0x20000124

08001bf4 <Send_Byte>:
/*=====================================数据串口发送底层驱动代码=========================================================*/
/*
 * 发送一个字节
 */
void Send_Byte(const uint8_t Byte,UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef usart_result = HAL_UART_Transmit(huart, &Byte, 1, 10000);   //timeout单位是毫秒
 8001c00:	1df9      	adds	r1, r7, #7
 8001c02:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c06:	2201      	movs	r2, #1
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	f004 feda 	bl	80069c2 <HAL_UART_Transmit>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]
    if (usart_result!= HAL_OK)  //这里抄下来是不等于，有点奇怪
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <Send_Byte+0x32>
    {
	  printf("error:%d\n",usart_result);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <Send_Byte+0x3c>)
 8001c1e:	f005 ff6f 	bl	8007b00 <iprintf>
      Error_Handler();
 8001c22:	f000 fc28 	bl	8002476 <Error_Handler>
    }
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08008dc8 	.word	0x08008dc8

08001c34 <Send_String>:
}
/*
 * 发送一串字符串
 */
void Send_String(const uint8_t *string,UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
	if(string == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <Send_String+0x3a>
	{
		return;               //指针判空
	}
	while(string[i]!= '\0')
 8001c48:	e00a      	b.n	8001c60 <Send_String+0x2c>
	{
		Send_Byte(string[i],huart);
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffcd 	bl	8001bf4 <Send_Byte>
		i++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
	while(string[i]!= '\0')
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ee      	bne.n	8001c4a <Send_String+0x16>
 8001c6c:	e000      	b.n	8001c70 <Send_String+0x3c>
		return;               //指针判空
 8001c6e:	bf00      	nop
	}
}
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <Send_sprintf>:

/*
 * @brief 可以通过串口打印任意格式的字符,和上面重定向后的printf的最终效果相同
 */
void Send_sprintf(UART_HandleTypeDef *huart,char *format,...)
{
 8001c76:	b40e      	push	{r1, r2, r3}
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0c5      	sub	sp, #276	@ 0x114
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c86:	6018      	str	r0, [r3, #0]
	uint8_t string[256];
	va_list arg;
	va_start(arg,format);
 8001c88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c94:	601a      	str	r2, [r3, #0]
	vsprintf(string,format,arg);
 8001c96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c9e:	f107 0010 	add.w	r0, r7, #16
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8001ca8:	f005 fff4 	bl	8007c94 <vsiprintf>
	va_end(arg);
	Send_String(string,huart);
 8001cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cb4:	f107 0210 	add.w	r2, r7, #16
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7ff ffba 	bl	8001c34 <Send_String>

}
 8001cc0:	bf00      	nop
 8001cc2:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ccc:	b003      	add	sp, #12
 8001cce:	4770      	bx	lr

08001cd0 <PtrWrite_Change>:
	HAL_UARTEx_ReceiveToIdle_DMA(huart, &(read_buffer->buffer[read_buffer->ptrWrite]), DMA_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(hdma,DMA_IT_HT);//关闭传输过半中断
}

 void PtrWrite_Change(__IO FIFO_t *read_buffer)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	 Send_sprintf(PC_USART, "raw write:%d\n",read_buffer->ptrWrite);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 37d0 	ldrb.w	r3, [r3, #2000]	@ 0x7d0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4914      	ldr	r1, [pc, #80]	@ (8001d34 <PtrWrite_Change+0x64>)
 8001ce4:	4814      	ldr	r0, [pc, #80]	@ (8001d38 <PtrWrite_Change+0x68>)
 8001ce6:	f7ff ffc6 	bl	8001c76 <Send_sprintf>
	read_buffer->ptrWrite += read_buffer->rxcount;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 37d2 	ldrb.w	r3, [r3, #2002]	@ 0x7d2
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 37d0 	ldrb.w	r3, [r3, #2000]	@ 0x7d0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f883 27d0 	strb.w	r2, [r3, #2000]	@ 0x7d0
	read_buffer->ptrWrite %= FIFO_SIZE;                   //不断改变写指针的位置，取余避免越界
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 37d0 	ldrb.w	r3, [r3, #2000]	@ 0x7d0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <PtrWrite_Change+0x6c>)
 8001d10:	fb83 1302 	smull	r1, r3, r3, r2
 8001d14:	11d9      	asrs	r1, r3, #7
 8001d16:	17d3      	asrs	r3, r2, #31
 8001d18:	1acb      	subs	r3, r1, r3
 8001d1a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f883 27d0 	strb.w	r2, [r3, #2000]	@ 0x7d0
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08008dd4 	.word	0x08008dd4
 8001d38:	20000b88 	.word	0x20000b88
 8001d3c:	10624dd3 	.word	0x10624dd3

08001d40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d52:	4a28      	ldr	r2, [pc, #160]	@ (8001df4 <MX_ADC1_Init+0xb4>)
 8001d54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d5e:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d6c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d7e:	481c      	ldr	r0, [pc, #112]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001d80:	f001 f844 	bl	8002e0c <HAL_ADC_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001d8a:	f000 fb74 	bl	8002476 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d96:	2305      	movs	r3, #5
 8001d98:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4814      	ldr	r0, [pc, #80]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001da0:	f001 f90c 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001daa:	f000 fb64 	bl	8002476 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001dae:	2308      	movs	r3, #8
 8001db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001dbc:	f001 f8fe 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001dc6:	f000 fb56 	bl	8002476 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001dca:	2309      	movs	r3, #9
 8001dcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	@ (8001df0 <MX_ADC1_Init+0xb0>)
 8001dd8:	f001 f8f0 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001de2:	f000 fb48 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000910 	.word	0x20000910
 8001df4:	40012400 	.word	0x40012400

08001df8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a33      	ldr	r2, [pc, #204]	@ (8001ee0 <HAL_ADC_MspInit+0xe8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d15f      	bne.n	8001ed8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e4e:	f043 0308 	orr.w	r3, r3, #8
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_ADC_MspInit+0xec>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e64:	2303      	movs	r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0318 	add.w	r3, r7, #24
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481e      	ldr	r0, [pc, #120]	@ (8001ee8 <HAL_ADC_MspInit+0xf0>)
 8001e70:	f001 fd8e 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e74:	2303      	movs	r3, #3
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4619      	mov	r1, r3
 8001e82:	481a      	ldr	r0, [pc, #104]	@ (8001eec <HAL_ADC_MspInit+0xf4>)
 8001e84:	f001 fd84 	bl	8003990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_ADC_MspInit+0xfc>)
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001eaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001ebe:	f001 fac5 	bl	800344c <HAL_DMA_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001ec8:	f000 fad5 	bl	8002476 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001ed0:	621a      	str	r2, [r3, #32]
 8001ed2:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <HAL_ADC_MspInit+0xf8>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40012400 	.word	0x40012400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	40010c00 	.word	0x40010c00
 8001ef0:	20000940 	.word	0x20000940
 8001ef4:	40020008 	.word	0x40020008

08001ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001efe:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_DMA_Init+0x58>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <MX_DMA_Init+0x58>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6153      	str	r3, [r2, #20]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_DMA_Init+0x58>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	200b      	movs	r0, #11
 8001f1c:	f001 fa5f 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f20:	200b      	movs	r0, #11
 8001f22:	f001 fa78 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	200e      	movs	r0, #14
 8001f2c:	f001 fa57 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f30:	200e      	movs	r0, #14
 8001f32:	f001 fa70 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	200f      	movs	r0, #15
 8001f3c:	f001 fa4f 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f40:	200f      	movs	r0, #15
 8001f42:	f001 fa68 	bl	8003416 <HAL_NVIC_EnableIRQ>

}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f68:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f6e:	f043 0320 	orr.w	r3, r3, #32
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b39      	ldr	r3, [pc, #228]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a35      	ldr	r2, [pc, #212]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b33      	ldr	r3, [pc, #204]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800205c <MX_GPIO_Init+0x108>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <MX_GPIO_Init+0x108>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|EN_Pin|ENA_Pin, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	212c      	movs	r1, #44	@ 0x2c
 8001fb4:	482a      	ldr	r0, [pc, #168]	@ (8002060 <MX_GPIO_Init+0x10c>)
 8001fb6:	f001 fe86 	bl	8003cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_Pin|SHUT_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001fc0:	4828      	ldr	r0, [pc, #160]	@ (8002064 <MX_GPIO_Init+0x110>)
 8001fc2:	f001 fe80 	bl	8003cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_Pin|EN_Pin;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4820      	ldr	r0, [pc, #128]	@ (8002060 <MX_GPIO_Init+0x10c>)
 8001fde:	f001 fcd7 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = POSITION_Pin|SWITCH_Pin;
 8001fe2:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8001fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481a      	ldr	r0, [pc, #104]	@ (8002060 <MX_GPIO_Init+0x10c>)
 8001ff8:	f001 fcca 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENA_Pin;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2302      	movs	r3, #2
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	4813      	ldr	r0, [pc, #76]	@ (8002060 <MX_GPIO_Init+0x10c>)
 8002014:	f001 fcbc 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8002018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2302      	movs	r3, #2
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <MX_GPIO_Init+0x110>)
 8002032:	f001 fcad 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHUT_Pin;
 8002036:	2310      	movs	r3, #16
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203e:	2301      	movs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2302      	movs	r3, #2
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHUT_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_GPIO_Init+0x110>)
 800204e:	f001 fc9f 	bl	8003990 <HAL_GPIO_Init>

}
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40010800 	.word	0x40010800
 8002064:	40010c00 	.word	0x40010c00

08002068 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <MX_I2C1_Init+0x50>)
 800206e:	4a13      	ldr	r2, [pc, #76]	@ (80020bc <MX_I2C1_Init+0x54>)
 8002070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_I2C1_Init+0x50>)
 8002074:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <MX_I2C1_Init+0x58>)
 8002076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_I2C1_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_I2C1_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_I2C1_Init+0x50>)
 8002086:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800208a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <MX_I2C1_Init+0x50>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_I2C1_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <MX_I2C1_Init+0x50>)
 80020a6:	f001 fe3f 	bl	8003d28 <HAL_I2C_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020b0:	f000 f9e1 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000984 	.word	0x20000984
 80020bc:	40005400 	.word	0x40005400
 80020c0:	000186a0 	.word	0x000186a0

080020c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <MX_I2C2_Init+0x54>)
 80020cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <MX_I2C2_Init+0x58>)
 80020d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_I2C2_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	@ (8002114 <MX_I2C2_Init+0x50>)
 8002102:	f001 fe11 	bl	8003d28 <HAL_I2C_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800210c:	f000 f9b3 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200009d8 	.word	0x200009d8
 8002118:	40005800 	.word	0x40005800
 800211c:	000186a0 	.word	0x000186a0

08002120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	@ 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a32      	ldr	r2, [pc, #200]	@ (8002204 <HAL_I2C_MspInit+0xe4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d133      	bne.n	80021a8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a30      	ldr	r2, [pc, #192]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002158:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800215e:	2312      	movs	r3, #18
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	4827      	ldr	r0, [pc, #156]	@ (800220c <HAL_I2C_MspInit+0xec>)
 800216e:	f001 fc0f 	bl	8003990 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002172:	4b27      	ldr	r3, [pc, #156]	@ (8002210 <HAL_I2C_MspInit+0xf0>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002188:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <HAL_I2C_MspInit+0xf0>)
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 8002194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002198:	61d3      	str	r3, [r2, #28]
 800219a:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80021a6:	e029      	b.n	80021fc <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_I2C_MspInit+0xf4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d124      	bne.n	80021fc <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6193      	str	r3, [r2, #24]
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	2312      	movs	r3, #18
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	480b      	ldr	r0, [pc, #44]	@ (800220c <HAL_I2C_MspInit+0xec>)
 80021e0:	f001 fbd6 	bl	8003990 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 80021ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021ee:	61d3      	str	r3, [r2, #28]
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_I2C_MspInit+0xe8>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3730      	adds	r7, #48	@ 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40005400 	.word	0x40005400
 8002208:	40021000 	.word	0x40021000
 800220c:	40010c00 	.word	0x40010c00
 8002210:	40010000 	.word	0x40010000
 8002214:	40005800 	.word	0x40005800

08002218 <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
////		HAL_UARTEx_ReceiveToIdle_DMA(PC_USART,  send_buffer, DMA_BUFFER_SIZE);  //重新�??始接�??
//	   	__HAL_DMA_DISABLE_IT( PC_DMA,DMA_IT_HT);//关闭传输过半中断
////
//	}
	//串口空闲中断
	if((huart == PC_USART))  //�??测是否为正确通道与是否为串口空闲中断
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a1f      	ldr	r2, [pc, #124]	@ (80022a4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d137      	bne.n	800229c <HAL_UARTEx_RxEventCallback+0x84>
	{
		HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 800222c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002230:	481d      	ldr	r0, [pc, #116]	@ (80022a8 <HAL_UARTEx_RxEventCallback+0x90>)
 8002232:	f001 fd60 	bl	8003cf6 <HAL_GPIO_TogglePin>
		global_state = RUNNING;
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_UARTEx_RxEventCallback+0x94>)
 8002238:	2204      	movs	r2, #4
 800223a:	701a      	strb	r2, [r3, #0]
		rxFIFO.rxcount = DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(PC_DMA);   //获取数据长度
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <HAL_UARTEx_RxEventCallback+0x98>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	f06f 0317 	mvn.w	r3, #23
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_UARTEx_RxEventCallback+0x9c>)
 800224e:	f883 27d2 	strb.w	r2, [r3, #2002]	@ 0x7d2

		memcpy(&rxFIFO.buffer[rxFIFO.ptrWrite],send_buffer,rxFIFO.rxcount);  //将缓冲区的数据用读指针拷贝到接收数组中，长度为rxCount
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8002254:	f893 37d0 	ldrb.w	r3, [r3, #2000]	@ 0x7d0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_UARTEx_RxEventCallback+0x9c>)
 800225e:	4413      	add	r3, r2
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8002262:	f892 27d2 	ldrb.w	r2, [r2, #2002]	@ 0x7d2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	4913      	ldr	r1, [pc, #76]	@ (80022b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800226a:	4618      	mov	r0, r3
 800226c:	f005 fe2b 	bl	8007ec6 <memcpy>
		PtrWrite_Change(&rxFIFO);                                              //修改写指针，即改变下�??次接收时缓冲区存储的起始位置
 8002270:	4810      	ldr	r0, [pc, #64]	@ (80022b4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8002272:	f7ff fd2d 	bl	8001cd0 <PtrWrite_Change>
		memset(send_buffer,0x00,128);
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	2100      	movs	r1, #0
 800227a:	480f      	ldr	r0, [pc, #60]	@ (80022b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800227c:	f005 fda8 	bl	8007dd0 <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(PC_USART, send_buffer, DMA_BUFFER_SIZE);  //重新�??始接�??
 8002280:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002284:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002286:	4807      	ldr	r0, [pc, #28]	@ (80022a4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002288:	f004 fc26 	bl	8006ad8 <HAL_UARTEx_ReceiveToIdle_DMA>
	   	__HAL_DMA_DISABLE_IT( PC_DMA,DMA_IT_HT);//关闭传输过半中断
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_UARTEx_RxEventCallback+0x98>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <HAL_UARTEx_RxEventCallback+0x98>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0204 	bic.w	r2, r2, #4
 800229a:	601a      	str	r2, [r3, #0]

	}
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000b88 	.word	0x20000b88
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	200000ac 	.word	0x200000ac
 80022b0:	20000bd0 	.word	0x20000bd0
 80022b4:	2000013c 	.word	0x2000013c
 80022b8:	20000a2c 	.word	0x20000a2c

080022bc <TOF_start>:
void TOF_start(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2110      	movs	r1, #16
 80022c4:	4814      	ldr	r0, [pc, #80]	@ (8002318 <TOF_start+0x5c>)
 80022c6:	f001 fcfe 	bl	8003cc6 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80022ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ce:	f000 fd79 	bl	8002dc4 <HAL_Delay>

	  while(!VL6180X_Init())
 80022d2:	e006      	b.n	80022e2 <TOF_start+0x26>
	  {
		  Send_sprintf(PC_USART,"test!\n");
 80022d4:	4911      	ldr	r1, [pc, #68]	@ (800231c <TOF_start+0x60>)
 80022d6:	4812      	ldr	r0, [pc, #72]	@ (8002320 <TOF_start+0x64>)
 80022d8:	f7ff fccd 	bl	8001c76 <Send_sprintf>
		  HAL_Delay(100);
 80022dc:	2064      	movs	r0, #100	@ 0x64
 80022de:	f000 fd71 	bl	8002dc4 <HAL_Delay>
	  while(!VL6180X_Init())
 80022e2:	f7ff f8f7 	bl	80014d4 <VL6180X_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f3      	beq.n	80022d4 <TOF_start+0x18>
	  }
	  Send_sprintf(PC_USART,"initial successful!\n");
 80022ec:	490d      	ldr	r1, [pc, #52]	@ (8002324 <TOF_start+0x68>)
 80022ee:	480c      	ldr	r0, [pc, #48]	@ (8002320 <TOF_start+0x64>)
 80022f0:	f7ff fcc1 	bl	8001c76 <Send_sprintf>
	   VL6180X_ConfigureDefault();
 80022f4:	f7ff fa18 	bl	8001728 <VL6180X_ConfigureDefault>
	   Send_sprintf(PC_USART,"test2!\n");
 80022f8:	490b      	ldr	r1, [pc, #44]	@ (8002328 <TOF_start+0x6c>)
 80022fa:	4809      	ldr	r0, [pc, #36]	@ (8002320 <TOF_start+0x64>)
 80022fc:	f7ff fcbb 	bl	8001c76 <Send_sprintf>
	   HAL_Delay(2);
 8002300:	2002      	movs	r0, #2
 8002302:	f000 fd5f 	bl	8002dc4 <HAL_Delay>
	    VL6180X_SetScaling(2);
 8002306:	2002      	movs	r0, #2
 8002308:	f7ff f9ba 	bl	8001680 <VL6180X_SetScaling>
	    Send_sprintf(PC_USART,"test begin!\n");
 800230c:	4907      	ldr	r1, [pc, #28]	@ (800232c <TOF_start+0x70>)
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <TOF_start+0x64>)
 8002310:	f7ff fcb1 	bl	8001c76 <Send_sprintf>
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010c00 	.word	0x40010c00
 800231c:	08008de4 	.word	0x08008de4
 8002320:	20000b88 	.word	0x20000b88
 8002324:	08008dec 	.word	0x08008dec
 8002328:	08008e04 	.word	0x08008e04
 800232c:	08008e0c 	.word	0x08008e0c

08002330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002334:	f000 fce4 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002338:	f000 f842 	bl	80023c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800233c:	f7ff fe0a 	bl	8001f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8002340:	f7ff fdda 	bl	8001ef8 <MX_DMA_Init>
  MX_TIM1_Init();
 8002344:	f000 f9de 	bl	8002704 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002348:	f7ff fe8e 	bl	8002068 <MX_I2C1_Init>
  MX_TIM2_Init();
 800234c:	f000 fa7c 	bl	8002848 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002350:	f000 fac8 	bl	80028e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002354:	f7ff fcf4 	bl	8001d40 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002358:	f7ff feb4 	bl	80020c4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800235c:	f000 fbc8 	bl	8002af0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start_IT(&htim2);
 8002360:	4811      	ldr	r0, [pc, #68]	@ (80023a8 <main+0x78>)
 8002362:	f003 fa75 	bl	8005850 <HAL_TIM_Base_Start_IT>
   Encoder_Init();
 8002366:	f7fe fa8b 	bl	8000880 <Encoder_Init>
   my_key_init();
 800236a:	f7fe fb6b 	bl	8000a44 <my_key_init>
   motor_timer_init();
 800236e:	f7ff fb23 	bl	80019b8 <motor_timer_init>

   HAL_UARTEx_ReceiveToIdle_DMA(PC_USART,&send_buffer[0] , DMA_BUFFER_SIZE);
 8002372:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002376:	490d      	ldr	r1, [pc, #52]	@ (80023ac <main+0x7c>)
 8002378:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <main+0x80>)
 800237a:	f004 fbad 	bl	8006ad8 <HAL_UARTEx_ReceiveToIdle_DMA>
   	__HAL_DMA_DISABLE_IT(PC_DMA,DMA_IT_HT);//关闭传输过半中断
 800237e:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <main+0x84>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <main+0x84>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0204 	bic.w	r2, r2, #4
 800238c:	601a      	str	r2, [r3, #0]
//   receive_usart_DMA(PC_USART,PC_DMA,&pc_rxFIFO);
//   receive_usart_DMA( MOTOR_USART, MOTOR_DMA,&rxFIFO);
//   receive_usart_DMA(PC_USART,PC_DMA,send_buffer);
//   receive_usart_DMA( MOTOR_USART, MOTOR_DMA,send_buffer);

  state_machine_init();  //打开状�?�机
 800238e:	f7fe fa45 	bl	800081c <state_machine_init>
//


  TOF_start();     //打开TOF
 8002392:	f7ff ff93 	bl	80022bc <TOF_start>
//	  HAL_Delay(2000);
//	  Send_sprintf("%d\n",global_state);
//	  global_state = RUNNING;


	 my_state_machine[global_state].my_func();
 8002396:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <main+0x88>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <main+0x8c>)
 80023a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80023a4:	4798      	blx	r3
 80023a6:	e7f6      	b.n	8002396 <main+0x66>
 80023a8:	20000af8 	.word	0x20000af8
 80023ac:	20000a2c 	.word	0x20000a2c
 80023b0:	20000b88 	.word	0x20000b88
 80023b4:	20000bd0 	.word	0x20000bd0
 80023b8:	200000ac 	.word	0x200000ac
 80023bc:	20000084 	.word	0x20000084

080023c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b094      	sub	sp, #80	@ 0x50
 80023c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ca:	2228      	movs	r2, #40	@ 0x28
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f005 fcfe 	bl	8007dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023fe:	2301      	movs	r3, #1
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002402:	2302      	movs	r3, #2
 8002404:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002406:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800240c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002410:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002412:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fcba 	bl	8004d90 <HAL_RCC_OscConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002422:	f000 f828 	bl	8002476 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002426:	230f      	movs	r3, #15
 8002428:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002436:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f002 ff26 	bl	8005294 <HAL_RCC_ClockConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800244e:	f000 f812 	bl	8002476 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002452:	2302      	movs	r3, #2
 8002454:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800245a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4618      	mov	r0, r3
 8002460:	f003 f8a6 	bl	80055b0 <HAL_RCCEx_PeriphCLKConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800246a:	f000 f804 	bl	8002476 <Error_Handler>
  }
}
 800246e:	bf00      	nop
 8002470:	3750      	adds	r7, #80	@ 0x50
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247a:	b672      	cpsid	i
}
 800247c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800247e:	bf00      	nop
 8002480:	e7fd      	b.n	800247e <Error_Handler+0x8>
	...

08002484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_MspInit+0x5c>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <HAL_MspInit+0x5c>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6193      	str	r3, [r2, #24]
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_MspInit+0x5c>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_MspInit+0x5c>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a0e      	ldr	r2, [pc, #56]	@ (80024e0 <HAL_MspInit+0x5c>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_MspInit+0x5c>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_MspInit+0x60>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <HAL_MspInit+0x60>)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <NMI_Handler+0x4>

080024f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <MemManage_Handler+0x4>

08002500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <UsageFault_Handler+0x4>

08002510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002538:	f000 fc28 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <DMA1_Channel1_IRQHandler+0x10>)
 8002546:	f001 f8ef 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000940 	.word	0x20000940

08002554 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <DMA1_Channel4_IRQHandler+0x10>)
 800255a:	f001 f8e5 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000c14 	.word	0x20000c14

08002568 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <DMA1_Channel5_IRQHandler+0x10>)
 800256e:	f001 f8db 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000bd0 	.word	0x20000bd0

0800257c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <TIM1_CC_IRQHandler+0x10>)
 8002582:	f003 fc2f 	bl	8005de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000ab0 	.word	0x20000ab0

08002590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <TIM2_IRQHandler+0x10>)
 8002596:	f003 fc25 	bl	8005de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000af8 	.word	0x20000af8

080025a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <USART1_IRQHandler+0x10>)
 80025aa:	f004 faef 	bl	8006b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000b88 	.word	0x20000b88

080025b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e00a      	b.n	80025e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ca:	f3af 8000 	nop.w
 80025ce:	4601      	mov	r1, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	60ba      	str	r2, [r7, #8]
 80025d6:	b2ca      	uxtb	r2, r1
 80025d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbf0      	blt.n	80025ca <_read+0x12>
  }

  return len;
 80025e8:	687b      	ldr	r3, [r7, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e009      	b.n	8002618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf1      	blt.n	8002604 <_write+0x12>
  }
  return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_close>:

int _close(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002650:	605a      	str	r2, [r3, #4]
  return 0;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <_isatty>:

int _isatty(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
	...

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f005 fbd6 	bl	8007e6c <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20005000 	.word	0x20005000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	20000aac 	.word	0x20000aac
 80026f4:	20000da8 	.word	0x20000da8

080026f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b096      	sub	sp, #88	@ 0x58
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	615a      	str	r2, [r3, #20]
 8002734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2220      	movs	r2, #32
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f005 fb47 	bl	8007dd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002742:	4b3f      	ldr	r3, [pc, #252]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002744:	4a3f      	ldr	r2, [pc, #252]	@ (8002844 <MX_TIM1_Init+0x140>)
 8002746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8002748:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <MX_TIM1_Init+0x13c>)
 800274a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800274e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8002756:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002758:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800275c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b38      	ldr	r3, [pc, #224]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002764:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276a:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <MX_TIM1_Init+0x13c>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002770:	4833      	ldr	r0, [pc, #204]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002772:	f002 ffd3 	bl	800571c <HAL_TIM_Base_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800277c:	f7ff fe7b 	bl	8002476 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002784:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002786:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800278a:	4619      	mov	r1, r3
 800278c:	482c      	ldr	r0, [pc, #176]	@ (8002840 <MX_TIM1_Init+0x13c>)
 800278e:	f003 fc75 	bl	800607c <HAL_TIM_ConfigClockSource>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002798:	f7ff fe6d 	bl	8002476 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800279c:	4828      	ldr	r0, [pc, #160]	@ (8002840 <MX_TIM1_Init+0x13c>)
 800279e:	f003 f8a9 	bl	80058f4 <HAL_TIM_OC_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027a8:	f7ff fe65 	bl	8002476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027b8:	4619      	mov	r1, r3
 80027ba:	4821      	ldr	r0, [pc, #132]	@ (8002840 <MX_TIM1_Init+0x13c>)
 80027bc:	f003 fff0 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80027c6:	f7ff fe56 	bl	8002476 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80027ca:	2330      	movs	r3, #48	@ 0x30
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 6;
 80027ce:	2306      	movs	r3, #6
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027d6:	2300      	movs	r3, #0
 80027d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ea:	2200      	movs	r2, #0
 80027ec:	4619      	mov	r1, r3
 80027ee:	4814      	ldr	r0, [pc, #80]	@ (8002840 <MX_TIM1_Init+0x13c>)
 80027f0:	f003 fbe8 	bl	8005fc4 <HAL_TIM_OC_ConfigChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80027fa:	f7ff fe3c 	bl	8002476 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002812:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002816:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002822:	f004 f81b 	bl	800685c <HAL_TIMEx_ConfigBreakDeadTime>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800282c:	f7ff fe23 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002830:	4803      	ldr	r0, [pc, #12]	@ (8002840 <MX_TIM1_Init+0x13c>)
 8002832:	f000 f929 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 8002836:	bf00      	nop
 8002838:	3758      	adds	r7, #88	@ 0x58
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000ab0 	.word	0x20000ab0
 8002844:	40012c00 	.word	0x40012c00

08002848 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285c:	463b      	mov	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002866:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800286a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 800286c:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <MX_TIM2_Init+0x98>)
 800286e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002872:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <MX_TIM2_Init+0x98>)
 800287c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002880:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <MX_TIM2_Init+0x98>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800288e:	4814      	ldr	r0, [pc, #80]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002890:	f002 ff44 	bl	800571c <HAL_TIM_Base_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800289a:	f7ff fdec 	bl	8002476 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028a4:	f107 0308 	add.w	r3, r7, #8
 80028a8:	4619      	mov	r1, r3
 80028aa:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <MX_TIM2_Init+0x98>)
 80028ac:	f003 fbe6 	bl	800607c <HAL_TIM_ConfigClockSource>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028b6:	f7ff fdde 	bl	8002476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c2:	463b      	mov	r3, r7
 80028c4:	4619      	mov	r1, r3
 80028c6:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <MX_TIM2_Init+0x98>)
 80028c8:	f003 ff6a 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80028d2:	f7ff fdd0 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000af8 	.word	0x20000af8

080028e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	@ 0x30
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	2224      	movs	r2, #36	@ 0x24
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fa6c 	bl	8007dd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002900:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <MX_TIM3_Init+0xa0>)
 8002902:	4a21      	ldr	r2, [pc, #132]	@ (8002988 <MX_TIM3_Init+0xa4>)
 8002904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002906:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <MX_TIM3_Init+0xa0>)
 8002908:	2201      	movs	r2, #1
 800290a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <MX_TIM3_Init+0xa0>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002912:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <MX_TIM3_Init+0xa0>)
 8002914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291a:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <MX_TIM3_Init+0xa0>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <MX_TIM3_Init+0xa0>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002926:	2301      	movs	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002936:	230a      	movs	r3, #10
 8002938:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800293e:	2301      	movs	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002942:	2300      	movs	r3, #0
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002946:	230a      	movs	r3, #10
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4619      	mov	r1, r3
 8002950:	480c      	ldr	r0, [pc, #48]	@ (8002984 <MX_TIM3_Init+0xa0>)
 8002952:	f003 f917 	bl	8005b84 <HAL_TIM_Encoder_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800295c:	f7ff fd8b 	bl	8002476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	@ (8002984 <MX_TIM3_Init+0xa0>)
 800296e:	f003 ff17 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002978:	f7ff fd7d 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	@ 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000b40 	.word	0x20000b40
 8002988:	40000400 	.word	0x40000400

0800298c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_TIM_Base_MspInit+0x78>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d114      	bne.n	80029c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <HAL_TIM_Base_MspInit+0x7c>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_TIM_Base_MspInit+0x7c>)
 80029a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029a8:	6193      	str	r3, [r2, #24]
 80029aa:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <HAL_TIM_Base_MspInit+0x7c>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2102      	movs	r1, #2
 80029ba:	201b      	movs	r0, #27
 80029bc:	f000 fd0f 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80029c0:	201b      	movs	r0, #27
 80029c2:	f000 fd28 	bl	8003416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029c6:	e018      	b.n	80029fa <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d0:	d113      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <HAL_TIM_Base_MspInit+0x7c>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a08 <HAL_TIM_Base_MspInit+0x7c>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	61d3      	str	r3, [r2, #28]
 80029de:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_TIM_Base_MspInit+0x7c>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2103      	movs	r1, #3
 80029ee:	201c      	movs	r0, #28
 80029f0:	f000 fcf5 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029f4:	201c      	movs	r0, #28
 80029f6:	f000 fd0e 	bl	8003416 <HAL_NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <HAL_TIM_Encoder_MspInit+0x70>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d123      	bne.n	8002a74 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	61d3      	str	r3, [r2, #28]
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a5c:	23c0      	movs	r3, #192	@ 0xc0
 8002a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x78>)
 8002a70:	f000 ff8e 	bl	8003990 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010800 	.word	0x40010800

08002a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <HAL_TIM_MspPostInit+0x5c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d118      	bne.n	8002ada <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	@ (8002aec <HAL_TIM_MspPostInit+0x64>)
 8002ad6:	f000 ff5b 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010800 	.word	0x40010800

08002af0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <MX_USART1_UART_Init+0x50>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b28:	f003 fefb 	bl	8006922 <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b32:	f7ff fca0 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000b88 	.word	0x20000b88
 8002b40:	40013800 	.word	0x40013800

08002b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	@ 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c94 <HAL_UART_MspInit+0x150>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f040 8092 	bne.w	8002c8a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b66:	4b4c      	ldr	r3, [pc, #304]	@ (8002c98 <HAL_UART_MspInit+0x154>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002c98 <HAL_UART_MspInit+0x154>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b70:	6193      	str	r3, [r2, #24]
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_UART_MspInit+0x154>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	4b46      	ldr	r3, [pc, #280]	@ (8002c98 <HAL_UART_MspInit+0x154>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	4a45      	ldr	r2, [pc, #276]	@ (8002c98 <HAL_UART_MspInit+0x154>)
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	6193      	str	r3, [r2, #24]
 8002b8a:	4b43      	ldr	r3, [pc, #268]	@ (8002c98 <HAL_UART_MspInit+0x154>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b96:	2340      	movs	r3, #64	@ 0x40
 8002b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	483c      	ldr	r0, [pc, #240]	@ (8002c9c <HAL_UART_MspInit+0x158>)
 8002baa:	f000 fef1 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4836      	ldr	r0, [pc, #216]	@ (8002c9c <HAL_UART_MspInit+0x158>)
 8002bc2:	f000 fee5 	bl	8003990 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002bc6:	4b36      	ldr	r3, [pc, #216]	@ (8002ca0 <HAL_UART_MspInit+0x15c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bdc:	4a30      	ldr	r2, [pc, #192]	@ (8002ca0 <HAL_UART_MspInit+0x15c>)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002be4:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <HAL_UART_MspInit+0x164>)
 8002be6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c00:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c06:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c12:	4824      	ldr	r0, [pc, #144]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002c14:	f000 fc1a 	bl	800344c <HAL_DMA_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002c1e:	f7ff fc2a 	bl	8002476 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002c26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c28:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca4 <HAL_UART_MspInit+0x160>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_UART_MspInit+0x16c>)
 8002c32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c36:	2210      	movs	r2, #16
 8002c38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4c:	4b17      	ldr	r3, [pc, #92]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c5e:	4813      	ldr	r0, [pc, #76]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c60:	f000 fbf4 	bl	800344c <HAL_DMA_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002c6a:	f7ff fc04 	bl	8002476 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c74:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <HAL_UART_MspInit+0x168>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2025      	movs	r0, #37	@ 0x25
 8002c80:	f000 fbad 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c84:	2025      	movs	r0, #37	@ 0x25
 8002c86:	f000 fbc6 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	@ 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	20000bd0 	.word	0x20000bd0
 8002ca8:	40020058 	.word	0x40020058
 8002cac:	20000c14 	.word	0x20000c14
 8002cb0:	40020044 	.word	0x40020044

08002cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cb4:	f7ff fd20 	bl	80026f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480b      	ldr	r0, [pc, #44]	@ (8002ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cba:	490c      	ldr	r1, [pc, #48]	@ (8002cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
   str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a09      	ldr	r2, [pc, #36]	@ (8002cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cd0:	4c09      	ldr	r4, [pc, #36]	@ (8002cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cde:	f005 f8cb 	bl	8007e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce2:	f7ff fb25 	bl	8002330 <main>
  bx lr
 8002ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002cf0:	08008e8c 	.word	0x08008e8c
  ldr r2, =_sbss
 8002cf4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002cf8:	20000da8 	.word	0x20000da8

08002cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC1_2_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d04:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <HAL_Init+0x28>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a07      	ldr	r2, [pc, #28]	@ (8002d28 <HAL_Init+0x28>)
 8002d0a:	f043 0310 	orr.w	r3, r3, #16
 8002d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 fb59 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d16:	200f      	movs	r0, #15
 8002d18:	f000 f808 	bl	8002d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1c:	f7ff fbb2 	bl	8002484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40022000 	.word	0x40022000

08002d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_InitTick+0x54>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0x58>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fb71 	bl	8003432 <HAL_SYSTICK_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00e      	b.n	8002d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d80a      	bhi.n	8002d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d60:	2200      	movs	r2, #0
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f000 fb39 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d6c:	4a06      	ldr	r2, [pc, #24]	@ (8002d88 <HAL_InitTick+0x5c>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000008 	.word	0x20000008
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_IncTick+0x1c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_IncTick+0x20>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a03      	ldr	r2, [pc, #12]	@ (8002dac <HAL_IncTick+0x20>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000008 	.word	0x20000008
 8002dac:	20000c58 	.word	0x20000c58

08002db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b02      	ldr	r3, [pc, #8]	@ (8002dc0 <HAL_GetTick+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000c58 	.word	0x20000c58

08002dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d005      	beq.n	8002dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_Delay+0x44>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dea:	bf00      	nop
 8002dec:	f7ff ffe0 	bl	8002db0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d8f7      	bhi.n	8002dec <HAL_Delay+0x28>
  {
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008

08002e0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0be      	b.n	8002fac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe ffd4 	bl	8001df8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9ab 	bl	80031ac <ADC_ConversionStop_Disable>
 8002e56:	4603      	mov	r3, r0
 8002e58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 8099 	bne.w	8002f9a <HAL_ADC_Init+0x18e>
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 8095 	bne.w	8002f9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e78:	f023 0302 	bic.w	r3, r3, #2
 8002e7c:	f043 0202 	orr.w	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7b1b      	ldrb	r3, [r3, #12]
 8002e92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d003      	beq.n	8002eae <HAL_ADC_Init+0xa2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <HAL_ADC_Init+0xa8>
 8002eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb2:	e000      	b.n	8002eb6 <HAL_ADC_Init+0xaa>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7d1b      	ldrb	r3, [r3, #20]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d119      	bne.n	8002ef8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7b1b      	ldrb	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	035a      	lsls	r2, r3, #13
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e00b      	b.n	8002ef8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <HAL_ADC_Init+0x1a8>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f28:	d003      	beq.n	8002f32 <HAL_ADC_Init+0x126>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d104      	bne.n	8002f3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	051b      	lsls	r3, r3, #20
 8002f3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <HAL_ADC_Init+0x1ac>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10b      	bne.n	8002f78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	f043 0201 	orr.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f76:	e018      	b.n	8002faa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	f023 0312 	bic.w	r3, r3, #18
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f98:	e007      	b.n	8002faa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	ffe1f7fd 	.word	0xffe1f7fd
 8002fb8:	ff1f0efe 	.word	0xff1f0efe

08002fbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0dc      	b.n	8003196 <HAL_ADC_ConfigChannel+0x1da>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d81c      	bhi.n	8003026 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b05      	subs	r3, #5
 8002ffe:	221f      	movs	r2, #31
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	4019      	ands	r1, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b05      	subs	r3, #5
 8003018:	fa00 f203 	lsl.w	r2, r0, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34
 8003024:	e03c      	b.n	80030a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d81c      	bhi.n	8003068 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b23      	subs	r3, #35	@ 0x23
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	4019      	ands	r1, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b23      	subs	r3, #35	@ 0x23
 800305a:	fa00 f203 	lsl.w	r2, r0, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
 8003066:	e01b      	b.n	80030a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	@ 0x41
 800307a:	221f      	movs	r2, #31
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	4019      	ands	r1, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b41      	subs	r3, #65	@ 0x41
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d91c      	bls.n	80030e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68d9      	ldr	r1, [r3, #12]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	3b1e      	subs	r3, #30
 80030ba:	2207      	movs	r2, #7
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4019      	ands	r1, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6898      	ldr	r0, [r3, #8]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	3b1e      	subs	r3, #30
 80030d4:	fa00 f203 	lsl.w	r2, r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	e019      	b.n	8003116 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6919      	ldr	r1, [r3, #16]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	2207      	movs	r2, #7
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	4019      	ands	r1, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6898      	ldr	r0, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d003      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003122:	2b11      	cmp	r3, #17
 8003124:	d132      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d125      	bne.n	800317c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d126      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800314c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b10      	cmp	r3, #16
 8003154:	d11a      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003156:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	0c9a      	lsrs	r2, r3, #18
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800316c:	e002      	b.n	8003174 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3b01      	subs	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f9      	bne.n	800316e <HAL_ADC_ConfigChannel+0x1b2>
 800317a:	e007      	b.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012400 	.word	0x40012400
 80031a4:	20000000 	.word	0x20000000
 80031a8:	431bde83 	.word	0x431bde83

080031ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12e      	bne.n	8003224 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031d6:	f7ff fdeb 	bl	8002db0 <HAL_GetTick>
 80031da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031dc:	e01b      	b.n	8003216 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031de:	f7ff fde7 	bl	8002db0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d914      	bls.n	8003216 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10d      	bne.n	8003216 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d0dc      	beq.n	80031de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <__NVIC_EnableIRQ+0x34>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	@ (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff90 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff2d 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f0:	f7ff ff42 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff90 	bl	8003320 <NVIC_EncodePriority>
 8003400:	4602      	mov	r2, r0
 8003402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff5f 	bl	80032cc <__NVIC_SetPriority>
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff35 	bl	8003294 <__NVIC_EnableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffa2 	bl	8003384 <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e043      	b.n	80034ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <HAL_DMA_Init+0xa8>)
 800346a:	4413      	add	r3, r2
 800346c:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <HAL_DMA_Init+0xac>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	009a      	lsls	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1f      	ldr	r2, [pc, #124]	@ (80034fc <HAL_DMA_Init+0xb0>)
 800347e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003496:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800349a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	bffdfff8 	.word	0xbffdfff8
 80034f8:	cccccccd 	.word	0xcccccccd
 80034fc:	40020000 	.word	0x40020000

08003500 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Start_IT+0x20>
 800351c:	2302      	movs	r3, #2
 800351e:	e04b      	b.n	80035b8 <HAL_DMA_Start_IT+0xb8>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d13a      	bne.n	80035aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f9eb 	bl	8003934 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 020e 	orr.w	r2, r2, #14
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e00f      	b.n	8003598 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0204 	bic.w	r2, r2, #4
 8003586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 020a 	orr.w	r2, r2, #10
 8003596:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e005      	b.n	80035b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
 80035b4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e020      	b.n	800362c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 020e 	bic.w	r2, r2, #14
 80035f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
	...

08003638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d005      	beq.n	800365c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	e051      	b.n	8003700 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020e 	bic.w	r2, r2, #14
 800366a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a22      	ldr	r2, [pc, #136]	@ (800370c <HAL_DMA_Abort_IT+0xd4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d029      	beq.n	80036da <HAL_DMA_Abort_IT+0xa2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a21      	ldr	r2, [pc, #132]	@ (8003710 <HAL_DMA_Abort_IT+0xd8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x9e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <HAL_DMA_Abort_IT+0xdc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01a      	beq.n	80036d0 <HAL_DMA_Abort_IT+0x98>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1e      	ldr	r2, [pc, #120]	@ (8003718 <HAL_DMA_Abort_IT+0xe0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_Abort_IT+0x92>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	@ (800371c <HAL_DMA_Abort_IT+0xe4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00a      	beq.n	80036c4 <HAL_DMA_Abort_IT+0x8c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003720 <HAL_DMA_Abort_IT+0xe8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d102      	bne.n	80036be <HAL_DMA_Abort_IT+0x86>
 80036b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036bc:	e00e      	b.n	80036dc <HAL_DMA_Abort_IT+0xa4>
 80036be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c2:	e00b      	b.n	80036dc <HAL_DMA_Abort_IT+0xa4>
 80036c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036c8:	e008      	b.n	80036dc <HAL_DMA_Abort_IT+0xa4>
 80036ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036ce:	e005      	b.n	80036dc <HAL_DMA_Abort_IT+0xa4>
 80036d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036d4:	e002      	b.n	80036dc <HAL_DMA_Abort_IT+0xa4>
 80036d6:	2310      	movs	r3, #16
 80036d8:	e000      	b.n	80036dc <HAL_DMA_Abort_IT+0xa4>
 80036da:	2301      	movs	r3, #1
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_DMA_Abort_IT+0xec>)
 80036de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
    } 
  }
  return status;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40020008 	.word	0x40020008
 8003710:	4002001c 	.word	0x4002001c
 8003714:	40020030 	.word	0x40020030
 8003718:	40020044 	.word	0x40020044
 800371c:	40020058 	.word	0x40020058
 8003720:	4002006c 	.word	0x4002006c
 8003724:	40020000 	.word	0x40020000

08003728 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2204      	movs	r2, #4
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d04f      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xc8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04a      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a66      	ldr	r2, [pc, #408]	@ (8003918 <HAL_DMA_IRQHandler+0x1f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d029      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xae>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a65      	ldr	r2, [pc, #404]	@ (800391c <HAL_DMA_IRQHandler+0x1f4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0xaa>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a63      	ldr	r2, [pc, #396]	@ (8003920 <HAL_DMA_IRQHandler+0x1f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01a      	beq.n	80037cc <HAL_DMA_IRQHandler+0xa4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a62      	ldr	r2, [pc, #392]	@ (8003924 <HAL_DMA_IRQHandler+0x1fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d012      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x9e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a60      	ldr	r2, [pc, #384]	@ (8003928 <HAL_DMA_IRQHandler+0x200>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00a      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x98>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5f      	ldr	r2, [pc, #380]	@ (800392c <HAL_DMA_IRQHandler+0x204>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d102      	bne.n	80037ba <HAL_DMA_IRQHandler+0x92>
 80037b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037b8:	e00e      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80037be:	e00b      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037c4:	e008      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037ca:	e005      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037d0:	e002      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037d2:	2340      	movs	r3, #64	@ 0x40
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037d6:	2304      	movs	r3, #4
 80037d8:	4a55      	ldr	r2, [pc, #340]	@ (8003930 <HAL_DMA_IRQHandler+0x208>)
 80037da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8094 	beq.w	800390e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037ee:	e08e      	b.n	800390e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	2202      	movs	r2, #2
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d056      	beq.n	80038ae <HAL_DMA_IRQHandler+0x186>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d051      	beq.n	80038ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 020a 	bic.w	r2, r2, #10
 8003826:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <HAL_DMA_IRQHandler+0x1f0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d029      	beq.n	800388e <HAL_DMA_IRQHandler+0x166>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a37      	ldr	r2, [pc, #220]	@ (800391c <HAL_DMA_IRQHandler+0x1f4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMA_IRQHandler+0x162>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a35      	ldr	r2, [pc, #212]	@ (8003920 <HAL_DMA_IRQHandler+0x1f8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x15c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a34      	ldr	r2, [pc, #208]	@ (8003924 <HAL_DMA_IRQHandler+0x1fc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d012      	beq.n	800387e <HAL_DMA_IRQHandler+0x156>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_DMA_IRQHandler+0x200>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00a      	beq.n	8003878 <HAL_DMA_IRQHandler+0x150>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a31      	ldr	r2, [pc, #196]	@ (800392c <HAL_DMA_IRQHandler+0x204>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d102      	bne.n	8003872 <HAL_DMA_IRQHandler+0x14a>
 800386c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003870:	e00e      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 8003872:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003876:	e00b      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 8003878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800387c:	e008      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 800387e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003882:	e005      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 8003884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003888:	e002      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 800388a:	2320      	movs	r3, #32
 800388c:	e000      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 800388e:	2302      	movs	r3, #2
 8003890:	4a27      	ldr	r2, [pc, #156]	@ (8003930 <HAL_DMA_IRQHandler+0x208>)
 8003892:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d034      	beq.n	800390e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038ac:	e02f      	b.n	800390e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	2208      	movs	r2, #8
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d028      	beq.n	8003910 <HAL_DMA_IRQHandler+0x1e8>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 020e 	bic.w	r2, r2, #14
 80038d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
    }
  }
  return;
 800390e:	bf00      	nop
 8003910:	bf00      	nop
}
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40020008 	.word	0x40020008
 800391c:	4002001c 	.word	0x4002001c
 8003920:	40020030 	.word	0x40020030
 8003924:	40020044 	.word	0x40020044
 8003928:	40020058 	.word	0x40020058
 800392c:	4002006c 	.word	0x4002006c
 8003930:	40020000 	.word	0x40020000

08003934 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b10      	cmp	r3, #16
 8003960:	d108      	bne.n	8003974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003972:	e007      	b.n	8003984 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
	...

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b480      	push	{r7}
 8003992:	b08b      	sub	sp, #44	@ 0x2c
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a2:	e169      	b.n	8003c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039a4:	2201      	movs	r2, #1
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f040 8158 	bne.w	8003c72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a9a      	ldr	r2, [pc, #616]	@ (8003c30 <HAL_GPIO_Init+0x2a0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d05e      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039cc:	4a98      	ldr	r2, [pc, #608]	@ (8003c30 <HAL_GPIO_Init+0x2a0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d875      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039d2:	4a98      	ldr	r2, [pc, #608]	@ (8003c34 <HAL_GPIO_Init+0x2a4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d058      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039d8:	4a96      	ldr	r2, [pc, #600]	@ (8003c34 <HAL_GPIO_Init+0x2a4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d86f      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039de:	4a96      	ldr	r2, [pc, #600]	@ (8003c38 <HAL_GPIO_Init+0x2a8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d052      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039e4:	4a94      	ldr	r2, [pc, #592]	@ (8003c38 <HAL_GPIO_Init+0x2a8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d869      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039ea:	4a94      	ldr	r2, [pc, #592]	@ (8003c3c <HAL_GPIO_Init+0x2ac>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d04c      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039f0:	4a92      	ldr	r2, [pc, #584]	@ (8003c3c <HAL_GPIO_Init+0x2ac>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d863      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039f6:	4a92      	ldr	r2, [pc, #584]	@ (8003c40 <HAL_GPIO_Init+0x2b0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d046      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039fc:	4a90      	ldr	r2, [pc, #576]	@ (8003c40 <HAL_GPIO_Init+0x2b0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d85d      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 8003a02:	2b12      	cmp	r3, #18
 8003a04:	d82a      	bhi.n	8003a5c <HAL_GPIO_Init+0xcc>
 8003a06:	2b12      	cmp	r3, #18
 8003a08:	d859      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <HAL_GPIO_Init+0x80>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a8b 	.word	0x08003a8b
 8003a14:	08003a65 	.word	0x08003a65
 8003a18:	08003a77 	.word	0x08003a77
 8003a1c:	08003ab9 	.word	0x08003ab9
 8003a20:	08003abf 	.word	0x08003abf
 8003a24:	08003abf 	.word	0x08003abf
 8003a28:	08003abf 	.word	0x08003abf
 8003a2c:	08003abf 	.word	0x08003abf
 8003a30:	08003abf 	.word	0x08003abf
 8003a34:	08003abf 	.word	0x08003abf
 8003a38:	08003abf 	.word	0x08003abf
 8003a3c:	08003abf 	.word	0x08003abf
 8003a40:	08003abf 	.word	0x08003abf
 8003a44:	08003abf 	.word	0x08003abf
 8003a48:	08003abf 	.word	0x08003abf
 8003a4c:	08003abf 	.word	0x08003abf
 8003a50:	08003abf 	.word	0x08003abf
 8003a54:	08003a6d 	.word	0x08003a6d
 8003a58:	08003a81 	.word	0x08003a81
 8003a5c:	4a79      	ldr	r2, [pc, #484]	@ (8003c44 <HAL_GPIO_Init+0x2b4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a62:	e02c      	b.n	8003abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	623b      	str	r3, [r7, #32]
          break;
 8003a6a:	e029      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	623b      	str	r3, [r7, #32]
          break;
 8003a74:	e024      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	623b      	str	r3, [r7, #32]
          break;
 8003a7e:	e01f      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	330c      	adds	r3, #12
 8003a86:	623b      	str	r3, [r7, #32]
          break;
 8003a88:	e01a      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a92:	2304      	movs	r3, #4
 8003a94:	623b      	str	r3, [r7, #32]
          break;
 8003a96:	e013      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	611a      	str	r2, [r3, #16]
          break;
 8003aaa:	e009      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aac:	2308      	movs	r3, #8
 8003aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	615a      	str	r2, [r3, #20]
          break;
 8003ab6:	e003      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	623b      	str	r3, [r7, #32]
          break;
 8003abc:	e000      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          break;
 8003abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2bff      	cmp	r3, #255	@ 0xff
 8003ac4:	d801      	bhi.n	8003aca <HAL_GPIO_Init+0x13a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	e001      	b.n	8003ace <HAL_GPIO_Init+0x13e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2bff      	cmp	r3, #255	@ 0xff
 8003ad4:	d802      	bhi.n	8003adc <HAL_GPIO_Init+0x14c>
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	e002      	b.n	8003ae2 <HAL_GPIO_Init+0x152>
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	3b08      	subs	r3, #8
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	210f      	movs	r1, #15
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	431a      	orrs	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80b1 	beq.w	8003c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b10:	4b4d      	ldr	r3, [pc, #308]	@ (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	4a4c      	ldr	r2, [pc, #304]	@ (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6193      	str	r3, [r2, #24]
 8003b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b28:	4a48      	ldr	r2, [pc, #288]	@ (8003c4c <HAL_GPIO_Init+0x2bc>)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3302      	adds	r3, #2
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a40      	ldr	r2, [pc, #256]	@ (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_GPIO_Init+0x1ec>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3f      	ldr	r2, [pc, #252]	@ (8003c54 <HAL_GPIO_Init+0x2c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_GPIO_Init+0x1e8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c58 <HAL_GPIO_Init+0x2c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <HAL_GPIO_Init+0x1e4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	@ (8003c5c <HAL_GPIO_Init+0x2cc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_GPIO_Init+0x1e0>
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e006      	b.n	8003b7e <HAL_GPIO_Init+0x1ee>
 8003b70:	2304      	movs	r3, #4
 8003b72:	e004      	b.n	8003b7e <HAL_GPIO_Init+0x1ee>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e002      	b.n	8003b7e <HAL_GPIO_Init+0x1ee>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_GPIO_Init+0x1ee>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b80:	f002 0203 	and.w	r2, r2, #3
 8003b84:	0092      	lsls	r2, r2, #2
 8003b86:	4093      	lsls	r3, r2
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b8e:	492f      	ldr	r1, [pc, #188]	@ (8003c4c <HAL_GPIO_Init+0x2bc>)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d006      	beq.n	8003bb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	492c      	ldr	r1, [pc, #176]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]
 8003bb4:	e006      	b.n	8003bc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	4928      	ldr	r1, [pc, #160]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d006      	beq.n	8003bde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bd0:	4b23      	ldr	r3, [pc, #140]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	4922      	ldr	r1, [pc, #136]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60cb      	str	r3, [r1, #12]
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bde:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	491e      	ldr	r1, [pc, #120]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4918      	ldr	r1, [pc, #96]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	4914      	ldr	r1, [pc, #80]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d021      	beq.n	8003c64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c20:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	490e      	ldr	r1, [pc, #56]	@ (8003c60 <HAL_GPIO_Init+0x2d0>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	e021      	b.n	8003c72 <HAL_GPIO_Init+0x2e2>
 8003c2e:	bf00      	nop
 8003c30:	10320000 	.word	0x10320000
 8003c34:	10310000 	.word	0x10310000
 8003c38:	10220000 	.word	0x10220000
 8003c3c:	10210000 	.word	0x10210000
 8003c40:	10120000 	.word	0x10120000
 8003c44:	10110000 	.word	0x10110000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010800 	.word	0x40010800
 8003c54:	40010c00 	.word	0x40010c00
 8003c58:	40011000 	.word	0x40011000
 8003c5c:	40011400 	.word	0x40011400
 8003c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <HAL_GPIO_Init+0x304>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	4909      	ldr	r1, [pc, #36]	@ (8003c94 <HAL_GPIO_Init+0x304>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	3301      	adds	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f47f ae8e 	bne.w	80039a4 <HAL_GPIO_Init+0x14>
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	372c      	adds	r7, #44	@ 0x2c
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	40010400 	.word	0x40010400

08003c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
 8003cb4:	e001      	b.n	8003cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	807b      	strh	r3, [r7, #2]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cd6:	787b      	ldrb	r3, [r7, #1]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ce2:	e003      	b.n	8003cec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	041a      	lsls	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	611a      	str	r2, [r3, #16]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d08:	887a      	ldrh	r2, [r7, #2]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	041a      	lsls	r2, r3, #16
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	400b      	ands	r3, r1
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e12b      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe f9e6 	bl	8002120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f001 fbca 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8003d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a81      	ldr	r2, [pc, #516]	@ (8003f9c <HAL_I2C_Init+0x274>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d807      	bhi.n	8003dac <HAL_I2C_Init+0x84>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a80      	ldr	r2, [pc, #512]	@ (8003fa0 <HAL_I2C_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bf94      	ite	ls
 8003da4:	2301      	movls	r3, #1
 8003da6:	2300      	movhi	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e006      	b.n	8003dba <HAL_I2C_Init+0x92>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a7d      	ldr	r2, [pc, #500]	@ (8003fa4 <HAL_I2C_Init+0x27c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0e7      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a78      	ldr	r2, [pc, #480]	@ (8003fa8 <HAL_I2C_Init+0x280>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f9c <HAL_I2C_Init+0x274>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d802      	bhi.n	8003dfc <HAL_I2C_Init+0xd4>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	e009      	b.n	8003e10 <HAL_I2C_Init+0xe8>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	4a69      	ldr	r2, [pc, #420]	@ (8003fac <HAL_I2C_Init+0x284>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	3301      	adds	r3, #1
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	495c      	ldr	r1, [pc, #368]	@ (8003f9c <HAL_I2C_Init+0x274>)
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d819      	bhi.n	8003e64 <HAL_I2C_Init+0x13c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e59      	subs	r1, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e44:	400b      	ands	r3, r1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_I2C_Init+0x138>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e59      	subs	r1, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	e051      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e60:	2304      	movs	r3, #4
 8003e62:	e04f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <HAL_I2C_Init+0x168>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e012      	b.n	8003eb6 <HAL_I2C_Init+0x18e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e58      	subs	r0, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	0099      	lsls	r1, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Init+0x196>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e022      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_I2C_Init+0x1bc>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e58      	subs	r0, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	440b      	add	r3, r1
 8003ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee2:	e00f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6809      	ldr	r1, [r1, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6911      	ldr	r1, [r2, #16]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	000186a0 	.word	0x000186a0
 8003fa0:	001e847f 	.word	0x001e847f
 8003fa4:	003d08ff 	.word	0x003d08ff
 8003fa8:	431bde83 	.word	0x431bde83
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	817b      	strh	r3, [r7, #10]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7fe fef4 	bl	8002db0 <HAL_GetTick>
 8003fc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	f040 80e0 	bne.w	8004198 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2319      	movs	r3, #25
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4970      	ldr	r1, [pc, #448]	@ (80041a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fc9e 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0d3      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_Master_Transmit+0x50>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0cc      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d007      	beq.n	8004026 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004034:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2221      	movs	r2, #33	@ 0x21
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2210      	movs	r2, #16
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	893a      	ldrh	r2, [r7, #8]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a50      	ldr	r2, [pc, #320]	@ (80041a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004068:	8979      	ldrh	r1, [r7, #10]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fb08 	bl	8004684 <I2C_MasterRequestWrite>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e08d      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004094:	e066      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fd5c 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d107      	bne.n	80040be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06b      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11b      	bne.n	8004138 <HAL_I2C_Master_Transmit+0x188>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	6a39      	ldr	r1, [r7, #32]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fd53 	bl	8004be8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	2b04      	cmp	r3, #4
 800414e:	d107      	bne.n	8004160 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e01a      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d194      	bne.n	8004096 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	00100002 	.word	0x00100002
 80041a8:	ffff0000 	.word	0xffff0000

080041ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	@ 0x30
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	461a      	mov	r2, r3
 80041b8:	460b      	mov	r3, r1
 80041ba:	817b      	strh	r3, [r7, #10]
 80041bc:	4613      	mov	r3, r2
 80041be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c4:	f7fe fdf4 	bl	8002db0 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	f040 824b 	bne.w	800466e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2319      	movs	r3, #25
 80041de:	2201      	movs	r2, #1
 80041e0:	497f      	ldr	r1, [pc, #508]	@ (80043e0 <HAL_I2C_Master_Receive+0x234>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fb9e 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	e23e      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_I2C_Master_Receive+0x54>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e237      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d007      	beq.n	8004226 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2222      	movs	r2, #34	@ 0x22
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2210      	movs	r2, #16
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	893a      	ldrh	r2, [r7, #8]
 8004256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a5f      	ldr	r2, [pc, #380]	@ (80043e4 <HAL_I2C_Master_Receive+0x238>)
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004268:	8979      	ldrh	r1, [r7, #10]
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fa8a 	bl	8004788 <I2C_MasterRequestRead>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e1f8      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d113      	bne.n	80042ae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e1cc      	b.n	8004648 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d11e      	bne.n	80042f4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042c6:	b672      	cpsid	i
}
 80042c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042f0:	b662      	cpsie	i
}
 80042f2:	e035      	b.n	8004360 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d11e      	bne.n	800433a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800430a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800430c:	b672      	cpsid	i
}
 800430e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004336:	b662      	cpsie	i
}
 8004338:	e012      	b.n	8004360 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004360:	e172      	b.n	8004648 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004366:	2b03      	cmp	r3, #3
 8004368:	f200 811f 	bhi.w	80045aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	2b01      	cmp	r3, #1
 8004372:	d123      	bne.n	80043bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004376:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fc7d 	bl	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e173      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043ba:	e145      	b.n	8004648 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d152      	bne.n	800446a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	2200      	movs	r2, #0
 80043cc:	4906      	ldr	r1, [pc, #24]	@ (80043e8 <HAL_I2C_Master_Receive+0x23c>)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 faa8 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e148      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
 80043de:	bf00      	nop
 80043e0:	00100002 	.word	0x00100002
 80043e4:	ffff0000 	.word	0xffff0000
 80043e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80043ec:	b672      	cpsid	i
}
 80043ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004432:	b662      	cpsie	i
}
 8004434:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004468:	e0ee      	b.n	8004648 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	4981      	ldr	r1, [pc, #516]	@ (8004678 <HAL_I2C_Master_Receive+0x4cc>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fa55 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0f5      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004492:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004494:	b672      	cpsid	i
}
 8004496:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ca:	4b6c      	ldr	r3, [pc, #432]	@ (800467c <HAL_I2C_Master_Receive+0x4d0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	08db      	lsrs	r3, r3, #3
 80044d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004680 <HAL_I2C_Master_Receive+0x4d4>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	0a1a      	lsrs	r2, r3, #8
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00da      	lsls	r2, r3, #3
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d118      	bne.n	8004522 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004512:	b662      	cpsie	i
}
 8004514:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0a6      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d1d9      	bne.n	80044e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004572:	b662      	cpsie	i
}
 8004574:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a8:	e04e      	b.n	8004648 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fb62 	bl	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e058      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d124      	bne.n	8004648 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004614:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	f47f ae88 	bne.w	8004362 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3728      	adds	r7, #40	@ 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010004 	.word	0x00010004
 800467c:	20000000 	.word	0x20000000
 8004680:	14f8b589 	.word	0x14f8b589

08004684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	460b      	mov	r3, r1
 8004692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d006      	beq.n	80046ae <I2C_MasterRequestWrite+0x2a>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d003      	beq.n	80046ae <I2C_MasterRequestWrite+0x2a>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046ac:	d108      	bne.n	80046c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e00b      	b.n	80046d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	2b12      	cmp	r3, #18
 80046c6:	d107      	bne.n	80046d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f91d 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fe:	d103      	bne.n	8004708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e035      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004714:	d108      	bne.n	8004728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	e01b      	b.n	8004760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	11db      	asrs	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f063 030f 	orn	r3, r3, #15
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	490e      	ldr	r1, [pc, #56]	@ (8004780 <I2C_MasterRequestWrite+0xfc>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f966 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e010      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4907      	ldr	r1, [pc, #28]	@ (8004784 <I2C_MasterRequestWrite+0x100>)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f956 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	00010008 	.word	0x00010008
 8004784:	00010002 	.word	0x00010002

08004788 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d006      	beq.n	80047c2 <I2C_MasterRequestRead+0x3a>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d003      	beq.n	80047c2 <I2C_MasterRequestRead+0x3a>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047c0:	d108      	bne.n	80047d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e00b      	b.n	80047ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	2b11      	cmp	r3, #17
 80047da:	d107      	bne.n	80047ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f893 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004812:	d103      	bne.n	800481c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800481a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e079      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004828:	d108      	bne.n	800483c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800482a:	897b      	ldrh	r3, [r7, #10]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]
 800483a:	e05f      	b.n	80048fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800483c:	897b      	ldrh	r3, [r7, #10]
 800483e:	11db      	asrs	r3, r3, #7
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0306 	and.w	r3, r3, #6
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f063 030f 	orn	r3, r3, #15
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4930      	ldr	r1, [pc, #192]	@ (800491c <I2C_MasterRequestRead+0x194>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f8dc 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e054      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4929      	ldr	r1, [pc, #164]	@ (8004920 <I2C_MasterRequestRead+0x198>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8cc 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e044      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f831 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d6:	d103      	bne.n	80048e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e017      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048e4:	897b      	ldrh	r3, [r7, #10]
 80048e6:	11db      	asrs	r3, r3, #7
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 0306 	and.w	r3, r3, #6
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f063 030e 	orn	r3, r3, #14
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4907      	ldr	r1, [pc, #28]	@ (8004920 <I2C_MasterRequestRead+0x198>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f888 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	00010008 	.word	0x00010008
 8004920:	00010002 	.word	0x00010002

08004924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004934:	e048      	b.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d044      	beq.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fe fa37 	bl	8002db0 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d139      	bne.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10d      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0x56>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	e00c      	b.n	8004994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	43da      	mvns	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	429a      	cmp	r2, r3
 8004998:	d116      	bne.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e023      	b.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10d      	bne.n	80049ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	43da      	mvns	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4013      	ands	r3, r2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	e00c      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	43da      	mvns	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d093      	beq.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a26:	e071      	b.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a36:	d123      	bne.n	8004a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e067      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d041      	beq.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a88:	f7fe f992 	bl	8002db0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d136      	bne.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10c      	bne.n	8004ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e00b      	b.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	43da      	mvns	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4013      	ands	r3, r2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e021      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d10c      	bne.n	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	43da      	mvns	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e00b      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f47f af6d 	bne.w	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b64:	e034      	b.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f8e3 	bl	8004d32 <I2C_IsAcknowledgeFailed>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e034      	b.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d028      	beq.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fe f917 	bl	8002db0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11d      	bne.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ba0:	d016      	beq.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e007      	b.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d1c3      	bne.n	8004b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bf4:	e034      	b.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f89b 	bl	8004d32 <I2C_IsAcknowledgeFailed>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e034      	b.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d028      	beq.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fe f8cf 	bl	8002db0 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11d      	bne.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d016      	beq.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e007      	b.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d1c3      	bne.n	8004bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c84:	e049      	b.n	8004d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d119      	bne.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e030      	b.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc8:	f7fe f872 	bl	8002db0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11d      	bne.n	8004d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d016      	beq.n	8004d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d24:	2b40      	cmp	r3, #64	@ 0x40
 8004d26:	d1ae      	bne.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d48:	d11b      	bne.n	8004d82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f043 0204 	orr.w	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e272      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8087 	beq.w	8004ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004db0:	4b92      	ldr	r3, [pc, #584]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d00c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d112      	bne.n	8004dee <HAL_RCC_OscConfig+0x5e>
 8004dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd4:	d10b      	bne.n	8004dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd6:	4b89      	ldr	r3, [pc, #548]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d06c      	beq.n	8004ebc <HAL_RCC_OscConfig+0x12c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d168      	bne.n	8004ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e24c      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_OscConfig+0x76>
 8004df8:	4b80      	ldr	r3, [pc, #512]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a7f      	ldr	r2, [pc, #508]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e02e      	b.n	8004e64 <HAL_RCC_OscConfig+0xd4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x98>
 8004e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7a      	ldr	r2, [pc, #488]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b78      	ldr	r3, [pc, #480]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a77      	ldr	r2, [pc, #476]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e01d      	b.n	8004e64 <HAL_RCC_OscConfig+0xd4>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0xbc>
 8004e32:	4b72      	ldr	r3, [pc, #456]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a71      	ldr	r2, [pc, #452]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a6e      	ldr	r2, [pc, #440]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCC_OscConfig+0xd4>
 8004e4c:	4b6b      	ldr	r3, [pc, #428]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a6a      	ldr	r2, [pc, #424]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b68      	ldr	r3, [pc, #416]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a67      	ldr	r2, [pc, #412]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d013      	beq.n	8004e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fd ffa0 	bl	8002db0 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e74:	f7fd ff9c 	bl	8002db0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	@ 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e200      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b5d      	ldr	r3, [pc, #372]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0xe4>
 8004e92:	e014      	b.n	8004ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fd ff8c 	bl	8002db0 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fd ff88 	bl	8002db0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1ec      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eae:	4b53      	ldr	r3, [pc, #332]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x10c>
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d063      	beq.n	8004f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eca:	4b4c      	ldr	r3, [pc, #304]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ed6:	4b49      	ldr	r3, [pc, #292]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d11c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x18c>
 8004ee2:	4b46      	ldr	r3, [pc, #280]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d116      	bne.n	8004f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_RCC_OscConfig+0x176>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e1c0      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b3d      	ldr	r3, [pc, #244]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4939      	ldr	r1, [pc, #228]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	e03a      	b.n	8004f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f24:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <HAL_RCC_OscConfig+0x270>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd ff41 	bl	8002db0 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f32:	f7fd ff3d 	bl	8002db0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1a1      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f44:	4b2d      	ldr	r3, [pc, #180]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f50:	4b2a      	ldr	r3, [pc, #168]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4927      	ldr	r1, [pc, #156]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f66:	4b26      	ldr	r3, [pc, #152]	@ (8005000 <HAL_RCC_OscConfig+0x270>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fd ff20 	bl	8002db0 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fd ff1c 	bl	8002db0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e180      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d03a      	beq.n	8005014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d019      	beq.n	8004fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa6:	4b17      	ldr	r3, [pc, #92]	@ (8005004 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fac:	f7fd ff00 	bl	8002db0 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fefc 	bl	8002db0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e160      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f000 face 	bl	8005574 <RCC_Delay>
 8004fd8:	e01c      	b.n	8005014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fda:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe0:	f7fd fee6 	bl	8002db0 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe6:	e00f      	b.n	8005008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe8:	f7fd fee2 	bl	8002db0 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d908      	bls.n	8005008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e146      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000
 8005000:	42420000 	.word	0x42420000
 8005004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005008:	4b92      	ldr	r3, [pc, #584]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e9      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a6 	beq.w	800516e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005026:	4b8b      	ldr	r3, [pc, #556]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10d      	bne.n	800504e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005032:	4b88      	ldr	r3, [pc, #544]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4a87      	ldr	r2, [pc, #540]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800503c:	61d3      	str	r3, [r2, #28]
 800503e:	4b85      	ldr	r3, [pc, #532]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504e:	4b82      	ldr	r3, [pc, #520]	@ (8005258 <HAL_RCC_OscConfig+0x4c8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d118      	bne.n	800508c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505a:	4b7f      	ldr	r3, [pc, #508]	@ (8005258 <HAL_RCC_OscConfig+0x4c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a7e      	ldr	r2, [pc, #504]	@ (8005258 <HAL_RCC_OscConfig+0x4c8>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005066:	f7fd fea3 	bl	8002db0 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506e:	f7fd fe9f 	bl	8002db0 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b64      	cmp	r3, #100	@ 0x64
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e103      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	4b75      	ldr	r3, [pc, #468]	@ (8005258 <HAL_RCC_OscConfig+0x4c8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d106      	bne.n	80050a2 <HAL_RCC_OscConfig+0x312>
 8005094:	4b6f      	ldr	r3, [pc, #444]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a6e      	ldr	r2, [pc, #440]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	6213      	str	r3, [r2, #32]
 80050a0:	e02d      	b.n	80050fe <HAL_RCC_OscConfig+0x36e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0x334>
 80050aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4a69      	ldr	r2, [pc, #420]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	6213      	str	r3, [r2, #32]
 80050b6:	4b67      	ldr	r3, [pc, #412]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4a66      	ldr	r2, [pc, #408]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	f023 0304 	bic.w	r3, r3, #4
 80050c0:	6213      	str	r3, [r2, #32]
 80050c2:	e01c      	b.n	80050fe <HAL_RCC_OscConfig+0x36e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	d10c      	bne.n	80050e6 <HAL_RCC_OscConfig+0x356>
 80050cc:	4b61      	ldr	r3, [pc, #388]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4a60      	ldr	r2, [pc, #384]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	f043 0304 	orr.w	r3, r3, #4
 80050d6:	6213      	str	r3, [r2, #32]
 80050d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	6213      	str	r3, [r2, #32]
 80050e4:	e00b      	b.n	80050fe <HAL_RCC_OscConfig+0x36e>
 80050e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	6213      	str	r3, [r2, #32]
 80050f2:	4b58      	ldr	r3, [pc, #352]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	4a57      	ldr	r2, [pc, #348]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d015      	beq.n	8005132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005106:	f7fd fe53 	bl	8002db0 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510c:	e00a      	b.n	8005124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510e:	f7fd fe4f 	bl	8002db0 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e0b1      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005124:	4b4b      	ldr	r3, [pc, #300]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ee      	beq.n	800510e <HAL_RCC_OscConfig+0x37e>
 8005130:	e014      	b.n	800515c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005132:	f7fd fe3d 	bl	8002db0 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fd fe39 	bl	8002db0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e09b      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	4b40      	ldr	r3, [pc, #256]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ee      	bne.n	800513a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4b3c      	ldr	r3, [pc, #240]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	4a3b      	ldr	r2, [pc, #236]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8087 	beq.w	8005286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005178:	4b36      	ldr	r3, [pc, #216]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 030c 	and.w	r3, r3, #12
 8005180:	2b08      	cmp	r3, #8
 8005182:	d061      	beq.n	8005248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d146      	bne.n	800521a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b33      	ldr	r3, [pc, #204]	@ (800525c <HAL_RCC_OscConfig+0x4cc>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7fd fe0d 	bl	8002db0 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fd fe09 	bl	8002db0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e06d      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ac:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d108      	bne.n	80051d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051c2:	4b24      	ldr	r3, [pc, #144]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4921      	ldr	r1, [pc, #132]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a19      	ldr	r1, [r3, #32]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	430b      	orrs	r3, r1
 80051e6:	491b      	ldr	r1, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ec:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x4cc>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f2:	f7fd fddd 	bl	8002db0 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fa:	f7fd fdd9 	bl	8002db0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e03d      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800520c:	4b11      	ldr	r3, [pc, #68]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x46a>
 8005218:	e035      	b.n	8005286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	4b10      	ldr	r3, [pc, #64]	@ (800525c <HAL_RCC_OscConfig+0x4cc>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fd fdc6 	bl	8002db0 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005228:	f7fd fdc2 	bl	8002db0 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e026      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCC_OscConfig+0x4c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x498>
 8005246:	e01e      	b.n	8005286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d107      	bne.n	8005260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e019      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
 8005254:	40021000 	.word	0x40021000
 8005258:	40007000 	.word	0x40007000
 800525c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_RCC_OscConfig+0x500>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	429a      	cmp	r2, r3
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000

08005294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0d0      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d910      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b67      	ldr	r3, [pc, #412]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 0207 	bic.w	r2, r3, #7
 80052be:	4965      	ldr	r1, [pc, #404]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b63      	ldr	r3, [pc, #396]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0b8      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d020      	beq.n	8005326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f0:	4b59      	ldr	r3, [pc, #356]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4a58      	ldr	r2, [pc, #352]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 80052f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005308:	4b53      	ldr	r3, [pc, #332]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4a52      	ldr	r2, [pc, #328]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b50      	ldr	r3, [pc, #320]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	494d      	ldr	r1, [pc, #308]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005322:	4313      	orrs	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d040      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d115      	bne.n	8005372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07f      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005352:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e073      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005362:	4b3d      	ldr	r3, [pc, #244]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06b      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005372:	4b39      	ldr	r3, [pc, #228]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f023 0203 	bic.w	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4936      	ldr	r1, [pc, #216]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005384:	f7fd fd14 	bl	8002db0 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538c:	f7fd fd10 	bl	8002db0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e053      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f003 020c 	and.w	r2, r3, #12
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d1eb      	bne.n	800538c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b4:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d210      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 0207 	bic.w	r2, r3, #7
 80053ca:	4922      	ldr	r1, [pc, #136]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e032      	b.n	800544a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f0:	4b19      	ldr	r3, [pc, #100]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4916      	ldr	r1, [pc, #88]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800540e:	4b12      	ldr	r3, [pc, #72]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	490e      	ldr	r1, [pc, #56]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005422:	f000 f821 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 8005426:	4602      	mov	r2, r0
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	490a      	ldr	r1, [pc, #40]	@ (800545c <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	5ccb      	ldrb	r3, [r1, r3]
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	4a09      	ldr	r2, [pc, #36]	@ (8005460 <HAL_RCC_ClockConfig+0x1cc>)
 800543c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_RCC_ClockConfig+0x1d0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fd fc72 	bl	8002d2c <HAL_InitTick>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40022000 	.word	0x40022000
 8005458:	40021000 	.word	0x40021000
 800545c:	08008e24 	.word	0x08008e24
 8005460:	20000000 	.word	0x20000000
 8005464:	20000004 	.word	0x20000004

08005468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005482:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x94>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b04      	cmp	r3, #4
 8005490:	d002      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x30>
 8005492:	2b08      	cmp	r3, #8
 8005494:	d003      	beq.n	800549e <HAL_RCC_GetSysClockFreq+0x36>
 8005496:	e027      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005498:	4b19      	ldr	r3, [pc, #100]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x98>)
 800549a:	613b      	str	r3, [r7, #16]
      break;
 800549c:	e027      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	0c9b      	lsrs	r3, r3, #18
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	4a17      	ldr	r2, [pc, #92]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d010      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054b6:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x94>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	0c5b      	lsrs	r3, r3, #17
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	4a11      	ldr	r2, [pc, #68]	@ (8005508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x98>)
 80054ca:	fb03 f202 	mul.w	r2, r3, r2
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e004      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a0c      	ldr	r2, [pc, #48]	@ (800550c <HAL_RCC_GetSysClockFreq+0xa4>)
 80054dc:	fb02 f303 	mul.w	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	613b      	str	r3, [r7, #16]
      break;
 80054e6:	e002      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x98>)
 80054ea:	613b      	str	r3, [r7, #16]
      break;
 80054ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ee:	693b      	ldr	r3, [r7, #16]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000
 8005500:	007a1200 	.word	0x007a1200
 8005504:	08008e3c 	.word	0x08008e3c
 8005508:	08008e4c 	.word	0x08008e4c
 800550c:	003d0900 	.word	0x003d0900

08005510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005514:	4b02      	ldr	r3, [pc, #8]	@ (8005520 <HAL_RCC_GetHCLKFreq+0x10>)
 8005516:	681b      	ldr	r3, [r3, #0]
}
 8005518:	4618      	mov	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr
 8005520:	20000000 	.word	0x20000000

08005524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005528:	f7ff fff2 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4903      	ldr	r1, [pc, #12]	@ (8005548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	08008e34 	.word	0x08008e34

0800554c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005550:	f7ff ffde 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	0adb      	lsrs	r3, r3, #11
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	@ (8005570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	08008e34 	.word	0x08008e34

08005574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800557c:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <RCC_Delay+0x34>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0a      	ldr	r2, [pc, #40]	@ (80055ac <RCC_Delay+0x38>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0a5b      	lsrs	r3, r3, #9
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005590:	bf00      	nop
  }
  while (Delay --);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	60fa      	str	r2, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f9      	bne.n	8005590 <RCC_Delay+0x1c>
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	20000000 	.word	0x20000000
 80055ac:	10624dd3 	.word	0x10624dd3

080055b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d07d      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	61d3      	str	r3, [r2, #28]
 80055e8:	4b49      	ldr	r3, [pc, #292]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	4b46      	ldr	r3, [pc, #280]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d118      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005604:	4b43      	ldr	r3, [pc, #268]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a42      	ldr	r2, [pc, #264]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800560a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800560e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005610:	f7fd fbce 	bl	8002db0 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	e008      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005618:	f7fd fbca 	bl	8002db0 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	@ 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e06d      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562a:	4b3a      	ldr	r3, [pc, #232]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005636:	4b36      	ldr	r3, [pc, #216]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d02e      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d027      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005654:	4b2e      	ldr	r3, [pc, #184]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800565e:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005664:	4b2c      	ldr	r3, [pc, #176]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800566a:	4a29      	ldr	r2, [pc, #164]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d014      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567a:	f7fd fb99 	bl	8002db0 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005680:	e00a      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fd fb95 	bl	8002db0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e036      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005698:	4b1d      	ldr	r3, [pc, #116]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ee      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4917      	ldr	r1, [pc, #92]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4a13      	ldr	r2, [pc, #76]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	490b      	ldr	r1, [pc, #44]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f2:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	4904      	ldr	r1, [pc, #16]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	40007000 	.word	0x40007000
 8005718:	42420440 	.word	0x42420440

0800571c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e041      	b.n	80057b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fd f922 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f000 fd70 	bl	8006240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e032      	b.n	800583a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a18      	ldr	r2, [pc, #96]	@ (8005844 <HAL_TIM_Base_Start+0x88>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <HAL_TIM_Base_Start+0x48>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ee:	d009      	beq.n	8005804 <HAL_TIM_Base_Start+0x48>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a14      	ldr	r2, [pc, #80]	@ (8005848 <HAL_TIM_Base_Start+0x8c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_Base_Start+0x48>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a13      	ldr	r2, [pc, #76]	@ (800584c <HAL_TIM_Base_Start+0x90>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d111      	bne.n	8005828 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d010      	beq.n	8005838 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	e007      	b.n	8005838 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	40012c00 	.word	0x40012c00
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800

08005850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e03a      	b.n	80058de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_TIM_Base_Start_IT+0x98>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x58>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005892:	d009      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x58>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <HAL_TIM_Base_Start_IT+0x9c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x58>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a13      	ldr	r2, [pc, #76]	@ (80058f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d111      	bne.n	80058cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d010      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	e007      	b.n	80058dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800

080058f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e041      	b.n	800598a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f839 	bl	8005992 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f000 fc84 	bl	8006240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <HAL_TIM_OC_Start_IT+0x28>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e022      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x6e>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d109      	bne.n	80059e6 <HAL_TIM_OC_Start_IT+0x42>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e015      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x6e>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d109      	bne.n	8005a00 <HAL_TIM_OC_Start_IT+0x5c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	bf14      	ite	ne
 80059f8:	2301      	movne	r3, #1
 80059fa:	2300      	moveq	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e008      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x6e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0a9      	b.n	8005b6e <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_OC_Start_IT+0x86>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a28:	e013      	b.n	8005a52 <HAL_TIM_OC_Start_IT+0xae>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d104      	bne.n	8005a3a <HAL_TIM_OC_Start_IT+0x96>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a38:	e00b      	b.n	8005a52 <HAL_TIM_OC_Start_IT+0xae>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_OC_Start_IT+0xa6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a48:	e003      	b.n	8005a52 <HAL_TIM_OC_Start_IT+0xae>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	d841      	bhi.n	8005adc <HAL_TIM_OC_Start_IT+0x138>
 8005a58:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <HAL_TIM_OC_Start_IT+0xbc>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a95 	.word	0x08005a95
 8005a64:	08005add 	.word	0x08005add
 8005a68:	08005add 	.word	0x08005add
 8005a6c:	08005add 	.word	0x08005add
 8005a70:	08005aa7 	.word	0x08005aa7
 8005a74:	08005add 	.word	0x08005add
 8005a78:	08005add 	.word	0x08005add
 8005a7c:	08005add 	.word	0x08005add
 8005a80:	08005ab9 	.word	0x08005ab9
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	08005acb 	.word	0x08005acb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0202 	orr.w	r2, r2, #2
 8005aa2:	60da      	str	r2, [r3, #12]
      break;
 8005aa4:	e01d      	b.n	8005ae2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0204 	orr.w	r2, r2, #4
 8005ab4:	60da      	str	r2, [r3, #12]
      break;
 8005ab6:	e014      	b.n	8005ae2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0208 	orr.w	r2, r2, #8
 8005ac6:	60da      	str	r2, [r3, #12]
      break;
 8005ac8:	e00b      	b.n	8005ae2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0210 	orr.w	r2, r2, #16
 8005ad8:	60da      	str	r2, [r3, #12]
      break;
 8005ada:	e002      	b.n	8005ae2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d141      	bne.n	8005b6c <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fe31 	bl	8006758 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1f      	ldr	r2, [pc, #124]	@ (8005b78 <HAL_TIM_OC_Start_IT+0x1d4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d107      	bne.n	8005b10 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a18      	ldr	r2, [pc, #96]	@ (8005b78 <HAL_TIM_OC_Start_IT+0x1d4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_TIM_OC_Start_IT+0x194>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d009      	beq.n	8005b38 <HAL_TIM_OC_Start_IT+0x194>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a14      	ldr	r2, [pc, #80]	@ (8005b7c <HAL_TIM_OC_Start_IT+0x1d8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_TIM_OC_Start_IT+0x194>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <HAL_TIM_OC_Start_IT+0x1dc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d111      	bne.n	8005b5c <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b06      	cmp	r3, #6
 8005b48:	d010      	beq.n	8005b6c <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	e007      	b.n	8005b6c <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800

08005b84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e093      	b.n	8005cc0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fc ff2d 	bl	8002a0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bc8:	f023 0307 	bic.w	r3, r3, #7
 8005bcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f000 fb31 	bl	8006240 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	4313      	orrs	r3, r2
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c24:	f023 030c 	bic.w	r3, r3, #12
 8005c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	4313      	orrs	r3, r2
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	011a      	lsls	r2, r3, #4
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	031b      	lsls	r3, r3, #12
 8005c54:	4313      	orrs	r3, r2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ce0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ce8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d110      	bne.n	8005d1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d102      	bne.n	8005d04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cfe:	7b7b      	ldrb	r3, [r7, #13]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d001      	beq.n	8005d08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e069      	b.n	8005ddc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d18:	e031      	b.n	8005d7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d110      	bne.n	8005d42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d102      	bne.n	8005d2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d26:	7b3b      	ldrb	r3, [r7, #12]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e055      	b.n	8005ddc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d40:	e01d      	b.n	8005d7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d108      	bne.n	8005d5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d4e:	7b7b      	ldrb	r3, [r7, #13]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d102      	bne.n	8005d5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d54:	7b3b      	ldrb	r3, [r7, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d001      	beq.n	8005d5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e03e      	b.n	8005ddc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_TIM_Encoder_Start+0xc4>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d008      	beq.n	8005d9c <HAL_TIM_Encoder_Start+0xd4>
 8005d8a:	e00f      	b.n	8005dac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2201      	movs	r2, #1
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fcdf 	bl	8006758 <TIM_CCxChannelCmd>
      break;
 8005d9a:	e016      	b.n	8005dca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2201      	movs	r2, #1
 8005da2:	2104      	movs	r1, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fcd7 	bl	8006758 <TIM_CCxChannelCmd>
      break;
 8005daa:	e00e      	b.n	8005dca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2201      	movs	r2, #1
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fccf 	bl	8006758 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	2104      	movs	r1, #4
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fcc8 	bl	8006758 <TIM_CCxChannelCmd>
      break;
 8005dc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d020      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0202 	mvn.w	r2, #2
 8005e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9eb 	bl	800620a <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fb fdd2 	bl	80019e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f9ed 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d020      	beq.n	8005e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01b      	beq.n	8005e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0204 	mvn.w	r2, #4
 8005e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f9c5 	bl	800620a <HAL_TIM_IC_CaptureCallback>
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fb fdac 	bl	80019e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f9c7 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d020      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0208 	mvn.w	r2, #8
 8005eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f99f 	bl	800620a <HAL_TIM_IC_CaptureCallback>
 8005ecc:	e005      	b.n	8005eda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fb fd86 	bl	80019e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f9a1 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0210 	mvn.w	r2, #16
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2208      	movs	r2, #8
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f979 	bl	800620a <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fd60 	bl	80019e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f97b 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0201 	mvn.w	r2, #1
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb fa3e 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fcce 	bl	8006910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00c      	beq.n	8005f98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f94b 	bl	800622e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00c      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0220 	mvn.w	r2, #32
 8005fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fca1 	bl	80068fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e048      	b.n	8006074 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d839      	bhi.n	8006064 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	0800602d 	.word	0x0800602d
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08006065 	.word	0x08006065
 8006004:	08006065 	.word	0x08006065
 8006008:	0800603b 	.word	0x0800603b
 800600c:	08006065 	.word	0x08006065
 8006010:	08006065 	.word	0x08006065
 8006014:	08006065 	.word	0x08006065
 8006018:	08006049 	.word	0x08006049
 800601c:	08006065 	.word	0x08006065
 8006020:	08006065 	.word	0x08006065
 8006024:	08006065 	.word	0x08006065
 8006028:	08006057 	.word	0x08006057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f972 	bl	800631c <TIM_OC1_SetConfig>
      break;
 8006038:	e017      	b.n	800606a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 f9d1 	bl	80063e8 <TIM_OC2_SetConfig>
      break;
 8006046:	e010      	b.n	800606a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fa34 	bl	80064bc <TIM_OC3_SetConfig>
      break;
 8006054:	e009      	b.n	800606a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fa97 	bl	8006590 <TIM_OC4_SetConfig>
      break;
 8006062:	e002      	b.n	800606a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
      break;
 8006068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIM_ConfigClockSource+0x1c>
 8006094:	2302      	movs	r3, #2
 8006096:	e0b4      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x186>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d0:	d03e      	beq.n	8006150 <HAL_TIM_ConfigClockSource+0xd4>
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d6:	f200 8087 	bhi.w	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060de:	f000 8086 	beq.w	80061ee <HAL_TIM_ConfigClockSource+0x172>
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e6:	d87f      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b70      	cmp	r3, #112	@ 0x70
 80060ea:	d01a      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0xa6>
 80060ec:	2b70      	cmp	r3, #112	@ 0x70
 80060ee:	d87b      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f0:	2b60      	cmp	r3, #96	@ 0x60
 80060f2:	d050      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x11a>
 80060f4:	2b60      	cmp	r3, #96	@ 0x60
 80060f6:	d877      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b50      	cmp	r3, #80	@ 0x50
 80060fa:	d03c      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0xfa>
 80060fc:	2b50      	cmp	r3, #80	@ 0x50
 80060fe:	d873      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b40      	cmp	r3, #64	@ 0x40
 8006102:	d058      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006104:	2b40      	cmp	r3, #64	@ 0x40
 8006106:	d86f      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b30      	cmp	r3, #48	@ 0x30
 800610a:	d064      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 800610c:	2b30      	cmp	r3, #48	@ 0x30
 800610e:	d86b      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b20      	cmp	r3, #32
 8006112:	d060      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006114:	2b20      	cmp	r3, #32
 8006116:	d867      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d05c      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 800611c:	2b10      	cmp	r3, #16
 800611e:	d05a      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	e062      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006132:	f000 faf2 	bl	800671a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	609a      	str	r2, [r3, #8]
      break;
 800614e:	e04f      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006160:	f000 fadb 	bl	800671a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006172:	609a      	str	r2, [r3, #8]
      break;
 8006174:	e03c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	461a      	mov	r2, r3
 8006184:	f000 fa52 	bl	800662c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2150      	movs	r1, #80	@ 0x50
 800618e:	4618      	mov	r0, r3
 8006190:	f000 faa9 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 8006194:	e02c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 fa70 	bl	8006688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2160      	movs	r1, #96	@ 0x60
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fa99 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e01c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fa32 	bl	800662c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2140      	movs	r1, #64	@ 0x40
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fa89 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 80061d4:	e00c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f000 fa80 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 80061e6:	e003      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e000      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <TIM_Base_SetConfig+0xd0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x30>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x30>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a2c      	ldr	r2, [pc, #176]	@ (8006314 <TIM_Base_SetConfig+0xd4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x30>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a2b      	ldr	r2, [pc, #172]	@ (8006318 <TIM_Base_SetConfig+0xd8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <TIM_Base_SetConfig+0xd0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_Base_SetConfig+0x62>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006290:	d007      	beq.n	80062a2 <TIM_Base_SetConfig+0x62>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1f      	ldr	r2, [pc, #124]	@ (8006314 <TIM_Base_SetConfig+0xd4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_Base_SetConfig+0x62>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1e      	ldr	r2, [pc, #120]	@ (8006318 <TIM_Base_SetConfig+0xd8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a0d      	ldr	r2, [pc, #52]	@ (8006310 <TIM_Base_SetConfig+0xd0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d103      	bne.n	80062e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]
  }
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40012c00 	.word	0x40012c00
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800

0800631c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f023 0201 	bic.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f023 0302 	bic.w	r3, r3, #2
 8006364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <TIM_OC1_SetConfig+0xc8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10c      	bne.n	8006392 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f023 0308 	bic.w	r3, r3, #8
 800637e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f023 0304 	bic.w	r3, r3, #4
 8006390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a13      	ldr	r2, [pc, #76]	@ (80063e4 <TIM_OC1_SetConfig+0xc8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d111      	bne.n	80063be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00

080063e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f023 0210 	bic.w	r2, r3, #16
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800641e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0320 	bic.w	r3, r3, #32
 8006432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <TIM_OC2_SetConfig+0xd0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10d      	bne.n	8006464 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800644e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <TIM_OC2_SetConfig+0xd0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d113      	bne.n	8006494 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	40012c00 	.word	0x40012c00

080064bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <TIM_OC3_SetConfig+0xd0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10d      	bne.n	8006536 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a14      	ldr	r2, [pc, #80]	@ (800658c <TIM_OC3_SetConfig+0xd0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d113      	bne.n	8006566 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00

08006590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	031b      	lsls	r3, r3, #12
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a0f      	ldr	r2, [pc, #60]	@ (8006628 <TIM_OC4_SetConfig+0x98>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d109      	bne.n	8006604 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	019b      	lsls	r3, r3, #6
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00

0800662c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0201 	bic.w	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 030a 	bic.w	r3, r3, #10
 8006668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0210 	bic.w	r2, r3, #16
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	031b      	lsls	r3, r3, #12
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	621a      	str	r2, [r3, #32]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	f043 0307 	orr.w	r3, r3, #7
 8006708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006734:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	021a      	lsls	r2, r3, #8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	431a      	orrs	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4313      	orrs	r3, r2
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	609a      	str	r2, [r3, #8]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2201      	movs	r2, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	43db      	mvns	r3, r3
 800677a:	401a      	ands	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e046      	b.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006804:	d009      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a12      	ldr	r2, [pc, #72]	@ (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a10      	ldr	r2, [pc, #64]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10c      	bne.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800

0800685c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006874:	2302      	movs	r3, #2
 8006876:	e03d      	b.n	80068f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr

08006922 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e042      	b.n	80069ba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fc f8fb 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2224      	movs	r2, #36	@ 0x24
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006964:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 ff7a 	bl	8007860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800697a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800698a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800699a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b08a      	sub	sp, #40	@ 0x28
 80069c6:	af02      	add	r7, sp, #8
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d175      	bne.n	8006ace <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_UART_Transmit+0x2c>
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e06e      	b.n	8006ad0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2221      	movs	r2, #33	@ 0x21
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a00:	f7fc f9d6 	bl	8002db0 <HAL_GetTick>
 8006a04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1a:	d108      	bne.n	8006a2e <HAL_UART_Transmit+0x6c>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e003      	b.n	8006a36 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a36:	e02e      	b.n	8006a96 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2180      	movs	r1, #128	@ 0x80
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fc56 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e03a      	b.n	8006ad0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	3302      	adds	r3, #2
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e007      	b.n	8006a88 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	3301      	adds	r3, #1
 8006a86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1cb      	bne.n	8006a38 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2140      	movs	r1, #64	@ 0x40
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fc22 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e006      	b.n	8006ad0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	@ 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d146      	bne.n	8006b80 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e03f      	b.n	8006b82 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	461a      	mov	r2, r3
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fc47 	bl	80073a8 <UART_Start_Receive_DMA>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d125      	bne.n	8006b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b28:	2300      	movs	r3, #0
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f043 0310 	orr.w	r3, r3, #16
 8006b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b60:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6a39      	ldr	r1, [r7, #32]
 8006b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006b72:	e002      	b.n	8006b7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8006b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b7e:	e000      	b.n	8006b82 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3730      	adds	r7, #48	@ 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b0ba      	sub	sp, #232	@ 0xe8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10f      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x66>
 8006bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fd7a 	bl	80076e4 <UART_Receive_IT>
      return;
 8006bf0:	e25b      	b.n	80070aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 80de 	beq.w	8006db8 <HAL_UART_IRQHandler+0x22c>
 8006bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d106      	bne.n	8006c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80d1 	beq.w	8006db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_UART_IRQHandler+0xae>
 8006c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c32:	f043 0201 	orr.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <HAL_UART_IRQHandler+0xd2>
 8006c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	f043 0202 	orr.w	r2, r3, #2
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <HAL_UART_IRQHandler+0xf6>
 8006c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7a:	f043 0204 	orr.w	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d011      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x126>
 8006c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006caa:	f043 0208 	orr.w	r2, r3, #8
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 81f2 	beq.w	80070a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_UART_IRQHandler+0x14e>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fd05 	bl	80076e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_UART_IRQHandler+0x17a>
 8006cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d04f      	beq.n	8006da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fc0f 	bl	800752a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d041      	beq.n	8006d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3314      	adds	r3, #20
 8006d20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3314      	adds	r3, #20
 8006d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1d9      	bne.n	8006d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d72:	4a7e      	ldr	r2, [pc, #504]	@ (8006f6c <HAL_UART_IRQHandler+0x3e0>)
 8006d74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fc fc5c 	bl	8003638 <HAL_DMA_Abort_IT>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d016      	beq.n	8006db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	e00e      	b.n	8006db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9a5 	bl	80070e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9c:	e00a      	b.n	8006db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9a1 	bl	80070e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	e006      	b.n	8006db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f99d 	bl	80070e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006db2:	e175      	b.n	80070a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	bf00      	nop
    return;
 8006db6:	e173      	b.n	80070a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	f040 814f 	bne.w	8007060 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8148 	beq.w	8007060 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8141 	beq.w	8007060 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80b6 	beq.w	8006f70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8145 	beq.w	80070a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e22:	429a      	cmp	r2, r3
 8006e24:	f080 813e 	bcs.w	80070a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	f000 8088 	beq.w	8006f4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e68:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e74:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1d9      	bne.n	8006e3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006eac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006eb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e1      	bne.n	8006e88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ee8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006eea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006eee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e3      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f1c:	f023 0310 	bic.w	r3, r3, #16
 8006f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f2e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f30:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e3      	bne.n	8006f0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fc fb3a 	bl	80035c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fb f958 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f68:	e09c      	b.n	80070a4 <HAL_UART_IRQHandler+0x518>
 8006f6a:	bf00      	nop
 8006f6c:	080075ef 	.word	0x080075ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 808e 	beq.w	80070a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8089 	beq.w	80070a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006fba:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e3      	bne.n	8006f96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3314      	adds	r3, #20
 8006fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ff2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e3      	bne.n	8006fce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60fb      	str	r3, [r7, #12]
   return(result);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007038:	61fa      	str	r2, [r7, #28]
 800703a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	617b      	str	r3, [r7, #20]
   return(result);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e3      	bne.n	8007014 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fb f8dd 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800705e:	e023      	b.n	80070a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <HAL_UART_IRQHandler+0x4f4>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 facc 	bl	8007616 <UART_Transmit_IT>
    return;
 800707e:	e014      	b.n	80070aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00e      	beq.n	80070aa <HAL_UART_IRQHandler+0x51e>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb0b 	bl	80076b4 <UART_EndTransmit_IT>
    return;
 800709e:	e004      	b.n	80070aa <HAL_UART_IRQHandler+0x51e>
    return;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <HAL_UART_IRQHandler+0x51e>
      return;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <HAL_UART_IRQHandler+0x51e>
      return;
 80070a8:	bf00      	nop
  }
}
 80070aa:	37e8      	adds	r7, #232	@ 0xe8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b09c      	sub	sp, #112	@ 0x70
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d172      	bne.n	80071fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007116:	2200      	movs	r2, #0
 8007118:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800712a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800712c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800713a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800713c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e5      	bne.n	800711a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3314      	adds	r3, #20
 8007154:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800715e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	667b      	str	r3, [r7, #100]	@ 0x64
 8007166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800716e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800717c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3314      	adds	r3, #20
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	623b      	str	r3, [r7, #32]
   return(result);
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007198:	663b      	str	r3, [r7, #96]	@ 0x60
 800719a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80071a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e5      	bne.n	8007182 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b8:	2220      	movs	r2, #32
 80071ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d119      	bne.n	80071fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	330c      	adds	r3, #12
 80071cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f023 0310 	bic.w	r3, r3, #16
 80071dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	330c      	adds	r3, #12
 80071e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071e6:	61fa      	str	r2, [r7, #28]
 80071e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	69b9      	ldr	r1, [r7, #24]
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	617b      	str	r3, [r7, #20]
   return(result);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e5      	bne.n	80071c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071fc:	2200      	movs	r2, #0
 80071fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800720a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800720c:	4619      	mov	r1, r3
 800720e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007210:	f7fb f802 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007214:	e002      	b.n	800721c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007216:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007218:	f7ff ff53 	bl	80070c2 <HAL_UART_RxCpltCallback>
}
 800721c:	bf00      	nop
 800721e:	3770      	adds	r7, #112	@ 0x70
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	2b01      	cmp	r3, #1
 800723e:	d108      	bne.n	8007252 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	b29b      	uxth	r3, r3
 8007248:	4619      	mov	r1, r3
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7fa ffe4 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007250:	e002      	b.n	8007258 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff ff3e 	bl	80070d4 <HAL_UART_RxHalfCpltCallback>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007270:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727c:	2b00      	cmp	r3, #0
 800727e:	bf14      	ite	ne
 8007280:	2301      	movne	r3, #1
 8007282:	2300      	moveq	r3, #0
 8007284:	b2db      	uxtb	r3, r3
 8007286:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b21      	cmp	r3, #33	@ 0x21
 8007292:	d108      	bne.n	80072a6 <UART_DMAError+0x46>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80072a0:	68b8      	ldr	r0, [r7, #8]
 80072a2:	f000 f91b 	bl	80074dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b22      	cmp	r3, #34	@ 0x22
 80072c6:	d108      	bne.n	80072da <UART_DMAError+0x7a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2200      	movs	r2, #0
 80072d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	f000 f928 	bl	800752a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	f043 0210 	orr.w	r2, r3, #16
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072e6:	68b8      	ldr	r0, [r7, #8]
 80072e8:	f7ff fefd 	bl	80070e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	e03b      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d037      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fb fd4f 	bl	8002db0 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	6a3a      	ldr	r2, [r7, #32]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e03a      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d023      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b80      	cmp	r3, #128	@ 0x80
 800733a:	d020      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	d01d      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d116      	bne.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f8df 	bl	800752a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2208      	movs	r2, #8
 8007370:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e00f      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4013      	ands	r3, r2
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	429a      	cmp	r2, r3
 800739a:	d0b4      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b098      	sub	sp, #96	@ 0x60
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2222      	movs	r2, #34	@ 0x22
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	4a3e      	ldr	r2, [pc, #248]	@ (80074d0 <UART_Start_Receive_DMA+0x128>)
 80073d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073dc:	4a3d      	ldr	r2, [pc, #244]	@ (80074d4 <UART_Start_Receive_DMA+0x12c>)
 80073de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e4:	4a3c      	ldr	r2, [pc, #240]	@ (80074d8 <UART_Start_Receive_DMA+0x130>)
 80073e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ec:	2200      	movs	r2, #0
 80073ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	f7fc f87a 	bl	8003500 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d019      	beq.n	800745e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800743a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800744a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800744c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3314      	adds	r3, #20
 8007464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	657b      	str	r3, [r7, #84]	@ 0x54
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3314      	adds	r3, #20
 800747c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800747e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e5      	bne.n	800745e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	617b      	str	r3, [r7, #20]
   return(result);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80074b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6a39      	ldr	r1, [r7, #32]
 80074b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	61fb      	str	r3, [r7, #28]
   return(result);
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e5      	bne.n	8007492 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3760      	adds	r7, #96	@ 0x60
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	080070f9 	.word	0x080070f9
 80074d4:	08007225 	.word	0x08007225
 80074d8:	08007261 	.word	0x08007261

080074dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	@ 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	61ba      	str	r2, [r7, #24]
 8007506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6979      	ldr	r1, [r7, #20]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	613b      	str	r3, [r7, #16]
   return(result);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007520:	bf00      	nop
 8007522:	3724      	adds	r7, #36	@ 0x24
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800752a:	b480      	push	{r7}
 800752c:	b095      	sub	sp, #84	@ 0x54
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007552:	643a      	str	r2, [r7, #64]	@ 0x40
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3314      	adds	r3, #20
 800756c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	61fb      	str	r3, [r7, #28]
   return(result);
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3314      	adds	r3, #20
 8007584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d119      	bne.n	80075d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f023 0310 	bic.w	r3, r3, #16
 80075b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c2:	61ba      	str	r2, [r7, #24]
 80075c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6979      	ldr	r1, [r7, #20]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	613b      	str	r3, [r7, #16]
   return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075e4:	bf00      	nop
 80075e6:	3754      	adds	r7, #84	@ 0x54
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff fd6c 	bl	80070e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b21      	cmp	r3, #33	@ 0x21
 8007628:	d13e      	bne.n	80076a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007632:	d114      	bne.n	800765e <UART_Transmit_IT+0x48>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d110      	bne.n	800765e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007650:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	1c9a      	adds	r2, r3, #2
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	621a      	str	r2, [r3, #32]
 800765c:	e008      	b.n	8007670 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	1c59      	adds	r1, r3, #1
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6211      	str	r1, [r2, #32]
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29b      	uxth	r3, r3
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4619      	mov	r1, r3
 800767e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e000      	b.n	80076aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076a8:	2302      	movs	r3, #2
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fceb 	bl	80070b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08c      	sub	sp, #48	@ 0x30
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b22      	cmp	r3, #34	@ 0x22
 80076f6:	f040 80ae 	bne.w	8007856 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007702:	d117      	bne.n	8007734 <UART_Receive_IT+0x50>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d113      	bne.n	8007734 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800770c:	2300      	movs	r3, #0
 800770e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b29b      	uxth	r3, r3
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	b29a      	uxth	r2, r3
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	1c9a      	adds	r2, r3, #2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	629a      	str	r2, [r3, #40]	@ 0x28
 8007732:	e026      	b.n	8007782 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007746:	d007      	beq.n	8007758 <UART_Receive_IT+0x74>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <UART_Receive_IT+0x82>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e008      	b.n	8007778 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007772:	b2da      	uxtb	r2, r3
 8007774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007776:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29b      	uxth	r3, r3
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4619      	mov	r1, r3
 8007790:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007792:	2b00      	cmp	r3, #0
 8007794:	d15d      	bne.n	8007852 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0220 	bic.w	r2, r2, #32
 80077a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0201 	bic.w	r2, r2, #1
 80077c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d135      	bne.n	8007848 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	613b      	str	r3, [r7, #16]
   return(result);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f023 0310 	bic.w	r3, r3, #16
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	330c      	adds	r3, #12
 8007800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007802:	623a      	str	r2, [r7, #32]
 8007804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	69f9      	ldr	r1, [r7, #28]
 8007808:	6a3a      	ldr	r2, [r7, #32]
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e5      	bne.n	80077e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b10      	cmp	r3, #16
 8007822:	d10a      	bne.n	800783a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fa fce9 	bl	8002218 <HAL_UARTEx_RxEventCallback>
 8007846:	e002      	b.n	800784e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fc3a 	bl	80070c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e002      	b.n	8007858 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	e000      	b.n	8007858 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3730      	adds	r7, #48	@ 0x30
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800789a:	f023 030c 	bic.w	r3, r3, #12
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	430b      	orrs	r3, r1
 80078a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007974 <UART_SetConfig+0x114>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d103      	bne.n	80078d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80078c8:	f7fd fe40 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	e002      	b.n	80078d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078d0:	f7fd fe28 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 80078d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4613      	mov	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	009a      	lsls	r2, r3, #2
 80078e0:	441a      	add	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ec:	4a22      	ldr	r2, [pc, #136]	@ (8007978 <UART_SetConfig+0x118>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	0119      	lsls	r1, r3, #4
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	009a      	lsls	r2, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	fbb2 f2f3 	udiv	r2, r2, r3
 800790c:	4b1a      	ldr	r3, [pc, #104]	@ (8007978 <UART_SetConfig+0x118>)
 800790e:	fba3 0302 	umull	r0, r3, r3, r2
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	2064      	movs	r0, #100	@ 0x64
 8007916:	fb00 f303 	mul.w	r3, r0, r3
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	3332      	adds	r3, #50	@ 0x32
 8007920:	4a15      	ldr	r2, [pc, #84]	@ (8007978 <UART_SetConfig+0x118>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800792c:	4419      	add	r1, r3
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009a      	lsls	r2, r3, #2
 8007938:	441a      	add	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	fbb2 f2f3 	udiv	r2, r2, r3
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <UART_SetConfig+0x118>)
 8007946:	fba3 0302 	umull	r0, r3, r3, r2
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	2064      	movs	r0, #100	@ 0x64
 800794e:	fb00 f303 	mul.w	r3, r0, r3
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	3332      	adds	r3, #50	@ 0x32
 8007958:	4a07      	ldr	r2, [pc, #28]	@ (8007978 <UART_SetConfig+0x118>)
 800795a:	fba2 2303 	umull	r2, r3, r2, r3
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	f003 020f 	and.w	r2, r3, #15
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	440a      	add	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800796c:	bf00      	nop
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40013800 	.word	0x40013800
 8007978:	51eb851f 	.word	0x51eb851f

0800797c <std>:
 800797c:	2300      	movs	r3, #0
 800797e:	b510      	push	{r4, lr}
 8007980:	4604      	mov	r4, r0
 8007982:	e9c0 3300 	strd	r3, r3, [r0]
 8007986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800798a:	6083      	str	r3, [r0, #8]
 800798c:	8181      	strh	r1, [r0, #12]
 800798e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007990:	81c2      	strh	r2, [r0, #14]
 8007992:	6183      	str	r3, [r0, #24]
 8007994:	4619      	mov	r1, r3
 8007996:	2208      	movs	r2, #8
 8007998:	305c      	adds	r0, #92	@ 0x5c
 800799a:	f000 fa19 	bl	8007dd0 <memset>
 800799e:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <std+0x58>)
 80079a0:	6224      	str	r4, [r4, #32]
 80079a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80079a4:	4b0c      	ldr	r3, [pc, #48]	@ (80079d8 <std+0x5c>)
 80079a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079a8:	4b0c      	ldr	r3, [pc, #48]	@ (80079dc <std+0x60>)
 80079aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079ac:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <std+0x64>)
 80079ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <std+0x68>)
 80079b2:	429c      	cmp	r4, r3
 80079b4:	d006      	beq.n	80079c4 <std+0x48>
 80079b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079ba:	4294      	cmp	r4, r2
 80079bc:	d002      	beq.n	80079c4 <std+0x48>
 80079be:	33d0      	adds	r3, #208	@ 0xd0
 80079c0:	429c      	cmp	r4, r3
 80079c2:	d105      	bne.n	80079d0 <std+0x54>
 80079c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079cc:	f000 ba78 	b.w	8007ec0 <__retarget_lock_init_recursive>
 80079d0:	bd10      	pop	{r4, pc}
 80079d2:	bf00      	nop
 80079d4:	08007be1 	.word	0x08007be1
 80079d8:	08007c03 	.word	0x08007c03
 80079dc:	08007c3b 	.word	0x08007c3b
 80079e0:	08007c5f 	.word	0x08007c5f
 80079e4:	20000c5c 	.word	0x20000c5c

080079e8 <stdio_exit_handler>:
 80079e8:	4a02      	ldr	r2, [pc, #8]	@ (80079f4 <stdio_exit_handler+0xc>)
 80079ea:	4903      	ldr	r1, [pc, #12]	@ (80079f8 <stdio_exit_handler+0x10>)
 80079ec:	4803      	ldr	r0, [pc, #12]	@ (80079fc <stdio_exit_handler+0x14>)
 80079ee:	f000 b869 	b.w	8007ac4 <_fwalk_sglue>
 80079f2:	bf00      	nop
 80079f4:	2000000c 	.word	0x2000000c
 80079f8:	08008a25 	.word	0x08008a25
 80079fc:	2000001c 	.word	0x2000001c

08007a00 <cleanup_stdio>:
 8007a00:	6841      	ldr	r1, [r0, #4]
 8007a02:	4b0c      	ldr	r3, [pc, #48]	@ (8007a34 <cleanup_stdio+0x34>)
 8007a04:	b510      	push	{r4, lr}
 8007a06:	4299      	cmp	r1, r3
 8007a08:	4604      	mov	r4, r0
 8007a0a:	d001      	beq.n	8007a10 <cleanup_stdio+0x10>
 8007a0c:	f001 f80a 	bl	8008a24 <_fflush_r>
 8007a10:	68a1      	ldr	r1, [r4, #8]
 8007a12:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <cleanup_stdio+0x38>)
 8007a14:	4299      	cmp	r1, r3
 8007a16:	d002      	beq.n	8007a1e <cleanup_stdio+0x1e>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 f803 	bl	8008a24 <_fflush_r>
 8007a1e:	68e1      	ldr	r1, [r4, #12]
 8007a20:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <cleanup_stdio+0x3c>)
 8007a22:	4299      	cmp	r1, r3
 8007a24:	d004      	beq.n	8007a30 <cleanup_stdio+0x30>
 8007a26:	4620      	mov	r0, r4
 8007a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a2c:	f000 bffa 	b.w	8008a24 <_fflush_r>
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	bf00      	nop
 8007a34:	20000c5c 	.word	0x20000c5c
 8007a38:	20000cc4 	.word	0x20000cc4
 8007a3c:	20000d2c 	.word	0x20000d2c

08007a40 <global_stdio_init.part.0>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	4b0b      	ldr	r3, [pc, #44]	@ (8007a70 <global_stdio_init.part.0+0x30>)
 8007a44:	4c0b      	ldr	r4, [pc, #44]	@ (8007a74 <global_stdio_init.part.0+0x34>)
 8007a46:	4a0c      	ldr	r2, [pc, #48]	@ (8007a78 <global_stdio_init.part.0+0x38>)
 8007a48:	4620      	mov	r0, r4
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	2104      	movs	r1, #4
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f7ff ff94 	bl	800797c <std>
 8007a54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a58:	2201      	movs	r2, #1
 8007a5a:	2109      	movs	r1, #9
 8007a5c:	f7ff ff8e 	bl	800797c <std>
 8007a60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a64:	2202      	movs	r2, #2
 8007a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6a:	2112      	movs	r1, #18
 8007a6c:	f7ff bf86 	b.w	800797c <std>
 8007a70:	20000d94 	.word	0x20000d94
 8007a74:	20000c5c 	.word	0x20000c5c
 8007a78:	080079e9 	.word	0x080079e9

08007a7c <__sfp_lock_acquire>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	@ (8007a84 <__sfp_lock_acquire+0x8>)
 8007a7e:	f000 ba20 	b.w	8007ec2 <__retarget_lock_acquire_recursive>
 8007a82:	bf00      	nop
 8007a84:	20000d9d 	.word	0x20000d9d

08007a88 <__sfp_lock_release>:
 8007a88:	4801      	ldr	r0, [pc, #4]	@ (8007a90 <__sfp_lock_release+0x8>)
 8007a8a:	f000 ba1b 	b.w	8007ec4 <__retarget_lock_release_recursive>
 8007a8e:	bf00      	nop
 8007a90:	20000d9d 	.word	0x20000d9d

08007a94 <__sinit>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4604      	mov	r4, r0
 8007a98:	f7ff fff0 	bl	8007a7c <__sfp_lock_acquire>
 8007a9c:	6a23      	ldr	r3, [r4, #32]
 8007a9e:	b11b      	cbz	r3, 8007aa8 <__sinit+0x14>
 8007aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa4:	f7ff bff0 	b.w	8007a88 <__sfp_lock_release>
 8007aa8:	4b04      	ldr	r3, [pc, #16]	@ (8007abc <__sinit+0x28>)
 8007aaa:	6223      	str	r3, [r4, #32]
 8007aac:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <__sinit+0x2c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f5      	bne.n	8007aa0 <__sinit+0xc>
 8007ab4:	f7ff ffc4 	bl	8007a40 <global_stdio_init.part.0>
 8007ab8:	e7f2      	b.n	8007aa0 <__sinit+0xc>
 8007aba:	bf00      	nop
 8007abc:	08007a01 	.word	0x08007a01
 8007ac0:	20000d94 	.word	0x20000d94

08007ac4 <_fwalk_sglue>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	4607      	mov	r7, r0
 8007aca:	4688      	mov	r8, r1
 8007acc:	4614      	mov	r4, r2
 8007ace:	2600      	movs	r6, #0
 8007ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ad8:	d505      	bpl.n	8007ae6 <_fwalk_sglue+0x22>
 8007ada:	6824      	ldr	r4, [r4, #0]
 8007adc:	2c00      	cmp	r4, #0
 8007ade:	d1f7      	bne.n	8007ad0 <_fwalk_sglue+0xc>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d907      	bls.n	8007afc <_fwalk_sglue+0x38>
 8007aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007af0:	3301      	adds	r3, #1
 8007af2:	d003      	beq.n	8007afc <_fwalk_sglue+0x38>
 8007af4:	4629      	mov	r1, r5
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c0      	blx	r8
 8007afa:	4306      	orrs	r6, r0
 8007afc:	3568      	adds	r5, #104	@ 0x68
 8007afe:	e7e9      	b.n	8007ad4 <_fwalk_sglue+0x10>

08007b00 <iprintf>:
 8007b00:	b40f      	push	{r0, r1, r2, r3}
 8007b02:	b507      	push	{r0, r1, r2, lr}
 8007b04:	4906      	ldr	r1, [pc, #24]	@ (8007b20 <iprintf+0x20>)
 8007b06:	ab04      	add	r3, sp, #16
 8007b08:	6808      	ldr	r0, [r1, #0]
 8007b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b0e:	6881      	ldr	r1, [r0, #8]
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f000 fc5d 	bl	80083d0 <_vfiprintf_r>
 8007b16:	b003      	add	sp, #12
 8007b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b1c:	b004      	add	sp, #16
 8007b1e:	4770      	bx	lr
 8007b20:	20000018 	.word	0x20000018

08007b24 <_puts_r>:
 8007b24:	6a03      	ldr	r3, [r0, #32]
 8007b26:	b570      	push	{r4, r5, r6, lr}
 8007b28:	4605      	mov	r5, r0
 8007b2a:	460e      	mov	r6, r1
 8007b2c:	6884      	ldr	r4, [r0, #8]
 8007b2e:	b90b      	cbnz	r3, 8007b34 <_puts_r+0x10>
 8007b30:	f7ff ffb0 	bl	8007a94 <__sinit>
 8007b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d405      	bmi.n	8007b46 <_puts_r+0x22>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	0598      	lsls	r0, r3, #22
 8007b3e:	d402      	bmi.n	8007b46 <_puts_r+0x22>
 8007b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b42:	f000 f9be 	bl	8007ec2 <__retarget_lock_acquire_recursive>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	0719      	lsls	r1, r3, #28
 8007b4a:	d502      	bpl.n	8007b52 <_puts_r+0x2e>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d135      	bne.n	8007bbe <_puts_r+0x9a>
 8007b52:	4621      	mov	r1, r4
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 f8e5 	bl	8007d24 <__swsetup_r>
 8007b5a:	b380      	cbz	r0, 8007bbe <_puts_r+0x9a>
 8007b5c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b62:	07da      	lsls	r2, r3, #31
 8007b64:	d405      	bmi.n	8007b72 <_puts_r+0x4e>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	059b      	lsls	r3, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_puts_r+0x4e>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b6e:	f000 f9a9 	bl	8007ec4 <__retarget_lock_release_recursive>
 8007b72:	4628      	mov	r0, r5
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da04      	bge.n	8007b84 <_puts_r+0x60>
 8007b7a:	69a2      	ldr	r2, [r4, #24]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	dc17      	bgt.n	8007bb0 <_puts_r+0x8c>
 8007b80:	290a      	cmp	r1, #10
 8007b82:	d015      	beq.n	8007bb0 <_puts_r+0x8c>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	6022      	str	r2, [r4, #0]
 8007b8a:	7019      	strb	r1, [r3, #0]
 8007b8c:	68a3      	ldr	r3, [r4, #8]
 8007b8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b92:	3b01      	subs	r3, #1
 8007b94:	60a3      	str	r3, [r4, #8]
 8007b96:	2900      	cmp	r1, #0
 8007b98:	d1ed      	bne.n	8007b76 <_puts_r+0x52>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da11      	bge.n	8007bc2 <_puts_r+0x9e>
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	210a      	movs	r1, #10
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f880 	bl	8007ca8 <__swbuf_r>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d0d7      	beq.n	8007b5c <_puts_r+0x38>
 8007bac:	250a      	movs	r5, #10
 8007bae:	e7d7      	b.n	8007b60 <_puts_r+0x3c>
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 f878 	bl	8007ca8 <__swbuf_r>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d1e7      	bne.n	8007b8c <_puts_r+0x68>
 8007bbc:	e7ce      	b.n	8007b5c <_puts_r+0x38>
 8007bbe:	3e01      	subs	r6, #1
 8007bc0:	e7e4      	b.n	8007b8c <_puts_r+0x68>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	220a      	movs	r2, #10
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e7ee      	b.n	8007bac <_puts_r+0x88>
	...

08007bd0 <puts>:
 8007bd0:	4b02      	ldr	r3, [pc, #8]	@ (8007bdc <puts+0xc>)
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f7ff bfa5 	b.w	8007b24 <_puts_r>
 8007bda:	bf00      	nop
 8007bdc:	20000018 	.word	0x20000018

08007be0 <__sread>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	460c      	mov	r4, r1
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	f000 f91c 	bl	8007e24 <_read_r>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	bfab      	itete	ge
 8007bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf4:	181b      	addge	r3, r3, r0
 8007bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bfa:	bfac      	ite	ge
 8007bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bfe:	81a3      	strhlt	r3, [r4, #12]
 8007c00:	bd10      	pop	{r4, pc}

08007c02 <__swrite>:
 8007c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	461f      	mov	r7, r3
 8007c08:	898b      	ldrh	r3, [r1, #12]
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	05db      	lsls	r3, r3, #23
 8007c0e:	460c      	mov	r4, r1
 8007c10:	4616      	mov	r6, r2
 8007c12:	d505      	bpl.n	8007c20 <__swrite+0x1e>
 8007c14:	2302      	movs	r3, #2
 8007c16:	2200      	movs	r2, #0
 8007c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1c:	f000 f8f0 	bl	8007e00 <_lseek_r>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	4632      	mov	r2, r6
 8007c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c36:	f000 b907 	b.w	8007e48 <_write_r>

08007c3a <__sseek>:
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c42:	f000 f8dd 	bl	8007e00 <_lseek_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	bf15      	itete	ne
 8007c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c56:	81a3      	strheq	r3, [r4, #12]
 8007c58:	bf18      	it	ne
 8007c5a:	81a3      	strhne	r3, [r4, #12]
 8007c5c:	bd10      	pop	{r4, pc}

08007c5e <__sclose>:
 8007c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c62:	f000 b8bd 	b.w	8007de0 <_close_r>
	...

08007c68 <_vsiprintf_r>:
 8007c68:	b500      	push	{lr}
 8007c6a:	b09b      	sub	sp, #108	@ 0x6c
 8007c6c:	9100      	str	r1, [sp, #0]
 8007c6e:	9104      	str	r1, [sp, #16]
 8007c70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c74:	9105      	str	r1, [sp, #20]
 8007c76:	9102      	str	r1, [sp, #8]
 8007c78:	4905      	ldr	r1, [pc, #20]	@ (8007c90 <_vsiprintf_r+0x28>)
 8007c7a:	9103      	str	r1, [sp, #12]
 8007c7c:	4669      	mov	r1, sp
 8007c7e:	f000 fa83 	bl	8008188 <_svfiprintf_r>
 8007c82:	2200      	movs	r2, #0
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	b01b      	add	sp, #108	@ 0x6c
 8007c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c8e:	bf00      	nop
 8007c90:	ffff0208 	.word	0xffff0208

08007c94 <vsiprintf>:
 8007c94:	4613      	mov	r3, r2
 8007c96:	460a      	mov	r2, r1
 8007c98:	4601      	mov	r1, r0
 8007c9a:	4802      	ldr	r0, [pc, #8]	@ (8007ca4 <vsiprintf+0x10>)
 8007c9c:	6800      	ldr	r0, [r0, #0]
 8007c9e:	f7ff bfe3 	b.w	8007c68 <_vsiprintf_r>
 8007ca2:	bf00      	nop
 8007ca4:	20000018 	.word	0x20000018

08007ca8 <__swbuf_r>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	460e      	mov	r6, r1
 8007cac:	4614      	mov	r4, r2
 8007cae:	4605      	mov	r5, r0
 8007cb0:	b118      	cbz	r0, 8007cba <__swbuf_r+0x12>
 8007cb2:	6a03      	ldr	r3, [r0, #32]
 8007cb4:	b90b      	cbnz	r3, 8007cba <__swbuf_r+0x12>
 8007cb6:	f7ff feed 	bl	8007a94 <__sinit>
 8007cba:	69a3      	ldr	r3, [r4, #24]
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	071a      	lsls	r2, r3, #28
 8007cc2:	d501      	bpl.n	8007cc8 <__swbuf_r+0x20>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	b943      	cbnz	r3, 8007cda <__swbuf_r+0x32>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 f82a 	bl	8007d24 <__swsetup_r>
 8007cd0:	b118      	cbz	r0, 8007cda <__swbuf_r+0x32>
 8007cd2:	f04f 37ff 	mov.w	r7, #4294967295
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	b2f6      	uxtb	r6, r6
 8007ce0:	1a98      	subs	r0, r3, r2
 8007ce2:	6963      	ldr	r3, [r4, #20]
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	4283      	cmp	r3, r0
 8007ce8:	dc05      	bgt.n	8007cf6 <__swbuf_r+0x4e>
 8007cea:	4621      	mov	r1, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 fe99 	bl	8008a24 <_fflush_r>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d1ed      	bne.n	8007cd2 <__swbuf_r+0x2a>
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	60a3      	str	r3, [r4, #8]
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	6022      	str	r2, [r4, #0]
 8007d02:	701e      	strb	r6, [r3, #0]
 8007d04:	6962      	ldr	r2, [r4, #20]
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d004      	beq.n	8007d16 <__swbuf_r+0x6e>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	07db      	lsls	r3, r3, #31
 8007d10:	d5e1      	bpl.n	8007cd6 <__swbuf_r+0x2e>
 8007d12:	2e0a      	cmp	r6, #10
 8007d14:	d1df      	bne.n	8007cd6 <__swbuf_r+0x2e>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 fe83 	bl	8008a24 <_fflush_r>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d0d9      	beq.n	8007cd6 <__swbuf_r+0x2e>
 8007d22:	e7d6      	b.n	8007cd2 <__swbuf_r+0x2a>

08007d24 <__swsetup_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4b29      	ldr	r3, [pc, #164]	@ (8007dcc <__swsetup_r+0xa8>)
 8007d28:	4605      	mov	r5, r0
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	b118      	cbz	r0, 8007d38 <__swsetup_r+0x14>
 8007d30:	6a03      	ldr	r3, [r0, #32]
 8007d32:	b90b      	cbnz	r3, 8007d38 <__swsetup_r+0x14>
 8007d34:	f7ff feae 	bl	8007a94 <__sinit>
 8007d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3c:	0719      	lsls	r1, r3, #28
 8007d3e:	d422      	bmi.n	8007d86 <__swsetup_r+0x62>
 8007d40:	06da      	lsls	r2, r3, #27
 8007d42:	d407      	bmi.n	8007d54 <__swsetup_r+0x30>
 8007d44:	2209      	movs	r2, #9
 8007d46:	602a      	str	r2, [r5, #0]
 8007d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	e033      	b.n	8007dbc <__swsetup_r+0x98>
 8007d54:	0758      	lsls	r0, r3, #29
 8007d56:	d512      	bpl.n	8007d7e <__swsetup_r+0x5a>
 8007d58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d5a:	b141      	cbz	r1, 8007d6e <__swsetup_r+0x4a>
 8007d5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d002      	beq.n	8007d6a <__swsetup_r+0x46>
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 f8bd 	bl	8007ee4 <_free_r>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	2300      	movs	r3, #0
 8007d78:	6063      	str	r3, [r4, #4]
 8007d7a:	6923      	ldr	r3, [r4, #16]
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	f043 0308 	orr.w	r3, r3, #8
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	b94b      	cbnz	r3, 8007d9e <__swsetup_r+0x7a>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d94:	d003      	beq.n	8007d9e <__swsetup_r+0x7a>
 8007d96:	4621      	mov	r1, r4
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f000 fe90 	bl	8008abe <__smakebuf_r>
 8007d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da2:	f013 0201 	ands.w	r2, r3, #1
 8007da6:	d00a      	beq.n	8007dbe <__swsetup_r+0x9a>
 8007da8:	2200      	movs	r2, #0
 8007daa:	60a2      	str	r2, [r4, #8]
 8007dac:	6962      	ldr	r2, [r4, #20]
 8007dae:	4252      	negs	r2, r2
 8007db0:	61a2      	str	r2, [r4, #24]
 8007db2:	6922      	ldr	r2, [r4, #16]
 8007db4:	b942      	cbnz	r2, 8007dc8 <__swsetup_r+0xa4>
 8007db6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007dba:	d1c5      	bne.n	8007d48 <__swsetup_r+0x24>
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	0799      	lsls	r1, r3, #30
 8007dc0:	bf58      	it	pl
 8007dc2:	6962      	ldrpl	r2, [r4, #20]
 8007dc4:	60a2      	str	r2, [r4, #8]
 8007dc6:	e7f4      	b.n	8007db2 <__swsetup_r+0x8e>
 8007dc8:	2000      	movs	r0, #0
 8007dca:	e7f7      	b.n	8007dbc <__swsetup_r+0x98>
 8007dcc:	20000018 	.word	0x20000018

08007dd0 <memset>:
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	4402      	add	r2, r0
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d100      	bne.n	8007dda <memset+0xa>
 8007dd8:	4770      	bx	lr
 8007dda:	f803 1b01 	strb.w	r1, [r3], #1
 8007dde:	e7f9      	b.n	8007dd4 <memset+0x4>

08007de0 <_close_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	2300      	movs	r3, #0
 8007de4:	4d05      	ldr	r5, [pc, #20]	@ (8007dfc <_close_r+0x1c>)
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fa fc1d 	bl	800262a <_close>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_close_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_close_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20000d98 	.word	0x20000d98

08007e00 <_lseek_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4d05      	ldr	r5, [pc, #20]	@ (8007e20 <_lseek_r+0x20>)
 8007e0c:	602a      	str	r2, [r5, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7fa fc2f 	bl	8002672 <_lseek>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_lseek_r+0x1e>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_lseek_r+0x1e>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20000d98 	.word	0x20000d98

08007e24 <_read_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4d05      	ldr	r5, [pc, #20]	@ (8007e44 <_read_r+0x20>)
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7fa fbc0 	bl	80025b8 <_read>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_read_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_read_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20000d98 	.word	0x20000d98

08007e48 <_write_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	4611      	mov	r1, r2
 8007e50:	2200      	movs	r2, #0
 8007e52:	4d05      	ldr	r5, [pc, #20]	@ (8007e68 <_write_r+0x20>)
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7fa fbcb 	bl	80025f2 <_write>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_write_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_write_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000d98 	.word	0x20000d98

08007e6c <__errno>:
 8007e6c:	4b01      	ldr	r3, [pc, #4]	@ (8007e74 <__errno+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000018 	.word	0x20000018

08007e78 <__libc_init_array>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	4d0c      	ldr	r5, [pc, #48]	@ (8007eb0 <__libc_init_array+0x38>)
 8007e7e:	4c0d      	ldr	r4, [pc, #52]	@ (8007eb4 <__libc_init_array+0x3c>)
 8007e80:	1b64      	subs	r4, r4, r5
 8007e82:	10a4      	asrs	r4, r4, #2
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	d109      	bne.n	8007e9c <__libc_init_array+0x24>
 8007e88:	f000 fee6 	bl	8008c58 <_init>
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	4d0a      	ldr	r5, [pc, #40]	@ (8007eb8 <__libc_init_array+0x40>)
 8007e90:	4c0a      	ldr	r4, [pc, #40]	@ (8007ebc <__libc_init_array+0x44>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	42a6      	cmp	r6, r4
 8007e98:	d105      	bne.n	8007ea6 <__libc_init_array+0x2e>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea0:	4798      	blx	r3
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7ee      	b.n	8007e84 <__libc_init_array+0xc>
 8007ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eaa:	4798      	blx	r3
 8007eac:	3601      	adds	r6, #1
 8007eae:	e7f2      	b.n	8007e96 <__libc_init_array+0x1e>
 8007eb0:	08008e84 	.word	0x08008e84
 8007eb4:	08008e84 	.word	0x08008e84
 8007eb8:	08008e84 	.word	0x08008e84
 8007ebc:	08008e88 	.word	0x08008e88

08007ec0 <__retarget_lock_init_recursive>:
 8007ec0:	4770      	bx	lr

08007ec2 <__retarget_lock_acquire_recursive>:
 8007ec2:	4770      	bx	lr

08007ec4 <__retarget_lock_release_recursive>:
 8007ec4:	4770      	bx	lr

08007ec6 <memcpy>:
 8007ec6:	440a      	add	r2, r1
 8007ec8:	4291      	cmp	r1, r2
 8007eca:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ece:	d100      	bne.n	8007ed2 <memcpy+0xc>
 8007ed0:	4770      	bx	lr
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed8:	4291      	cmp	r1, r2
 8007eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ede:	d1f9      	bne.n	8007ed4 <memcpy+0xe>
 8007ee0:	bd10      	pop	{r4, pc}
	...

08007ee4 <_free_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	d040      	beq.n	8007f6e <_free_r+0x8a>
 8007eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef0:	1f0c      	subs	r4, r1, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bfb8      	it	lt
 8007ef6:	18e4      	addlt	r4, r4, r3
 8007ef8:	f000 f8de 	bl	80080b8 <__malloc_lock>
 8007efc:	4a1c      	ldr	r2, [pc, #112]	@ (8007f70 <_free_r+0x8c>)
 8007efe:	6813      	ldr	r3, [r2, #0]
 8007f00:	b933      	cbnz	r3, 8007f10 <_free_r+0x2c>
 8007f02:	6063      	str	r3, [r4, #4]
 8007f04:	6014      	str	r4, [r2, #0]
 8007f06:	4628      	mov	r0, r5
 8007f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f0c:	f000 b8da 	b.w	80080c4 <__malloc_unlock>
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d908      	bls.n	8007f26 <_free_r+0x42>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	1821      	adds	r1, r4, r0
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	bf01      	itttt	eq
 8007f1c:	6819      	ldreq	r1, [r3, #0]
 8007f1e:	685b      	ldreq	r3, [r3, #4]
 8007f20:	1809      	addeq	r1, r1, r0
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	e7ed      	b.n	8007f02 <_free_r+0x1e>
 8007f26:	461a      	mov	r2, r3
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	b10b      	cbz	r3, 8007f30 <_free_r+0x4c>
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d9fa      	bls.n	8007f26 <_free_r+0x42>
 8007f30:	6811      	ldr	r1, [r2, #0]
 8007f32:	1850      	adds	r0, r2, r1
 8007f34:	42a0      	cmp	r0, r4
 8007f36:	d10b      	bne.n	8007f50 <_free_r+0x6c>
 8007f38:	6820      	ldr	r0, [r4, #0]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	1850      	adds	r0, r2, r1
 8007f3e:	4283      	cmp	r3, r0
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	d1e0      	bne.n	8007f06 <_free_r+0x22>
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4408      	add	r0, r1
 8007f4a:	6010      	str	r0, [r2, #0]
 8007f4c:	6053      	str	r3, [r2, #4]
 8007f4e:	e7da      	b.n	8007f06 <_free_r+0x22>
 8007f50:	d902      	bls.n	8007f58 <_free_r+0x74>
 8007f52:	230c      	movs	r3, #12
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	e7d6      	b.n	8007f06 <_free_r+0x22>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	1821      	adds	r1, r4, r0
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	bf01      	itttt	eq
 8007f60:	6819      	ldreq	r1, [r3, #0]
 8007f62:	685b      	ldreq	r3, [r3, #4]
 8007f64:	1809      	addeq	r1, r1, r0
 8007f66:	6021      	streq	r1, [r4, #0]
 8007f68:	6063      	str	r3, [r4, #4]
 8007f6a:	6054      	str	r4, [r2, #4]
 8007f6c:	e7cb      	b.n	8007f06 <_free_r+0x22>
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20000da4 	.word	0x20000da4

08007f74 <sbrk_aligned>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	4e0f      	ldr	r6, [pc, #60]	@ (8007fb4 <sbrk_aligned+0x40>)
 8007f78:	460c      	mov	r4, r1
 8007f7a:	6831      	ldr	r1, [r6, #0]
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	b911      	cbnz	r1, 8007f86 <sbrk_aligned+0x12>
 8007f80:	f000 fe16 	bl	8008bb0 <_sbrk_r>
 8007f84:	6030      	str	r0, [r6, #0]
 8007f86:	4621      	mov	r1, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 fe11 	bl	8008bb0 <_sbrk_r>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	d103      	bne.n	8007f9a <sbrk_aligned+0x26>
 8007f92:	f04f 34ff 	mov.w	r4, #4294967295
 8007f96:	4620      	mov	r0, r4
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
 8007f9a:	1cc4      	adds	r4, r0, #3
 8007f9c:	f024 0403 	bic.w	r4, r4, #3
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d0f8      	beq.n	8007f96 <sbrk_aligned+0x22>
 8007fa4:	1a21      	subs	r1, r4, r0
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 fe02 	bl	8008bb0 <_sbrk_r>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d1f2      	bne.n	8007f96 <sbrk_aligned+0x22>
 8007fb0:	e7ef      	b.n	8007f92 <sbrk_aligned+0x1e>
 8007fb2:	bf00      	nop
 8007fb4:	20000da0 	.word	0x20000da0

08007fb8 <_malloc_r>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	1ccd      	adds	r5, r1, #3
 8007fbe:	f025 0503 	bic.w	r5, r5, #3
 8007fc2:	3508      	adds	r5, #8
 8007fc4:	2d0c      	cmp	r5, #12
 8007fc6:	bf38      	it	cc
 8007fc8:	250c      	movcc	r5, #12
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	4606      	mov	r6, r0
 8007fce:	db01      	blt.n	8007fd4 <_malloc_r+0x1c>
 8007fd0:	42a9      	cmp	r1, r5
 8007fd2:	d904      	bls.n	8007fde <_malloc_r+0x26>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	6033      	str	r3, [r6, #0]
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080b4 <_malloc_r+0xfc>
 8007fe2:	f000 f869 	bl	80080b8 <__malloc_lock>
 8007fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fea:	461c      	mov	r4, r3
 8007fec:	bb44      	cbnz	r4, 8008040 <_malloc_r+0x88>
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff ffbf 	bl	8007f74 <sbrk_aligned>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	d158      	bne.n	80080ae <_malloc_r+0xf6>
 8007ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8008000:	4627      	mov	r7, r4
 8008002:	2f00      	cmp	r7, #0
 8008004:	d143      	bne.n	800808e <_malloc_r+0xd6>
 8008006:	2c00      	cmp	r4, #0
 8008008:	d04b      	beq.n	80080a2 <_malloc_r+0xea>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	4639      	mov	r1, r7
 800800e:	4630      	mov	r0, r6
 8008010:	eb04 0903 	add.w	r9, r4, r3
 8008014:	f000 fdcc 	bl	8008bb0 <_sbrk_r>
 8008018:	4581      	cmp	r9, r0
 800801a:	d142      	bne.n	80080a2 <_malloc_r+0xea>
 800801c:	6821      	ldr	r1, [r4, #0]
 800801e:	4630      	mov	r0, r6
 8008020:	1a6d      	subs	r5, r5, r1
 8008022:	4629      	mov	r1, r5
 8008024:	f7ff ffa6 	bl	8007f74 <sbrk_aligned>
 8008028:	3001      	adds	r0, #1
 800802a:	d03a      	beq.n	80080a2 <_malloc_r+0xea>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	442b      	add	r3, r5
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	f8d8 3000 	ldr.w	r3, [r8]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	bb62      	cbnz	r2, 8008094 <_malloc_r+0xdc>
 800803a:	f8c8 7000 	str.w	r7, [r8]
 800803e:	e00f      	b.n	8008060 <_malloc_r+0xa8>
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	1b52      	subs	r2, r2, r5
 8008044:	d420      	bmi.n	8008088 <_malloc_r+0xd0>
 8008046:	2a0b      	cmp	r2, #11
 8008048:	d917      	bls.n	800807a <_malloc_r+0xc2>
 800804a:	1961      	adds	r1, r4, r5
 800804c:	42a3      	cmp	r3, r4
 800804e:	6025      	str	r5, [r4, #0]
 8008050:	bf18      	it	ne
 8008052:	6059      	strne	r1, [r3, #4]
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	bf08      	it	eq
 8008058:	f8c8 1000 	streq.w	r1, [r8]
 800805c:	5162      	str	r2, [r4, r5]
 800805e:	604b      	str	r3, [r1, #4]
 8008060:	4630      	mov	r0, r6
 8008062:	f000 f82f 	bl	80080c4 <__malloc_unlock>
 8008066:	f104 000b 	add.w	r0, r4, #11
 800806a:	1d23      	adds	r3, r4, #4
 800806c:	f020 0007 	bic.w	r0, r0, #7
 8008070:	1ac2      	subs	r2, r0, r3
 8008072:	bf1c      	itt	ne
 8008074:	1a1b      	subne	r3, r3, r0
 8008076:	50a3      	strne	r3, [r4, r2]
 8008078:	e7af      	b.n	8007fda <_malloc_r+0x22>
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	42a3      	cmp	r3, r4
 800807e:	bf0c      	ite	eq
 8008080:	f8c8 2000 	streq.w	r2, [r8]
 8008084:	605a      	strne	r2, [r3, #4]
 8008086:	e7eb      	b.n	8008060 <_malloc_r+0xa8>
 8008088:	4623      	mov	r3, r4
 800808a:	6864      	ldr	r4, [r4, #4]
 800808c:	e7ae      	b.n	8007fec <_malloc_r+0x34>
 800808e:	463c      	mov	r4, r7
 8008090:	687f      	ldr	r7, [r7, #4]
 8008092:	e7b6      	b.n	8008002 <_malloc_r+0x4a>
 8008094:	461a      	mov	r2, r3
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	42a3      	cmp	r3, r4
 800809a:	d1fb      	bne.n	8008094 <_malloc_r+0xdc>
 800809c:	2300      	movs	r3, #0
 800809e:	6053      	str	r3, [r2, #4]
 80080a0:	e7de      	b.n	8008060 <_malloc_r+0xa8>
 80080a2:	230c      	movs	r3, #12
 80080a4:	4630      	mov	r0, r6
 80080a6:	6033      	str	r3, [r6, #0]
 80080a8:	f000 f80c 	bl	80080c4 <__malloc_unlock>
 80080ac:	e794      	b.n	8007fd8 <_malloc_r+0x20>
 80080ae:	6005      	str	r5, [r0, #0]
 80080b0:	e7d6      	b.n	8008060 <_malloc_r+0xa8>
 80080b2:	bf00      	nop
 80080b4:	20000da4 	.word	0x20000da4

080080b8 <__malloc_lock>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__malloc_lock+0x8>)
 80080ba:	f7ff bf02 	b.w	8007ec2 <__retarget_lock_acquire_recursive>
 80080be:	bf00      	nop
 80080c0:	20000d9c 	.word	0x20000d9c

080080c4 <__malloc_unlock>:
 80080c4:	4801      	ldr	r0, [pc, #4]	@ (80080cc <__malloc_unlock+0x8>)
 80080c6:	f7ff befd 	b.w	8007ec4 <__retarget_lock_release_recursive>
 80080ca:	bf00      	nop
 80080cc:	20000d9c 	.word	0x20000d9c

080080d0 <__ssputs_r>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	461f      	mov	r7, r3
 80080d6:	688e      	ldr	r6, [r1, #8]
 80080d8:	4682      	mov	sl, r0
 80080da:	42be      	cmp	r6, r7
 80080dc:	460c      	mov	r4, r1
 80080de:	4690      	mov	r8, r2
 80080e0:	680b      	ldr	r3, [r1, #0]
 80080e2:	d82d      	bhi.n	8008140 <__ssputs_r+0x70>
 80080e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080ec:	d026      	beq.n	800813c <__ssputs_r+0x6c>
 80080ee:	6965      	ldr	r5, [r4, #20]
 80080f0:	6909      	ldr	r1, [r1, #16]
 80080f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f6:	eba3 0901 	sub.w	r9, r3, r1
 80080fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080fe:	1c7b      	adds	r3, r7, #1
 8008100:	444b      	add	r3, r9
 8008102:	106d      	asrs	r5, r5, #1
 8008104:	429d      	cmp	r5, r3
 8008106:	bf38      	it	cc
 8008108:	461d      	movcc	r5, r3
 800810a:	0553      	lsls	r3, r2, #21
 800810c:	d527      	bpl.n	800815e <__ssputs_r+0x8e>
 800810e:	4629      	mov	r1, r5
 8008110:	f7ff ff52 	bl	8007fb8 <_malloc_r>
 8008114:	4606      	mov	r6, r0
 8008116:	b360      	cbz	r0, 8008172 <__ssputs_r+0xa2>
 8008118:	464a      	mov	r2, r9
 800811a:	6921      	ldr	r1, [r4, #16]
 800811c:	f7ff fed3 	bl	8007ec6 <memcpy>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	6126      	str	r6, [r4, #16]
 800812e:	444e      	add	r6, r9
 8008130:	6026      	str	r6, [r4, #0]
 8008132:	463e      	mov	r6, r7
 8008134:	6165      	str	r5, [r4, #20]
 8008136:	eba5 0509 	sub.w	r5, r5, r9
 800813a:	60a5      	str	r5, [r4, #8]
 800813c:	42be      	cmp	r6, r7
 800813e:	d900      	bls.n	8008142 <__ssputs_r+0x72>
 8008140:	463e      	mov	r6, r7
 8008142:	4632      	mov	r2, r6
 8008144:	4641      	mov	r1, r8
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	f000 fcf5 	bl	8008b36 <memmove>
 800814c:	2000      	movs	r0, #0
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	1b9b      	subs	r3, r3, r6
 8008152:	60a3      	str	r3, [r4, #8]
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	4433      	add	r3, r6
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815e:	462a      	mov	r2, r5
 8008160:	f000 fd44 	bl	8008bec <_realloc_r>
 8008164:	4606      	mov	r6, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	d1e0      	bne.n	800812c <__ssputs_r+0x5c>
 800816a:	4650      	mov	r0, sl
 800816c:	6921      	ldr	r1, [r4, #16]
 800816e:	f7ff feb9 	bl	8007ee4 <_free_r>
 8008172:	230c      	movs	r3, #12
 8008174:	f8ca 3000 	str.w	r3, [sl]
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f04f 30ff 	mov.w	r0, #4294967295
 800817e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	e7e9      	b.n	800815a <__ssputs_r+0x8a>
	...

08008188 <_svfiprintf_r>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	4698      	mov	r8, r3
 800818e:	898b      	ldrh	r3, [r1, #12]
 8008190:	4607      	mov	r7, r0
 8008192:	061b      	lsls	r3, r3, #24
 8008194:	460d      	mov	r5, r1
 8008196:	4614      	mov	r4, r2
 8008198:	b09d      	sub	sp, #116	@ 0x74
 800819a:	d510      	bpl.n	80081be <_svfiprintf_r+0x36>
 800819c:	690b      	ldr	r3, [r1, #16]
 800819e:	b973      	cbnz	r3, 80081be <_svfiprintf_r+0x36>
 80081a0:	2140      	movs	r1, #64	@ 0x40
 80081a2:	f7ff ff09 	bl	8007fb8 <_malloc_r>
 80081a6:	6028      	str	r0, [r5, #0]
 80081a8:	6128      	str	r0, [r5, #16]
 80081aa:	b930      	cbnz	r0, 80081ba <_svfiprintf_r+0x32>
 80081ac:	230c      	movs	r3, #12
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	b01d      	add	sp, #116	@ 0x74
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	2340      	movs	r3, #64	@ 0x40
 80081bc:	616b      	str	r3, [r5, #20]
 80081be:	2300      	movs	r3, #0
 80081c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c2:	2320      	movs	r3, #32
 80081c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081c8:	2330      	movs	r3, #48	@ 0x30
 80081ca:	f04f 0901 	mov.w	r9, #1
 80081ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800836c <_svfiprintf_r+0x1e4>
 80081d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081da:	4623      	mov	r3, r4
 80081dc:	469a      	mov	sl, r3
 80081de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e2:	b10a      	cbz	r2, 80081e8 <_svfiprintf_r+0x60>
 80081e4:	2a25      	cmp	r2, #37	@ 0x25
 80081e6:	d1f9      	bne.n	80081dc <_svfiprintf_r+0x54>
 80081e8:	ebba 0b04 	subs.w	fp, sl, r4
 80081ec:	d00b      	beq.n	8008206 <_svfiprintf_r+0x7e>
 80081ee:	465b      	mov	r3, fp
 80081f0:	4622      	mov	r2, r4
 80081f2:	4629      	mov	r1, r5
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ff6b 	bl	80080d0 <__ssputs_r>
 80081fa:	3001      	adds	r0, #1
 80081fc:	f000 80a7 	beq.w	800834e <_svfiprintf_r+0x1c6>
 8008200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008202:	445a      	add	r2, fp
 8008204:	9209      	str	r2, [sp, #36]	@ 0x24
 8008206:	f89a 3000 	ldrb.w	r3, [sl]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 809f 	beq.w	800834e <_svfiprintf_r+0x1c6>
 8008210:	2300      	movs	r3, #0
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800821a:	f10a 0a01 	add.w	sl, sl, #1
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008226:	931a      	str	r3, [sp, #104]	@ 0x68
 8008228:	4654      	mov	r4, sl
 800822a:	2205      	movs	r2, #5
 800822c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008230:	484e      	ldr	r0, [pc, #312]	@ (800836c <_svfiprintf_r+0x1e4>)
 8008232:	f000 fccd 	bl	8008bd0 <memchr>
 8008236:	9a04      	ldr	r2, [sp, #16]
 8008238:	b9d8      	cbnz	r0, 8008272 <_svfiprintf_r+0xea>
 800823a:	06d0      	lsls	r0, r2, #27
 800823c:	bf44      	itt	mi
 800823e:	2320      	movmi	r3, #32
 8008240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008244:	0711      	lsls	r1, r2, #28
 8008246:	bf44      	itt	mi
 8008248:	232b      	movmi	r3, #43	@ 0x2b
 800824a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800824e:	f89a 3000 	ldrb.w	r3, [sl]
 8008252:	2b2a      	cmp	r3, #42	@ 0x2a
 8008254:	d015      	beq.n	8008282 <_svfiprintf_r+0xfa>
 8008256:	4654      	mov	r4, sl
 8008258:	2000      	movs	r0, #0
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	9a07      	ldr	r2, [sp, #28]
 8008260:	4621      	mov	r1, r4
 8008262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008266:	3b30      	subs	r3, #48	@ 0x30
 8008268:	2b09      	cmp	r3, #9
 800826a:	d94b      	bls.n	8008304 <_svfiprintf_r+0x17c>
 800826c:	b1b0      	cbz	r0, 800829c <_svfiprintf_r+0x114>
 800826e:	9207      	str	r2, [sp, #28]
 8008270:	e014      	b.n	800829c <_svfiprintf_r+0x114>
 8008272:	eba0 0308 	sub.w	r3, r0, r8
 8008276:	fa09 f303 	lsl.w	r3, r9, r3
 800827a:	4313      	orrs	r3, r2
 800827c:	46a2      	mov	sl, r4
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	e7d2      	b.n	8008228 <_svfiprintf_r+0xa0>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	1d19      	adds	r1, r3, #4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	9103      	str	r1, [sp, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	bfbb      	ittet	lt
 800828e:	425b      	neglt	r3, r3
 8008290:	f042 0202 	orrlt.w	r2, r2, #2
 8008294:	9307      	strge	r3, [sp, #28]
 8008296:	9307      	strlt	r3, [sp, #28]
 8008298:	bfb8      	it	lt
 800829a:	9204      	strlt	r2, [sp, #16]
 800829c:	7823      	ldrb	r3, [r4, #0]
 800829e:	2b2e      	cmp	r3, #46	@ 0x2e
 80082a0:	d10a      	bne.n	80082b8 <_svfiprintf_r+0x130>
 80082a2:	7863      	ldrb	r3, [r4, #1]
 80082a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a6:	d132      	bne.n	800830e <_svfiprintf_r+0x186>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	3402      	adds	r4, #2
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	9203      	str	r2, [sp, #12]
 80082b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008370 <_svfiprintf_r+0x1e8>
 80082bc:	2203      	movs	r2, #3
 80082be:	4650      	mov	r0, sl
 80082c0:	7821      	ldrb	r1, [r4, #0]
 80082c2:	f000 fc85 	bl	8008bd0 <memchr>
 80082c6:	b138      	cbz	r0, 80082d8 <_svfiprintf_r+0x150>
 80082c8:	2240      	movs	r2, #64	@ 0x40
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	eba0 000a 	sub.w	r0, r0, sl
 80082d0:	4082      	lsls	r2, r0
 80082d2:	4313      	orrs	r3, r2
 80082d4:	3401      	adds	r4, #1
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	2206      	movs	r2, #6
 80082de:	4825      	ldr	r0, [pc, #148]	@ (8008374 <_svfiprintf_r+0x1ec>)
 80082e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082e4:	f000 fc74 	bl	8008bd0 <memchr>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d036      	beq.n	800835a <_svfiprintf_r+0x1d2>
 80082ec:	4b22      	ldr	r3, [pc, #136]	@ (8008378 <_svfiprintf_r+0x1f0>)
 80082ee:	bb1b      	cbnz	r3, 8008338 <_svfiprintf_r+0x1b0>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	3307      	adds	r3, #7
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	3308      	adds	r3, #8
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fe:	4433      	add	r3, r6
 8008300:	9309      	str	r3, [sp, #36]	@ 0x24
 8008302:	e76a      	b.n	80081da <_svfiprintf_r+0x52>
 8008304:	460c      	mov	r4, r1
 8008306:	2001      	movs	r0, #1
 8008308:	fb0c 3202 	mla	r2, ip, r2, r3
 800830c:	e7a8      	b.n	8008260 <_svfiprintf_r+0xd8>
 800830e:	2300      	movs	r3, #0
 8008310:	f04f 0c0a 	mov.w	ip, #10
 8008314:	4619      	mov	r1, r3
 8008316:	3401      	adds	r4, #1
 8008318:	9305      	str	r3, [sp, #20]
 800831a:	4620      	mov	r0, r4
 800831c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008320:	3a30      	subs	r2, #48	@ 0x30
 8008322:	2a09      	cmp	r2, #9
 8008324:	d903      	bls.n	800832e <_svfiprintf_r+0x1a6>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0c6      	beq.n	80082b8 <_svfiprintf_r+0x130>
 800832a:	9105      	str	r1, [sp, #20]
 800832c:	e7c4      	b.n	80082b8 <_svfiprintf_r+0x130>
 800832e:	4604      	mov	r4, r0
 8008330:	2301      	movs	r3, #1
 8008332:	fb0c 2101 	mla	r1, ip, r1, r2
 8008336:	e7f0      	b.n	800831a <_svfiprintf_r+0x192>
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	462a      	mov	r2, r5
 800833e:	4638      	mov	r0, r7
 8008340:	4b0e      	ldr	r3, [pc, #56]	@ (800837c <_svfiprintf_r+0x1f4>)
 8008342:	a904      	add	r1, sp, #16
 8008344:	f3af 8000 	nop.w
 8008348:	1c42      	adds	r2, r0, #1
 800834a:	4606      	mov	r6, r0
 800834c:	d1d6      	bne.n	80082fc <_svfiprintf_r+0x174>
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	065b      	lsls	r3, r3, #25
 8008352:	f53f af2d 	bmi.w	80081b0 <_svfiprintf_r+0x28>
 8008356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008358:	e72c      	b.n	80081b4 <_svfiprintf_r+0x2c>
 800835a:	ab03      	add	r3, sp, #12
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	462a      	mov	r2, r5
 8008360:	4638      	mov	r0, r7
 8008362:	4b06      	ldr	r3, [pc, #24]	@ (800837c <_svfiprintf_r+0x1f4>)
 8008364:	a904      	add	r1, sp, #16
 8008366:	f000 f9bd 	bl	80086e4 <_printf_i>
 800836a:	e7ed      	b.n	8008348 <_svfiprintf_r+0x1c0>
 800836c:	08008e4e 	.word	0x08008e4e
 8008370:	08008e54 	.word	0x08008e54
 8008374:	08008e58 	.word	0x08008e58
 8008378:	00000000 	.word	0x00000000
 800837c:	080080d1 	.word	0x080080d1

08008380 <__sfputc_r>:
 8008380:	6893      	ldr	r3, [r2, #8]
 8008382:	b410      	push	{r4}
 8008384:	3b01      	subs	r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	6093      	str	r3, [r2, #8]
 800838a:	da07      	bge.n	800839c <__sfputc_r+0x1c>
 800838c:	6994      	ldr	r4, [r2, #24]
 800838e:	42a3      	cmp	r3, r4
 8008390:	db01      	blt.n	8008396 <__sfputc_r+0x16>
 8008392:	290a      	cmp	r1, #10
 8008394:	d102      	bne.n	800839c <__sfputc_r+0x1c>
 8008396:	bc10      	pop	{r4}
 8008398:	f7ff bc86 	b.w	8007ca8 <__swbuf_r>
 800839c:	6813      	ldr	r3, [r2, #0]
 800839e:	1c58      	adds	r0, r3, #1
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	7019      	strb	r1, [r3, #0]
 80083a4:	4608      	mov	r0, r1
 80083a6:	bc10      	pop	{r4}
 80083a8:	4770      	bx	lr

080083aa <__sfputs_r>:
 80083aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	18d5      	adds	r5, r2, r3
 80083b4:	42ac      	cmp	r4, r5
 80083b6:	d101      	bne.n	80083bc <__sfputs_r+0x12>
 80083b8:	2000      	movs	r0, #0
 80083ba:	e007      	b.n	80083cc <__sfputs_r+0x22>
 80083bc:	463a      	mov	r2, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c4:	f7ff ffdc 	bl	8008380 <__sfputc_r>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d1f3      	bne.n	80083b4 <__sfputs_r+0xa>
 80083cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083d0 <_vfiprintf_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	460d      	mov	r5, r1
 80083d6:	4614      	mov	r4, r2
 80083d8:	4698      	mov	r8, r3
 80083da:	4606      	mov	r6, r0
 80083dc:	b09d      	sub	sp, #116	@ 0x74
 80083de:	b118      	cbz	r0, 80083e8 <_vfiprintf_r+0x18>
 80083e0:	6a03      	ldr	r3, [r0, #32]
 80083e2:	b90b      	cbnz	r3, 80083e8 <_vfiprintf_r+0x18>
 80083e4:	f7ff fb56 	bl	8007a94 <__sinit>
 80083e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ea:	07d9      	lsls	r1, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_vfiprintf_r+0x2a>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	059a      	lsls	r2, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_vfiprintf_r+0x2a>
 80083f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083f6:	f7ff fd64 	bl	8007ec2 <__retarget_lock_acquire_recursive>
 80083fa:	89ab      	ldrh	r3, [r5, #12]
 80083fc:	071b      	lsls	r3, r3, #28
 80083fe:	d501      	bpl.n	8008404 <_vfiprintf_r+0x34>
 8008400:	692b      	ldr	r3, [r5, #16]
 8008402:	b99b      	cbnz	r3, 800842c <_vfiprintf_r+0x5c>
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff fc8c 	bl	8007d24 <__swsetup_r>
 800840c:	b170      	cbz	r0, 800842c <_vfiprintf_r+0x5c>
 800840e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008410:	07dc      	lsls	r4, r3, #31
 8008412:	d504      	bpl.n	800841e <_vfiprintf_r+0x4e>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b01d      	add	sp, #116	@ 0x74
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	0598      	lsls	r0, r3, #22
 8008422:	d4f7      	bmi.n	8008414 <_vfiprintf_r+0x44>
 8008424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008426:	f7ff fd4d 	bl	8007ec4 <__retarget_lock_release_recursive>
 800842a:	e7f3      	b.n	8008414 <_vfiprintf_r+0x44>
 800842c:	2300      	movs	r3, #0
 800842e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008430:	2320      	movs	r3, #32
 8008432:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008436:	2330      	movs	r3, #48	@ 0x30
 8008438:	f04f 0901 	mov.w	r9, #1
 800843c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008440:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80085ec <_vfiprintf_r+0x21c>
 8008444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008448:	4623      	mov	r3, r4
 800844a:	469a      	mov	sl, r3
 800844c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008450:	b10a      	cbz	r2, 8008456 <_vfiprintf_r+0x86>
 8008452:	2a25      	cmp	r2, #37	@ 0x25
 8008454:	d1f9      	bne.n	800844a <_vfiprintf_r+0x7a>
 8008456:	ebba 0b04 	subs.w	fp, sl, r4
 800845a:	d00b      	beq.n	8008474 <_vfiprintf_r+0xa4>
 800845c:	465b      	mov	r3, fp
 800845e:	4622      	mov	r2, r4
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ffa1 	bl	80083aa <__sfputs_r>
 8008468:	3001      	adds	r0, #1
 800846a:	f000 80a7 	beq.w	80085bc <_vfiprintf_r+0x1ec>
 800846e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008470:	445a      	add	r2, fp
 8008472:	9209      	str	r2, [sp, #36]	@ 0x24
 8008474:	f89a 3000 	ldrb.w	r3, [sl]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 809f 	beq.w	80085bc <_vfiprintf_r+0x1ec>
 800847e:	2300      	movs	r3, #0
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008488:	f10a 0a01 	add.w	sl, sl, #1
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008494:	931a      	str	r3, [sp, #104]	@ 0x68
 8008496:	4654      	mov	r4, sl
 8008498:	2205      	movs	r2, #5
 800849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849e:	4853      	ldr	r0, [pc, #332]	@ (80085ec <_vfiprintf_r+0x21c>)
 80084a0:	f000 fb96 	bl	8008bd0 <memchr>
 80084a4:	9a04      	ldr	r2, [sp, #16]
 80084a6:	b9d8      	cbnz	r0, 80084e0 <_vfiprintf_r+0x110>
 80084a8:	06d1      	lsls	r1, r2, #27
 80084aa:	bf44      	itt	mi
 80084ac:	2320      	movmi	r3, #32
 80084ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084b2:	0713      	lsls	r3, r2, #28
 80084b4:	bf44      	itt	mi
 80084b6:	232b      	movmi	r3, #43	@ 0x2b
 80084b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084bc:	f89a 3000 	ldrb.w	r3, [sl]
 80084c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c2:	d015      	beq.n	80084f0 <_vfiprintf_r+0x120>
 80084c4:	4654      	mov	r4, sl
 80084c6:	2000      	movs	r0, #0
 80084c8:	f04f 0c0a 	mov.w	ip, #10
 80084cc:	9a07      	ldr	r2, [sp, #28]
 80084ce:	4621      	mov	r1, r4
 80084d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d4:	3b30      	subs	r3, #48	@ 0x30
 80084d6:	2b09      	cmp	r3, #9
 80084d8:	d94b      	bls.n	8008572 <_vfiprintf_r+0x1a2>
 80084da:	b1b0      	cbz	r0, 800850a <_vfiprintf_r+0x13a>
 80084dc:	9207      	str	r2, [sp, #28]
 80084de:	e014      	b.n	800850a <_vfiprintf_r+0x13a>
 80084e0:	eba0 0308 	sub.w	r3, r0, r8
 80084e4:	fa09 f303 	lsl.w	r3, r9, r3
 80084e8:	4313      	orrs	r3, r2
 80084ea:	46a2      	mov	sl, r4
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	e7d2      	b.n	8008496 <_vfiprintf_r+0xc6>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	1d19      	adds	r1, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	9103      	str	r1, [sp, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bfbb      	ittet	lt
 80084fc:	425b      	neglt	r3, r3
 80084fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008502:	9307      	strge	r3, [sp, #28]
 8008504:	9307      	strlt	r3, [sp, #28]
 8008506:	bfb8      	it	lt
 8008508:	9204      	strlt	r2, [sp, #16]
 800850a:	7823      	ldrb	r3, [r4, #0]
 800850c:	2b2e      	cmp	r3, #46	@ 0x2e
 800850e:	d10a      	bne.n	8008526 <_vfiprintf_r+0x156>
 8008510:	7863      	ldrb	r3, [r4, #1]
 8008512:	2b2a      	cmp	r3, #42	@ 0x2a
 8008514:	d132      	bne.n	800857c <_vfiprintf_r+0x1ac>
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	3402      	adds	r4, #2
 800851a:	1d1a      	adds	r2, r3, #4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	9203      	str	r2, [sp, #12]
 8008520:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80085f0 <_vfiprintf_r+0x220>
 800852a:	2203      	movs	r2, #3
 800852c:	4650      	mov	r0, sl
 800852e:	7821      	ldrb	r1, [r4, #0]
 8008530:	f000 fb4e 	bl	8008bd0 <memchr>
 8008534:	b138      	cbz	r0, 8008546 <_vfiprintf_r+0x176>
 8008536:	2240      	movs	r2, #64	@ 0x40
 8008538:	9b04      	ldr	r3, [sp, #16]
 800853a:	eba0 000a 	sub.w	r0, r0, sl
 800853e:	4082      	lsls	r2, r0
 8008540:	4313      	orrs	r3, r2
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	2206      	movs	r2, #6
 800854c:	4829      	ldr	r0, [pc, #164]	@ (80085f4 <_vfiprintf_r+0x224>)
 800854e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008552:	f000 fb3d 	bl	8008bd0 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d03f      	beq.n	80085da <_vfiprintf_r+0x20a>
 800855a:	4b27      	ldr	r3, [pc, #156]	@ (80085f8 <_vfiprintf_r+0x228>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_vfiprintf_r+0x1d6>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856c:	443b      	add	r3, r7
 800856e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008570:	e76a      	b.n	8008448 <_vfiprintf_r+0x78>
 8008572:	460c      	mov	r4, r1
 8008574:	2001      	movs	r0, #1
 8008576:	fb0c 3202 	mla	r2, ip, r2, r3
 800857a:	e7a8      	b.n	80084ce <_vfiprintf_r+0xfe>
 800857c:	2300      	movs	r3, #0
 800857e:	f04f 0c0a 	mov.w	ip, #10
 8008582:	4619      	mov	r1, r3
 8008584:	3401      	adds	r4, #1
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	@ 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_vfiprintf_r+0x1cc>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c6      	beq.n	8008526 <_vfiprintf_r+0x156>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c4      	b.n	8008526 <_vfiprintf_r+0x156>
 800859c:	4604      	mov	r4, r0
 800859e:	2301      	movs	r3, #1
 80085a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a4:	e7f0      	b.n	8008588 <_vfiprintf_r+0x1b8>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	4b13      	ldr	r3, [pc, #76]	@ (80085fc <_vfiprintf_r+0x22c>)
 80085b0:	a904      	add	r1, sp, #16
 80085b2:	f3af 8000 	nop.w
 80085b6:	4607      	mov	r7, r0
 80085b8:	1c78      	adds	r0, r7, #1
 80085ba:	d1d6      	bne.n	800856a <_vfiprintf_r+0x19a>
 80085bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x1fe>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x1fe>
 80085c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ca:	f7ff fc7b 	bl	8007ec4 <__retarget_lock_release_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	065b      	lsls	r3, r3, #25
 80085d2:	f53f af1f 	bmi.w	8008414 <_vfiprintf_r+0x44>
 80085d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085d8:	e71e      	b.n	8008418 <_vfiprintf_r+0x48>
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	462a      	mov	r2, r5
 80085e0:	4630      	mov	r0, r6
 80085e2:	4b06      	ldr	r3, [pc, #24]	@ (80085fc <_vfiprintf_r+0x22c>)
 80085e4:	a904      	add	r1, sp, #16
 80085e6:	f000 f87d 	bl	80086e4 <_printf_i>
 80085ea:	e7e4      	b.n	80085b6 <_vfiprintf_r+0x1e6>
 80085ec:	08008e4e 	.word	0x08008e4e
 80085f0:	08008e54 	.word	0x08008e54
 80085f4:	08008e58 	.word	0x08008e58
 80085f8:	00000000 	.word	0x00000000
 80085fc:	080083ab 	.word	0x080083ab

08008600 <_printf_common>:
 8008600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	4616      	mov	r6, r2
 8008606:	4698      	mov	r8, r3
 8008608:	688a      	ldr	r2, [r1, #8]
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	4607      	mov	r7, r0
 800860e:	4293      	cmp	r3, r2
 8008610:	bfb8      	it	lt
 8008612:	4613      	movlt	r3, r2
 8008614:	6033      	str	r3, [r6, #0]
 8008616:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800861a:	460c      	mov	r4, r1
 800861c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008620:	b10a      	cbz	r2, 8008626 <_printf_common+0x26>
 8008622:	3301      	adds	r3, #1
 8008624:	6033      	str	r3, [r6, #0]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	0699      	lsls	r1, r3, #26
 800862a:	bf42      	ittt	mi
 800862c:	6833      	ldrmi	r3, [r6, #0]
 800862e:	3302      	addmi	r3, #2
 8008630:	6033      	strmi	r3, [r6, #0]
 8008632:	6825      	ldr	r5, [r4, #0]
 8008634:	f015 0506 	ands.w	r5, r5, #6
 8008638:	d106      	bne.n	8008648 <_printf_common+0x48>
 800863a:	f104 0a19 	add.w	sl, r4, #25
 800863e:	68e3      	ldr	r3, [r4, #12]
 8008640:	6832      	ldr	r2, [r6, #0]
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	42ab      	cmp	r3, r5
 8008646:	dc2b      	bgt.n	80086a0 <_printf_common+0xa0>
 8008648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	3b00      	subs	r3, #0
 8008650:	bf18      	it	ne
 8008652:	2301      	movne	r3, #1
 8008654:	0692      	lsls	r2, r2, #26
 8008656:	d430      	bmi.n	80086ba <_printf_common+0xba>
 8008658:	4641      	mov	r1, r8
 800865a:	4638      	mov	r0, r7
 800865c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008660:	47c8      	blx	r9
 8008662:	3001      	adds	r0, #1
 8008664:	d023      	beq.n	80086ae <_printf_common+0xae>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	6922      	ldr	r2, [r4, #16]
 800866a:	f003 0306 	and.w	r3, r3, #6
 800866e:	2b04      	cmp	r3, #4
 8008670:	bf14      	ite	ne
 8008672:	2500      	movne	r5, #0
 8008674:	6833      	ldreq	r3, [r6, #0]
 8008676:	f04f 0600 	mov.w	r6, #0
 800867a:	bf08      	it	eq
 800867c:	68e5      	ldreq	r5, [r4, #12]
 800867e:	f104 041a 	add.w	r4, r4, #26
 8008682:	bf08      	it	eq
 8008684:	1aed      	subeq	r5, r5, r3
 8008686:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800868a:	bf08      	it	eq
 800868c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008690:	4293      	cmp	r3, r2
 8008692:	bfc4      	itt	gt
 8008694:	1a9b      	subgt	r3, r3, r2
 8008696:	18ed      	addgt	r5, r5, r3
 8008698:	42b5      	cmp	r5, r6
 800869a:	d11a      	bne.n	80086d2 <_printf_common+0xd2>
 800869c:	2000      	movs	r0, #0
 800869e:	e008      	b.n	80086b2 <_printf_common+0xb2>
 80086a0:	2301      	movs	r3, #1
 80086a2:	4652      	mov	r2, sl
 80086a4:	4641      	mov	r1, r8
 80086a6:	4638      	mov	r0, r7
 80086a8:	47c8      	blx	r9
 80086aa:	3001      	adds	r0, #1
 80086ac:	d103      	bne.n	80086b6 <_printf_common+0xb6>
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295
 80086b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b6:	3501      	adds	r5, #1
 80086b8:	e7c1      	b.n	800863e <_printf_common+0x3e>
 80086ba:	2030      	movs	r0, #48	@ 0x30
 80086bc:	18e1      	adds	r1, r4, r3
 80086be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086c8:	4422      	add	r2, r4
 80086ca:	3302      	adds	r3, #2
 80086cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086d0:	e7c2      	b.n	8008658 <_printf_common+0x58>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4622      	mov	r2, r4
 80086d6:	4641      	mov	r1, r8
 80086d8:	4638      	mov	r0, r7
 80086da:	47c8      	blx	r9
 80086dc:	3001      	adds	r0, #1
 80086de:	d0e6      	beq.n	80086ae <_printf_common+0xae>
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7d9      	b.n	8008698 <_printf_common+0x98>

080086e4 <_printf_i>:
 80086e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	7e0f      	ldrb	r7, [r1, #24]
 80086ea:	4691      	mov	r9, r2
 80086ec:	2f78      	cmp	r7, #120	@ 0x78
 80086ee:	4680      	mov	r8, r0
 80086f0:	460c      	mov	r4, r1
 80086f2:	469a      	mov	sl, r3
 80086f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086fa:	d807      	bhi.n	800870c <_printf_i+0x28>
 80086fc:	2f62      	cmp	r7, #98	@ 0x62
 80086fe:	d80a      	bhi.n	8008716 <_printf_i+0x32>
 8008700:	2f00      	cmp	r7, #0
 8008702:	f000 80d3 	beq.w	80088ac <_printf_i+0x1c8>
 8008706:	2f58      	cmp	r7, #88	@ 0x58
 8008708:	f000 80ba 	beq.w	8008880 <_printf_i+0x19c>
 800870c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008714:	e03a      	b.n	800878c <_printf_i+0xa8>
 8008716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800871a:	2b15      	cmp	r3, #21
 800871c:	d8f6      	bhi.n	800870c <_printf_i+0x28>
 800871e:	a101      	add	r1, pc, #4	@ (adr r1, 8008724 <_printf_i+0x40>)
 8008720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008724:	0800877d 	.word	0x0800877d
 8008728:	08008791 	.word	0x08008791
 800872c:	0800870d 	.word	0x0800870d
 8008730:	0800870d 	.word	0x0800870d
 8008734:	0800870d 	.word	0x0800870d
 8008738:	0800870d 	.word	0x0800870d
 800873c:	08008791 	.word	0x08008791
 8008740:	0800870d 	.word	0x0800870d
 8008744:	0800870d 	.word	0x0800870d
 8008748:	0800870d 	.word	0x0800870d
 800874c:	0800870d 	.word	0x0800870d
 8008750:	08008893 	.word	0x08008893
 8008754:	080087bb 	.word	0x080087bb
 8008758:	0800884d 	.word	0x0800884d
 800875c:	0800870d 	.word	0x0800870d
 8008760:	0800870d 	.word	0x0800870d
 8008764:	080088b5 	.word	0x080088b5
 8008768:	0800870d 	.word	0x0800870d
 800876c:	080087bb 	.word	0x080087bb
 8008770:	0800870d 	.word	0x0800870d
 8008774:	0800870d 	.word	0x0800870d
 8008778:	08008855 	.word	0x08008855
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6032      	str	r2, [r6, #0]
 8008784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800878c:	2301      	movs	r3, #1
 800878e:	e09e      	b.n	80088ce <_printf_i+0x1ea>
 8008790:	6833      	ldr	r3, [r6, #0]
 8008792:	6820      	ldr	r0, [r4, #0]
 8008794:	1d19      	adds	r1, r3, #4
 8008796:	6031      	str	r1, [r6, #0]
 8008798:	0606      	lsls	r6, r0, #24
 800879a:	d501      	bpl.n	80087a0 <_printf_i+0xbc>
 800879c:	681d      	ldr	r5, [r3, #0]
 800879e:	e003      	b.n	80087a8 <_printf_i+0xc4>
 80087a0:	0645      	lsls	r5, r0, #25
 80087a2:	d5fb      	bpl.n	800879c <_printf_i+0xb8>
 80087a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	da03      	bge.n	80087b4 <_printf_i+0xd0>
 80087ac:	232d      	movs	r3, #45	@ 0x2d
 80087ae:	426d      	negs	r5, r5
 80087b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087b4:	230a      	movs	r3, #10
 80087b6:	4859      	ldr	r0, [pc, #356]	@ (800891c <_printf_i+0x238>)
 80087b8:	e011      	b.n	80087de <_printf_i+0xfa>
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	0608      	lsls	r0, r1, #24
 80087c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80087c4:	d402      	bmi.n	80087cc <_printf_i+0xe8>
 80087c6:	0649      	lsls	r1, r1, #25
 80087c8:	bf48      	it	mi
 80087ca:	b2ad      	uxthmi	r5, r5
 80087cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80087ce:	6033      	str	r3, [r6, #0]
 80087d0:	bf14      	ite	ne
 80087d2:	230a      	movne	r3, #10
 80087d4:	2308      	moveq	r3, #8
 80087d6:	4851      	ldr	r0, [pc, #324]	@ (800891c <_printf_i+0x238>)
 80087d8:	2100      	movs	r1, #0
 80087da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087de:	6866      	ldr	r6, [r4, #4]
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	bfa8      	it	ge
 80087e4:	6821      	ldrge	r1, [r4, #0]
 80087e6:	60a6      	str	r6, [r4, #8]
 80087e8:	bfa4      	itt	ge
 80087ea:	f021 0104 	bicge.w	r1, r1, #4
 80087ee:	6021      	strge	r1, [r4, #0]
 80087f0:	b90d      	cbnz	r5, 80087f6 <_printf_i+0x112>
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	d04b      	beq.n	800888e <_printf_i+0x1aa>
 80087f6:	4616      	mov	r6, r2
 80087f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80087fc:	fb03 5711 	mls	r7, r3, r1, r5
 8008800:	5dc7      	ldrb	r7, [r0, r7]
 8008802:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008806:	462f      	mov	r7, r5
 8008808:	42bb      	cmp	r3, r7
 800880a:	460d      	mov	r5, r1
 800880c:	d9f4      	bls.n	80087f8 <_printf_i+0x114>
 800880e:	2b08      	cmp	r3, #8
 8008810:	d10b      	bne.n	800882a <_printf_i+0x146>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	07df      	lsls	r7, r3, #31
 8008816:	d508      	bpl.n	800882a <_printf_i+0x146>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	6861      	ldr	r1, [r4, #4]
 800881c:	4299      	cmp	r1, r3
 800881e:	bfde      	ittt	le
 8008820:	2330      	movle	r3, #48	@ 0x30
 8008822:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008826:	f106 36ff 	addle.w	r6, r6, #4294967295
 800882a:	1b92      	subs	r2, r2, r6
 800882c:	6122      	str	r2, [r4, #16]
 800882e:	464b      	mov	r3, r9
 8008830:	4621      	mov	r1, r4
 8008832:	4640      	mov	r0, r8
 8008834:	f8cd a000 	str.w	sl, [sp]
 8008838:	aa03      	add	r2, sp, #12
 800883a:	f7ff fee1 	bl	8008600 <_printf_common>
 800883e:	3001      	adds	r0, #1
 8008840:	d14a      	bne.n	80088d8 <_printf_i+0x1f4>
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	b004      	add	sp, #16
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	f043 0320 	orr.w	r3, r3, #32
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	2778      	movs	r7, #120	@ 0x78
 8008856:	4832      	ldr	r0, [pc, #200]	@ (8008920 <_printf_i+0x23c>)
 8008858:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	6831      	ldr	r1, [r6, #0]
 8008860:	061f      	lsls	r7, r3, #24
 8008862:	f851 5b04 	ldr.w	r5, [r1], #4
 8008866:	d402      	bmi.n	800886e <_printf_i+0x18a>
 8008868:	065f      	lsls	r7, r3, #25
 800886a:	bf48      	it	mi
 800886c:	b2ad      	uxthmi	r5, r5
 800886e:	6031      	str	r1, [r6, #0]
 8008870:	07d9      	lsls	r1, r3, #31
 8008872:	bf44      	itt	mi
 8008874:	f043 0320 	orrmi.w	r3, r3, #32
 8008878:	6023      	strmi	r3, [r4, #0]
 800887a:	b11d      	cbz	r5, 8008884 <_printf_i+0x1a0>
 800887c:	2310      	movs	r3, #16
 800887e:	e7ab      	b.n	80087d8 <_printf_i+0xf4>
 8008880:	4826      	ldr	r0, [pc, #152]	@ (800891c <_printf_i+0x238>)
 8008882:	e7e9      	b.n	8008858 <_printf_i+0x174>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	f023 0320 	bic.w	r3, r3, #32
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	e7f6      	b.n	800887c <_printf_i+0x198>
 800888e:	4616      	mov	r6, r2
 8008890:	e7bd      	b.n	800880e <_printf_i+0x12a>
 8008892:	6833      	ldr	r3, [r6, #0]
 8008894:	6825      	ldr	r5, [r4, #0]
 8008896:	1d18      	adds	r0, r3, #4
 8008898:	6961      	ldr	r1, [r4, #20]
 800889a:	6030      	str	r0, [r6, #0]
 800889c:	062e      	lsls	r6, r5, #24
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	d501      	bpl.n	80088a6 <_printf_i+0x1c2>
 80088a2:	6019      	str	r1, [r3, #0]
 80088a4:	e002      	b.n	80088ac <_printf_i+0x1c8>
 80088a6:	0668      	lsls	r0, r5, #25
 80088a8:	d5fb      	bpl.n	80088a2 <_printf_i+0x1be>
 80088aa:	8019      	strh	r1, [r3, #0]
 80088ac:	2300      	movs	r3, #0
 80088ae:	4616      	mov	r6, r2
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	e7bc      	b.n	800882e <_printf_i+0x14a>
 80088b4:	6833      	ldr	r3, [r6, #0]
 80088b6:	2100      	movs	r1, #0
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	6032      	str	r2, [r6, #0]
 80088bc:	681e      	ldr	r6, [r3, #0]
 80088be:	6862      	ldr	r2, [r4, #4]
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f985 	bl	8008bd0 <memchr>
 80088c6:	b108      	cbz	r0, 80088cc <_printf_i+0x1e8>
 80088c8:	1b80      	subs	r0, r0, r6
 80088ca:	6060      	str	r0, [r4, #4]
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2300      	movs	r3, #0
 80088d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088d6:	e7aa      	b.n	800882e <_printf_i+0x14a>
 80088d8:	4632      	mov	r2, r6
 80088da:	4649      	mov	r1, r9
 80088dc:	4640      	mov	r0, r8
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	47d0      	blx	sl
 80088e2:	3001      	adds	r0, #1
 80088e4:	d0ad      	beq.n	8008842 <_printf_i+0x15e>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	079b      	lsls	r3, r3, #30
 80088ea:	d413      	bmi.n	8008914 <_printf_i+0x230>
 80088ec:	68e0      	ldr	r0, [r4, #12]
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	4298      	cmp	r0, r3
 80088f2:	bfb8      	it	lt
 80088f4:	4618      	movlt	r0, r3
 80088f6:	e7a6      	b.n	8008846 <_printf_i+0x162>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4632      	mov	r2, r6
 80088fc:	4649      	mov	r1, r9
 80088fe:	4640      	mov	r0, r8
 8008900:	47d0      	blx	sl
 8008902:	3001      	adds	r0, #1
 8008904:	d09d      	beq.n	8008842 <_printf_i+0x15e>
 8008906:	3501      	adds	r5, #1
 8008908:	68e3      	ldr	r3, [r4, #12]
 800890a:	9903      	ldr	r1, [sp, #12]
 800890c:	1a5b      	subs	r3, r3, r1
 800890e:	42ab      	cmp	r3, r5
 8008910:	dcf2      	bgt.n	80088f8 <_printf_i+0x214>
 8008912:	e7eb      	b.n	80088ec <_printf_i+0x208>
 8008914:	2500      	movs	r5, #0
 8008916:	f104 0619 	add.w	r6, r4, #25
 800891a:	e7f5      	b.n	8008908 <_printf_i+0x224>
 800891c:	08008e5f 	.word	0x08008e5f
 8008920:	08008e70 	.word	0x08008e70

08008924 <__sflush_r>:
 8008924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	0716      	lsls	r6, r2, #28
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	d454      	bmi.n	80089dc <__sflush_r+0xb8>
 8008932:	684b      	ldr	r3, [r1, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dc02      	bgt.n	800893e <__sflush_r+0x1a>
 8008938:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	dd48      	ble.n	80089d0 <__sflush_r+0xac>
 800893e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008940:	2e00      	cmp	r6, #0
 8008942:	d045      	beq.n	80089d0 <__sflush_r+0xac>
 8008944:	2300      	movs	r3, #0
 8008946:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800894a:	682f      	ldr	r7, [r5, #0]
 800894c:	6a21      	ldr	r1, [r4, #32]
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	d030      	beq.n	80089b4 <__sflush_r+0x90>
 8008952:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	0759      	lsls	r1, r3, #29
 8008958:	d505      	bpl.n	8008966 <__sflush_r+0x42>
 800895a:	6863      	ldr	r3, [r4, #4]
 800895c:	1ad2      	subs	r2, r2, r3
 800895e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008960:	b10b      	cbz	r3, 8008966 <__sflush_r+0x42>
 8008962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008964:	1ad2      	subs	r2, r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	4628      	mov	r0, r5
 800896a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800896c:	6a21      	ldr	r1, [r4, #32]
 800896e:	47b0      	blx	r6
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	d106      	bne.n	8008984 <__sflush_r+0x60>
 8008976:	6829      	ldr	r1, [r5, #0]
 8008978:	291d      	cmp	r1, #29
 800897a:	d82b      	bhi.n	80089d4 <__sflush_r+0xb0>
 800897c:	4a28      	ldr	r2, [pc, #160]	@ (8008a20 <__sflush_r+0xfc>)
 800897e:	410a      	asrs	r2, r1
 8008980:	07d6      	lsls	r6, r2, #31
 8008982:	d427      	bmi.n	80089d4 <__sflush_r+0xb0>
 8008984:	2200      	movs	r2, #0
 8008986:	6062      	str	r2, [r4, #4]
 8008988:	6922      	ldr	r2, [r4, #16]
 800898a:	04d9      	lsls	r1, r3, #19
 800898c:	6022      	str	r2, [r4, #0]
 800898e:	d504      	bpl.n	800899a <__sflush_r+0x76>
 8008990:	1c42      	adds	r2, r0, #1
 8008992:	d101      	bne.n	8008998 <__sflush_r+0x74>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b903      	cbnz	r3, 800899a <__sflush_r+0x76>
 8008998:	6560      	str	r0, [r4, #84]	@ 0x54
 800899a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800899c:	602f      	str	r7, [r5, #0]
 800899e:	b1b9      	cbz	r1, 80089d0 <__sflush_r+0xac>
 80089a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089a4:	4299      	cmp	r1, r3
 80089a6:	d002      	beq.n	80089ae <__sflush_r+0x8a>
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7ff fa9b 	bl	8007ee4 <_free_r>
 80089ae:	2300      	movs	r3, #0
 80089b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80089b2:	e00d      	b.n	80089d0 <__sflush_r+0xac>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b0      	blx	r6
 80089ba:	4602      	mov	r2, r0
 80089bc:	1c50      	adds	r0, r2, #1
 80089be:	d1c9      	bne.n	8008954 <__sflush_r+0x30>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0c6      	beq.n	8008954 <__sflush_r+0x30>
 80089c6:	2b1d      	cmp	r3, #29
 80089c8:	d001      	beq.n	80089ce <__sflush_r+0xaa>
 80089ca:	2b16      	cmp	r3, #22
 80089cc:	d11d      	bne.n	8008a0a <__sflush_r+0xe6>
 80089ce:	602f      	str	r7, [r5, #0]
 80089d0:	2000      	movs	r0, #0
 80089d2:	e021      	b.n	8008a18 <__sflush_r+0xf4>
 80089d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d8:	b21b      	sxth	r3, r3
 80089da:	e01a      	b.n	8008a12 <__sflush_r+0xee>
 80089dc:	690f      	ldr	r7, [r1, #16]
 80089de:	2f00      	cmp	r7, #0
 80089e0:	d0f6      	beq.n	80089d0 <__sflush_r+0xac>
 80089e2:	0793      	lsls	r3, r2, #30
 80089e4:	bf18      	it	ne
 80089e6:	2300      	movne	r3, #0
 80089e8:	680e      	ldr	r6, [r1, #0]
 80089ea:	bf08      	it	eq
 80089ec:	694b      	ldreq	r3, [r1, #20]
 80089ee:	1bf6      	subs	r6, r6, r7
 80089f0:	600f      	str	r7, [r1, #0]
 80089f2:	608b      	str	r3, [r1, #8]
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	ddeb      	ble.n	80089d0 <__sflush_r+0xac>
 80089f8:	4633      	mov	r3, r6
 80089fa:	463a      	mov	r2, r7
 80089fc:	4628      	mov	r0, r5
 80089fe:	6a21      	ldr	r1, [r4, #32]
 8008a00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a04:	47e0      	blx	ip
 8008a06:	2800      	cmp	r0, #0
 8008a08:	dc07      	bgt.n	8008a1a <__sflush_r+0xf6>
 8008a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a12:	f04f 30ff 	mov.w	r0, #4294967295
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1a:	4407      	add	r7, r0
 8008a1c:	1a36      	subs	r6, r6, r0
 8008a1e:	e7e9      	b.n	80089f4 <__sflush_r+0xd0>
 8008a20:	dfbffffe 	.word	0xdfbffffe

08008a24 <_fflush_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	690b      	ldr	r3, [r1, #16]
 8008a28:	4605      	mov	r5, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	b913      	cbnz	r3, 8008a34 <_fflush_r+0x10>
 8008a2e:	2500      	movs	r5, #0
 8008a30:	4628      	mov	r0, r5
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	b118      	cbz	r0, 8008a3e <_fflush_r+0x1a>
 8008a36:	6a03      	ldr	r3, [r0, #32]
 8008a38:	b90b      	cbnz	r3, 8008a3e <_fflush_r+0x1a>
 8008a3a:	f7ff f82b 	bl	8007a94 <__sinit>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f3      	beq.n	8008a2e <_fflush_r+0xa>
 8008a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a48:	07d0      	lsls	r0, r2, #31
 8008a4a:	d404      	bmi.n	8008a56 <_fflush_r+0x32>
 8008a4c:	0599      	lsls	r1, r3, #22
 8008a4e:	d402      	bmi.n	8008a56 <_fflush_r+0x32>
 8008a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a52:	f7ff fa36 	bl	8007ec2 <__retarget_lock_acquire_recursive>
 8008a56:	4628      	mov	r0, r5
 8008a58:	4621      	mov	r1, r4
 8008a5a:	f7ff ff63 	bl	8008924 <__sflush_r>
 8008a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a60:	4605      	mov	r5, r0
 8008a62:	07da      	lsls	r2, r3, #31
 8008a64:	d4e4      	bmi.n	8008a30 <_fflush_r+0xc>
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	059b      	lsls	r3, r3, #22
 8008a6a:	d4e1      	bmi.n	8008a30 <_fflush_r+0xc>
 8008a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a6e:	f7ff fa29 	bl	8007ec4 <__retarget_lock_release_recursive>
 8008a72:	e7dd      	b.n	8008a30 <_fflush_r+0xc>

08008a74 <__swhatbuf_r>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	460c      	mov	r4, r1
 8008a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7c:	4615      	mov	r5, r2
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	461e      	mov	r6, r3
 8008a82:	b096      	sub	sp, #88	@ 0x58
 8008a84:	da0c      	bge.n	8008aa0 <__swhatbuf_r+0x2c>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a8e:	bf14      	ite	ne
 8008a90:	2340      	movne	r3, #64	@ 0x40
 8008a92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a96:	2000      	movs	r0, #0
 8008a98:	6031      	str	r1, [r6, #0]
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	b016      	add	sp, #88	@ 0x58
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	466a      	mov	r2, sp
 8008aa2:	f000 f863 	bl	8008b6c <_fstat_r>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	dbed      	blt.n	8008a86 <__swhatbuf_r+0x12>
 8008aaa:	9901      	ldr	r1, [sp, #4]
 8008aac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ab0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ab4:	4259      	negs	r1, r3
 8008ab6:	4159      	adcs	r1, r3
 8008ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008abc:	e7eb      	b.n	8008a96 <__swhatbuf_r+0x22>

08008abe <__smakebuf_r>:
 8008abe:	898b      	ldrh	r3, [r1, #12]
 8008ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac2:	079d      	lsls	r5, r3, #30
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	d507      	bpl.n	8008ada <__smakebuf_r+0x1c>
 8008aca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6163      	str	r3, [r4, #20]
 8008ad6:	b003      	add	sp, #12
 8008ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ada:	466a      	mov	r2, sp
 8008adc:	ab01      	add	r3, sp, #4
 8008ade:	f7ff ffc9 	bl	8008a74 <__swhatbuf_r>
 8008ae2:	9f00      	ldr	r7, [sp, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff fa65 	bl	8007fb8 <_malloc_r>
 8008aee:	b948      	cbnz	r0, 8008b04 <__smakebuf_r+0x46>
 8008af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af4:	059a      	lsls	r2, r3, #22
 8008af6:	d4ee      	bmi.n	8008ad6 <__smakebuf_r+0x18>
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	e7e2      	b.n	8008aca <__smakebuf_r+0xc>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	6020      	str	r0, [r4, #0]
 8008b14:	b15b      	cbz	r3, 8008b2e <__smakebuf_r+0x70>
 8008b16:	4630      	mov	r0, r6
 8008b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b1c:	f000 f838 	bl	8008b90 <_isatty_r>
 8008b20:	b128      	cbz	r0, 8008b2e <__smakebuf_r+0x70>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f023 0303 	bic.w	r3, r3, #3
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	81a3      	strh	r3, [r4, #12]
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	431d      	orrs	r5, r3
 8008b32:	81a5      	strh	r5, [r4, #12]
 8008b34:	e7cf      	b.n	8008ad6 <__smakebuf_r+0x18>

08008b36 <memmove>:
 8008b36:	4288      	cmp	r0, r1
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	eb01 0402 	add.w	r4, r1, r2
 8008b3e:	d902      	bls.n	8008b46 <memmove+0x10>
 8008b40:	4284      	cmp	r4, r0
 8008b42:	4623      	mov	r3, r4
 8008b44:	d807      	bhi.n	8008b56 <memmove+0x20>
 8008b46:	1e43      	subs	r3, r0, #1
 8008b48:	42a1      	cmp	r1, r4
 8008b4a:	d008      	beq.n	8008b5e <memmove+0x28>
 8008b4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b54:	e7f8      	b.n	8008b48 <memmove+0x12>
 8008b56:	4601      	mov	r1, r0
 8008b58:	4402      	add	r2, r0
 8008b5a:	428a      	cmp	r2, r1
 8008b5c:	d100      	bne.n	8008b60 <memmove+0x2a>
 8008b5e:	bd10      	pop	{r4, pc}
 8008b60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b68:	e7f7      	b.n	8008b5a <memmove+0x24>
	...

08008b6c <_fstat_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	2300      	movs	r3, #0
 8008b70:	4d06      	ldr	r5, [pc, #24]	@ (8008b8c <_fstat_r+0x20>)
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	4611      	mov	r1, r2
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f7f9 fd61 	bl	8002640 <_fstat>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d102      	bne.n	8008b88 <_fstat_r+0x1c>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b103      	cbz	r3, 8008b88 <_fstat_r+0x1c>
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000d98 	.word	0x20000d98

08008b90 <_isatty_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	2300      	movs	r3, #0
 8008b94:	4d05      	ldr	r5, [pc, #20]	@ (8008bac <_isatty_r+0x1c>)
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f9 fd5f 	bl	800265e <_isatty>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_isatty_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_isatty_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000d98 	.word	0x20000d98

08008bb0 <_sbrk_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4d05      	ldr	r5, [pc, #20]	@ (8008bcc <_sbrk_r+0x1c>)
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f9 fd66 	bl	800268c <_sbrk>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_sbrk_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_sbrk_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	20000d98 	.word	0x20000d98

08008bd0 <memchr>:
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	b510      	push	{r4, lr}
 8008bd4:	b2c9      	uxtb	r1, r1
 8008bd6:	4402      	add	r2, r0
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	d101      	bne.n	8008be2 <memchr+0x12>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e003      	b.n	8008bea <memchr+0x1a>
 8008be2:	7804      	ldrb	r4, [r0, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	428c      	cmp	r4, r1
 8008be8:	d1f6      	bne.n	8008bd8 <memchr+0x8>
 8008bea:	bd10      	pop	{r4, pc}

08008bec <_realloc_r>:
 8008bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	4615      	mov	r5, r2
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	b921      	cbnz	r1, 8008c02 <_realloc_r+0x16>
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfe:	f7ff b9db 	b.w	8007fb8 <_malloc_r>
 8008c02:	b92a      	cbnz	r2, 8008c10 <_realloc_r+0x24>
 8008c04:	f7ff f96e 	bl	8007ee4 <_free_r>
 8008c08:	2400      	movs	r4, #0
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	f000 f81a 	bl	8008c48 <_malloc_usable_size_r>
 8008c14:	4285      	cmp	r5, r0
 8008c16:	4606      	mov	r6, r0
 8008c18:	d802      	bhi.n	8008c20 <_realloc_r+0x34>
 8008c1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c1e:	d8f4      	bhi.n	8008c0a <_realloc_r+0x1e>
 8008c20:	4629      	mov	r1, r5
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7ff f9c8 	bl	8007fb8 <_malloc_r>
 8008c28:	4607      	mov	r7, r0
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0ec      	beq.n	8008c08 <_realloc_r+0x1c>
 8008c2e:	42b5      	cmp	r5, r6
 8008c30:	462a      	mov	r2, r5
 8008c32:	4621      	mov	r1, r4
 8008c34:	bf28      	it	cs
 8008c36:	4632      	movcs	r2, r6
 8008c38:	f7ff f945 	bl	8007ec6 <memcpy>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4640      	mov	r0, r8
 8008c40:	f7ff f950 	bl	8007ee4 <_free_r>
 8008c44:	463c      	mov	r4, r7
 8008c46:	e7e0      	b.n	8008c0a <_realloc_r+0x1e>

08008c48 <_malloc_usable_size_r>:
 8008c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4c:	1f18      	subs	r0, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfbc      	itt	lt
 8008c52:	580b      	ldrlt	r3, [r1, r0]
 8008c54:	18c0      	addlt	r0, r0, r3
 8008c56:	4770      	bx	lr

08008c58 <_init>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr

08008c64 <_fini>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr
